{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitStagedProtocolGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "lockNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "nftForVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolGovernance",
      "outputs": [
        {
          "internalType": "contract IProtocolGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "registerVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProtocolGovernance",
          "name": "newProtocolGovernance",
          "type": "address"
        }
      ],
      "name": "stageProtocolGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedProtocolGovernance",
      "outputs": [
        {
          "internalType": "contract IProtocolGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedProtocolGovernanceTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "vaultForNft",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "commitStagedProtocolGovernance()": "0407ca13",
    "getApproved(uint256)": "081812fc",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isLocked(uint256)": "f6aacfb1",
    "lockNft(uint256)": "4dcbc739",
    "nftForVault(address)": "fcdabd27",
    "ownerOf(uint256)": "6352211e",
    "protocolGovernance()": "5227ce4c",
    "registerVault(address,address)": "05c4fdf9",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "stageProtocolGovernance(address)": "3be0539c",
    "stagedProtocolGovernance()": "82e9f71f",
    "stagedProtocolGovernanceTimestamp()": "95cdb9a5",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferFrom(address,address,uint256)": "23b872dd",
    "vaultForNft(uint256)": "9c94d853",
    "vaults()": "8220ef5b",
    "vaultsCount()": "88977738"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitStagedProtocolGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"lockNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"nftForVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolGovernance\",\"outputs\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"registerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"newProtocolGovernance\",\"type\":\"address\"}],\"name\":\"stageProtocolGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedProtocolGovernance\",\"outputs\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedProtocolGovernanceTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"vaultForNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isLocked(uint256)\":{\"params\":{\"nft\":\"NFT to check for lock\"},\"returns\":{\"_0\":\"`true` if locked, false otherwise\"}},\"lockNft(uint256)\":{\"details\":\"Use this method when vault structure is set up and should become immutable. Can be called by owner.\",\"params\":{\"nft\":\"- NFT to lock\"}},\"nftForVault(address)\":{\"params\":{\"vault\":\"Address of the Vault contract\"},\"returns\":{\"nftId\":\"NFT ID\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"registerVault(address,address)\":{\"params\":{\"owner\":\"owner of the NFT\",\"vault\":\"address of the vault\"},\"returns\":{\"nft\":\"Nft minted for the given Vault\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"stageProtocolGovernance(address)\":{\"params\":{\"newProtocolGovernance\":\"new ProtocolGovernance\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"vaultForNft(uint256)\":{\"params\":{\"nftId\":\"NFT ID\"},\"returns\":{\"vault\":\"Address of the Vault contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"commitStagedProtocolGovernance()\":{\"notice\":\"Commit new ProtocolGovernance.\"},\"isLocked(uint256)\":{\"notice\":\"Checks if the nft is locked for all transfers\"},\"lockNft(uint256)\":{\"notice\":\"Lock NFT for transfers\"},\"nftForVault(address)\":{\"notice\":\"Get NFT ID for given Vault contract address.\"},\"protocolGovernance()\":{\"notice\":\"Address of the ProtocolGovernance.\"},\"registerVault(address,address)\":{\"notice\":\"Register new Vault and mint NFT.\"},\"stageProtocolGovernance(address)\":{\"notice\":\"Stage new ProtocolGovernance.\"},\"stagedProtocolGovernance()\":{\"notice\":\"Address of the staged ProtocolGovernance.\"},\"stagedProtocolGovernanceTimestamp()\":{\"notice\":\"Minimal timestamp when staged ProtocolGovernance can be applied.\"},\"vaultForNft(uint256)\":{\"notice\":\"Get Vault for the giver NFT ID.\"},\"vaults()\":{\"notice\":\"All Vaults registered.\"},\"vaultsCount()\":{\"notice\":\"Number of Vaults registered.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IVaultRegistry.sol\":\"IVaultRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276\",\"dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x086fbe904291497e1532ef340f1bd589078f49e3d4d0bbfd88f5e02fb89261eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0df1e3e965b78a0d98dda2d1d6a6acde88f515b1d3a9ad02f505e93fa7babeda\",\"dweb:/ipfs/QmW4cSbGriRAj7XRZu6zSaqspe4eyYWkF7WfJbj3rmmLbk\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"src/interfaces/IProtocolGovernance.sol\":{\"keccak256\":\"0x04ea2514f49503cc66574a08382b57f266d23dee04046b479e0cf64c9a0db270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87d8ca060d5ee11bc12b697c580e43267c45ab0d3a690f02b1388cf244eff7d7\",\"dweb:/ipfs/QmXW4jwheCFMtCjNu4bCxvc4XLr2DJyhKLq9DkqQhNU9rp\"]},\"src/interfaces/IUnitPricesGovernance.sol\":{\"keccak256\":\"0x861ae02ad4ba132b8e03ceb19faf915dc800fed8a6f877c344ea2ebd83feb29c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c68568570ed80f1c5516bccf2554c4d228ff479b4bc5da473fff7b789b36abab\",\"dweb:/ipfs/Qmc1geu9fQwe166SY5dKLq3QGGovkCmfk36ZYd3eYp9pUM\"]},\"src/interfaces/IVaultRegistry.sol\":{\"keccak256\":\"0x6c30a6796998d981b6614e57c857c74b38565df25606756635a29388257de21c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60e248f1bf4749beb11979798ef0c7eb0f603ea49de2edcada8a503946bed962\",\"dweb:/ipfs/QmRCgnzokSjV3AKwHETNFm1yjgxgAJ9XrWueeyPBqS3EgD\"]},\"src/interfaces/utils/IDefaultAccessControl.sol\":{\"keccak256\":\"0xf4198613cc054350ce3ad3399fee584b363c27082f2a86645c58a2aab543862d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71a66b3f5794aa7ff48a123a2927f5d588518638c65f6308d92f28b6205ef473\",\"dweb:/ipfs/QmVpCZwQcz8CDHKJL1DSbvmjJTRex3RyQHsAhFCX85GHBj\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitStagedProtocolGovernance"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nft",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isLocked",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nft",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lockNft"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "nftForVault",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "protocolGovernance",
          "outputs": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerVault",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "nft",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "newProtocolGovernance",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "stageProtocolGovernance"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "stagedProtocolGovernance",
          "outputs": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "stagedProtocolGovernanceTimestamp",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultForNft",
          "outputs": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaults",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultsCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the number of tokens in ``owner``'s account."
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "isLocked(uint256)": {
            "params": {
              "nft": "NFT to check for lock"
            },
            "returns": {
              "_0": "`true` if locked, false otherwise"
            }
          },
          "lockNft(uint256)": {
            "details": "Use this method when vault structure is set up and should become immutable. Can be called by owner.",
            "params": {
              "nft": "- NFT to lock"
            }
          },
          "nftForVault(address)": {
            "params": {
              "vault": "Address of the Vault contract"
            },
            "returns": {
              "nftId": "NFT ID"
            }
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "registerVault(address,address)": {
            "params": {
              "owner": "owner of the NFT",
              "vault": "address of the vault"
            },
            "returns": {
              "nft": "Nft minted for the given Vault"
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "stageProtocolGovernance(address)": {
            "params": {
              "newProtocolGovernance": "new ProtocolGovernance"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          },
          "vaultForNft(uint256)": {
            "params": {
              "nftId": "NFT ID"
            },
            "returns": {
              "vault": "Address of the Vault contract"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "commitStagedProtocolGovernance()": {
            "notice": "Commit new ProtocolGovernance."
          },
          "isLocked(uint256)": {
            "notice": "Checks if the nft is locked for all transfers"
          },
          "lockNft(uint256)": {
            "notice": "Lock NFT for transfers"
          },
          "nftForVault(address)": {
            "notice": "Get NFT ID for given Vault contract address."
          },
          "protocolGovernance()": {
            "notice": "Address of the ProtocolGovernance."
          },
          "registerVault(address,address)": {
            "notice": "Register new Vault and mint NFT."
          },
          "stageProtocolGovernance(address)": {
            "notice": "Stage new ProtocolGovernance."
          },
          "stagedProtocolGovernance()": {
            "notice": "Address of the staged ProtocolGovernance."
          },
          "stagedProtocolGovernanceTimestamp()": {
            "notice": "Minimal timestamp when staged ProtocolGovernance can be applied."
          },
          "vaultForNft(uint256)": {
            "notice": "Get Vault for the giver NFT ID."
          },
          "vaults()": {
            "notice": "All Vaults registered."
          },
          "vaultsCount()": {
            "notice": "Number of Vaults registered."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/IVaultRegistry.sol": "IVaultRegistry"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
        "urls": [
          "bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a",
          "dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "keccak256": "0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676",
        "urls": [
          "bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276",
          "dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x086fbe904291497e1532ef340f1bd589078f49e3d4d0bbfd88f5e02fb89261eb",
        "urls": [
          "bzz-raw://0df1e3e965b78a0d98dda2d1d6a6acde88f515b1d3a9ad02f505e93fa7babeda",
          "dweb:/ipfs/QmW4cSbGriRAj7XRZu6zSaqspe4eyYWkF7WfJbj3rmmLbk"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "src/interfaces/IProtocolGovernance.sol": {
        "keccak256": "0x04ea2514f49503cc66574a08382b57f266d23dee04046b479e0cf64c9a0db270",
        "urls": [
          "bzz-raw://87d8ca060d5ee11bc12b697c580e43267c45ab0d3a690f02b1388cf244eff7d7",
          "dweb:/ipfs/QmXW4jwheCFMtCjNu4bCxvc4XLr2DJyhKLq9DkqQhNU9rp"
        ],
        "license": "MIT"
      },
      "src/interfaces/IUnitPricesGovernance.sol": {
        "keccak256": "0x861ae02ad4ba132b8e03ceb19faf915dc800fed8a6f877c344ea2ebd83feb29c",
        "urls": [
          "bzz-raw://c68568570ed80f1c5516bccf2554c4d228ff479b4bc5da473fff7b789b36abab",
          "dweb:/ipfs/Qmc1geu9fQwe166SY5dKLq3QGGovkCmfk36ZYd3eYp9pUM"
        ],
        "license": "MIT"
      },
      "src/interfaces/IVaultRegistry.sol": {
        "keccak256": "0x6c30a6796998d981b6614e57c857c74b38565df25606756635a29388257de21c",
        "urls": [
          "bzz-raw://60e248f1bf4749beb11979798ef0c7eb0f603ea49de2edcada8a503946bed962",
          "dweb:/ipfs/QmRCgnzokSjV3AKwHETNFm1yjgxgAJ9XrWueeyPBqS3EgD"
        ],
        "license": "MIT"
      },
      "src/interfaces/utils/IDefaultAccessControl.sol": {
        "keccak256": "0xf4198613cc054350ce3ad3399fee584b363c27082f2a86645c58a2aab543862d",
        "urls": [
          "bzz-raw://71a66b3f5794aa7ff48a123a2927f5d588518638c65f6308d92f28b6205ef473",
          "dweb:/ipfs/QmVpCZwQcz8CDHKJL1DSbvmjJTRex3RyQHsAhFCX85GHBj"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/IVaultRegistry.sol",
    "id": 12449,
    "exportedSymbols": {
      "IAccessControl": [
        6209
      ],
      "IAccessControlEnumerable": [
        6234
      ],
      "IDefaultAccessControl": [
        12525
      ],
      "IERC165": [
        8445
      ],
      "IERC721": [
        7782
      ],
      "IProtocolGovernance": [
        12304
      ],
      "IUnitPricesGovernance": [
        12357
      ],
      "IVaultRegistry": [
        12448
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2258:34",
    "nodes": [
      {
        "id": 12359,
        "nodeType": "PragmaDirective",
        "src": "32:23:34",
        "literals": [
          "solidity",
          "=",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 12360,
        "nodeType": "ImportDirective",
        "src": "57:58:34",
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12449,
        "sourceUnit": 7783,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 12361,
        "nodeType": "ImportDirective",
        "src": "116:35:34",
        "absolutePath": "src/interfaces/IProtocolGovernance.sol",
        "file": "./IProtocolGovernance.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12449,
        "sourceUnit": 12305,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 12448,
        "nodeType": "ContractDefinition",
        "src": "153:2136:34",
        "nodes": [
          {
            "id": 12371,
            "nodeType": "FunctionDefinition",
            "src": "323:74:34",
            "documentation": {
              "id": 12364,
              "nodeType": "StructuredDocumentation",
              "src": "195:123:34",
              "text": "@notice Get Vault for the giver NFT ID.\n @param nftId NFT ID\n @return vault Address of the Vault contract"
            },
            "functionSelector": "9c94d853",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "vaultForNft",
            "nameLocation": "332:11:34",
            "parameters": {
              "id": 12367,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12366,
                  "mutability": "mutable",
                  "name": "nftId",
                  "nameLocation": "352:5:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12371,
                  "src": "344:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12365,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "344:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "343:15:34"
            },
            "returnParameters": {
              "id": 12370,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12369,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "390:5:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12371,
                  "src": "382:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12368,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "382:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "381:15:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12379,
            "nodeType": "FunctionDefinition",
            "src": "544:74:34",
            "documentation": {
              "id": 12372,
              "nodeType": "StructuredDocumentation",
              "src": "403:136:34",
              "text": "@notice Get NFT ID for given Vault contract address.\n @param vault Address of the Vault contract\n @return nftId NFT ID"
            },
            "functionSelector": "fcdabd27",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "nftForVault",
            "nameLocation": "553:11:34",
            "parameters": {
              "id": 12375,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12374,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "573:5:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12379,
                  "src": "565:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12373,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "565:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "564:15:34"
            },
            "returnParameters": {
              "id": 12378,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12377,
                  "mutability": "mutable",
                  "name": "nftId",
                  "nameLocation": "611:5:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12379,
                  "src": "603:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12376,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "603:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "602:15:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12387,
            "nodeType": "FunctionDefinition",
            "src": "777:60:34",
            "documentation": {
              "id": 12380,
              "nodeType": "StructuredDocumentation",
              "src": "624:148:34",
              "text": "@notice Checks if the nft is locked for all transfers\n @param nft NFT to check for lock\n @return `true` if locked, false otherwise"
            },
            "functionSelector": "f6aacfb1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isLocked",
            "nameLocation": "786:8:34",
            "parameters": {
              "id": 12383,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12382,
                  "mutability": "mutable",
                  "name": "nft",
                  "nameLocation": "803:3:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12387,
                  "src": "795:11:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12381,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "795:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "794:13:34"
            },
            "returnParameters": {
              "id": 12386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12385,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12387,
                  "src": "831:4:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12384,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "831:4:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "830:6:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12397,
            "nodeType": "FunctionDefinition",
            "src": "1023:84:34",
            "documentation": {
              "id": 12388,
              "nodeType": "StructuredDocumentation",
              "src": "843:175:34",
              "text": "@notice Register new Vault and mint NFT.\n @param vault address of the vault\n @param owner owner of the NFT\n @return nft Nft minted for the given Vault"
            },
            "functionSelector": "05c4fdf9",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerVault",
            "nameLocation": "1032:13:34",
            "parameters": {
              "id": 12393,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12390,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "1054:5:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12397,
                  "src": "1046:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12389,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1046:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12392,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1069:5:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12397,
                  "src": "1061:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12391,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1061:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1045:30:34"
            },
            "returnParameters": {
              "id": 12396,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12395,
                  "mutability": "mutable",
                  "name": "nft",
                  "nameLocation": "1102:3:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12397,
                  "src": "1094:11:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12394,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1094:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1093:13:34"
            },
            "scope": 12448,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12403,
            "nodeType": "FunctionDefinition",
            "src": "1158:55:34",
            "documentation": {
              "id": 12398,
              "nodeType": "StructuredDocumentation",
              "src": "1113:40:34",
              "text": "@notice Number of Vaults registered."
            },
            "functionSelector": "88977738",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "vaultsCount",
            "nameLocation": "1167:11:34",
            "parameters": {
              "id": 12399,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1178:2:34"
            },
            "returnParameters": {
              "id": 12402,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12401,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12403,
                  "src": "1204:7:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12400,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1204:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1203:9:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12410,
            "nodeType": "FunctionDefinition",
            "src": "1258:59:34",
            "documentation": {
              "id": 12404,
              "nodeType": "StructuredDocumentation",
              "src": "1219:34:34",
              "text": "@notice All Vaults registered."
            },
            "functionSelector": "8220ef5b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "vaults",
            "nameLocation": "1267:6:34",
            "parameters": {
              "id": 12405,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1273:2:34"
            },
            "returnParameters": {
              "id": 12409,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12408,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12410,
                  "src": "1299:16:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12406,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1299:7:34",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 12407,
                    "nodeType": "ArrayTypeName",
                    "src": "1299:9:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1298:18:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12417,
            "nodeType": "FunctionDefinition",
            "src": "1374:74:34",
            "documentation": {
              "id": 12411,
              "nodeType": "StructuredDocumentation",
              "src": "1323:46:34",
              "text": "@notice Address of the ProtocolGovernance."
            },
            "functionSelector": "5227ce4c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "protocolGovernance",
            "nameLocation": "1383:18:34",
            "parameters": {
              "id": 12412,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1401:2:34"
            },
            "returnParameters": {
              "id": 12416,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12415,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12417,
                  "src": "1427:19:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IProtocolGovernance_$12304",
                    "typeString": "contract IProtocolGovernance"
                  },
                  "typeName": {
                    "id": 12414,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12413,
                      "name": "IProtocolGovernance",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12304,
                      "src": "1427:19:34"
                    },
                    "referencedDeclaration": 12304,
                    "src": "1427:19:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IProtocolGovernance_$12304",
                      "typeString": "contract IProtocolGovernance"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1426:21:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12424,
            "nodeType": "FunctionDefinition",
            "src": "1512:80:34",
            "documentation": {
              "id": 12418,
              "nodeType": "StructuredDocumentation",
              "src": "1454:53:34",
              "text": "@notice Address of the staged ProtocolGovernance."
            },
            "functionSelector": "82e9f71f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stagedProtocolGovernance",
            "nameLocation": "1521:24:34",
            "parameters": {
              "id": 12419,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1545:2:34"
            },
            "returnParameters": {
              "id": 12423,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12422,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12424,
                  "src": "1571:19:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IProtocolGovernance_$12304",
                    "typeString": "contract IProtocolGovernance"
                  },
                  "typeName": {
                    "id": 12421,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12420,
                      "name": "IProtocolGovernance",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12304,
                      "src": "1571:19:34"
                    },
                    "referencedDeclaration": 12304,
                    "src": "1571:19:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IProtocolGovernance_$12304",
                      "typeString": "contract IProtocolGovernance"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1570:21:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12430,
            "nodeType": "FunctionDefinition",
            "src": "1679:77:34",
            "documentation": {
              "id": 12425,
              "nodeType": "StructuredDocumentation",
              "src": "1598:76:34",
              "text": "@notice Minimal timestamp when staged ProtocolGovernance can be applied."
            },
            "functionSelector": "95cdb9a5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stagedProtocolGovernanceTimestamp",
            "nameLocation": "1688:33:34",
            "parameters": {
              "id": 12426,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1721:2:34"
            },
            "returnParameters": {
              "id": 12429,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12428,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12430,
                  "src": "1747:7:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12427,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1747:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1746:9:34"
            },
            "scope": 12448,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12437,
            "nodeType": "FunctionDefinition",
            "src": "1868:85:34",
            "documentation": {
              "id": 12431,
              "nodeType": "StructuredDocumentation",
              "src": "1762:101:34",
              "text": "@notice Stage new ProtocolGovernance.\n @param newProtocolGovernance new ProtocolGovernance"
            },
            "functionSelector": "3be0539c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stageProtocolGovernance",
            "nameLocation": "1877:23:34",
            "parameters": {
              "id": 12435,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12434,
                  "mutability": "mutable",
                  "name": "newProtocolGovernance",
                  "nameLocation": "1921:21:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12437,
                  "src": "1901:41:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IProtocolGovernance_$12304",
                    "typeString": "contract IProtocolGovernance"
                  },
                  "typeName": {
                    "id": 12433,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12432,
                      "name": "IProtocolGovernance",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12304,
                      "src": "1901:19:34"
                    },
                    "referencedDeclaration": 12304,
                    "src": "1901:19:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IProtocolGovernance_$12304",
                      "typeString": "contract IProtocolGovernance"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1900:43:34"
            },
            "returnParameters": {
              "id": 12436,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1952:0:34"
            },
            "scope": 12448,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12441,
            "nodeType": "FunctionDefinition",
            "src": "2006:51:34",
            "documentation": {
              "id": 12438,
              "nodeType": "StructuredDocumentation",
              "src": "1959:42:34",
              "text": "@notice Commit new ProtocolGovernance."
            },
            "functionSelector": "0407ca13",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "commitStagedProtocolGovernance",
            "nameLocation": "2015:30:34",
            "parameters": {
              "id": 12439,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2045:2:34"
            },
            "returnParameters": {
              "id": 12440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2056:0:34"
            },
            "scope": 12448,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 12447,
            "nodeType": "FunctionDefinition",
            "src": "2248:39:34",
            "documentation": {
              "id": 12442,
              "nodeType": "StructuredDocumentation",
              "src": "2063:180:34",
              "text": "@notice Lock NFT for transfers\n @dev Use this method when vault structure is set up and should become immutable. Can be called by owner.\n @param nft - NFT to lock"
            },
            "functionSelector": "4dcbc739",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lockNft",
            "nameLocation": "2257:7:34",
            "parameters": {
              "id": 12445,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12444,
                  "mutability": "mutable",
                  "name": "nft",
                  "nameLocation": "2273:3:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 12447,
                  "src": "2265:11:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12443,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2265:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2264:13:34"
            },
            "returnParameters": {
              "id": 12446,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2286:0:34"
            },
            "scope": 12448,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 12362,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7782,
              "src": "181:7:34"
            },
            "id": 12363,
            "nodeType": "InheritanceSpecifier",
            "src": "181:7:34"
          }
        ],
        "canonicalName": "IVaultRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          12448,
          7782,
          8445
        ],
        "name": "IVaultRegistry",
        "nameLocation": "163:14:34",
        "scope": 12449,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 34
}