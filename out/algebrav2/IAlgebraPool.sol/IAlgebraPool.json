{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidityAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount0",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount1",
          "type": "uint128"
        }
      ],
      "name": "Collect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "communityFeeNew",
          "type": "uint8"
        }
      ],
      "name": "CommunityFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DataStorageFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "name": "Fee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid1",
          "type": "uint256"
        }
      ],
      "name": "Flash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newIncentiveAddress",
          "type": "address"
        }
      ],
      "name": "Incentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "price",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidityAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "price",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int24",
          "name": "newTickSpacing",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "newTickSpacingLimitOrders",
          "type": "int24"
        }
      ],
      "name": "TickSpacing",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeIncentive",
      "outputs": [
        {
          "internalType": "address",
          "name": "incentiveAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "amount0Requested",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount1Requested",
          "type": "uint128"
        }
      ],
      "name": "collect",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount0",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount1",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityFeeLastTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataStorageOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommunityFeePending",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "communityFeePending0",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "communityFeePending1",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        }
      ],
      "name": "getInnerCumulatives",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "innerSecondsSpentPerLiquidity",
          "type": "uint160"
        },
        {
          "internalType": "uint32",
          "name": "innerSecondsSpent",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "reserve0",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "reserve1",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalState",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "price",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "prevInitializedTick",
          "type": "int24"
        },
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "timepointIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "communityFee",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "unlocked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "price",
          "type": "uint160"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "limitOrders",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amountToSell",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "soldAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "boughtAmount0Cumulative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boughtAmount1Cumulative",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidityPerTick",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "liquidityActual",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "innerFeeGrowth0Token",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "innerFeeGrowth1Token",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "fees0",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fees1",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondsPerLiquidityCumulative",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "communityFee",
          "type": "uint8"
        }
      ],
      "name": "setCommunityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newIncentiveAddress",
          "type": "address"
        }
      ],
      "name": "setIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "newTickSpacing",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "newTickSpacingLimitOrders",
          "type": "int24"
        }
      ],
      "name": "setTickSpacing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroToOne",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "amountRequired",
          "type": "int256"
        },
        {
          "internalType": "uint160",
          "name": "limitSqrtPrice",
          "type": "uint160"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroToOne",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "amountRequired",
          "type": "int256"
        },
        {
          "internalType": "uint160",
          "name": "limitSqrtPrice",
          "type": "uint160"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapSupportingFeeOnInputTokens",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tickSpacing",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tickSpacingLimitOrders",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int16",
          "name": "wordPosition",
          "type": "int16"
        }
      ],
      "name": "tickTable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "ticks",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidityTotal",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "liquidityDelta",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "outerFeeGrowth0Token",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outerFeeGrowth1Token",
          "type": "uint256"
        },
        {
          "internalType": "int24",
          "name": "prevTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "nextTick",
          "type": "int24"
        },
        {
          "internalType": "uint160",
          "name": "outerSecondsPerLiquidity",
          "type": "uint160"
        },
        {
          "internalType": "uint32",
          "name": "outerSecondsSpent",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "hasLimitOrders",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeGrowth0Token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeGrowth1Token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "activeIncentive()": "facb0eb1",
    "burn(int24,int24,uint128)": "a34123a7",
    "collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
    "communityFeeLastTimestamp()": "1131b110",
    "communityVault()": "53e97868",
    "dataStorageOperator()": "29047dfa",
    "factory()": "c45a0155",
    "flash(address,uint256,uint256,bytes)": "490e6cbc",
    "getCommunityFeePending()": "7bd78025",
    "getInnerCumulatives(int24,int24)": "920c34e5",
    "getReserves()": "0902f1ac",
    "globalState()": "e76c01e4",
    "initialize(uint160)": "f637731d",
    "limitOrders(int24)": "c8a67f93",
    "liquidity()": "1a686502",
    "maxLiquidityPerTick()": "70cf754a",
    "mint(address,address,int24,int24,uint128,bytes)": "aafe29c0",
    "positions(bytes32)": "514ea4bf",
    "secondsPerLiquidityCumulative()": "d64c6d71",
    "setCommunityFee(uint8)": "779ab362",
    "setIncentive(address)": "7c1fe0c8",
    "setTickSpacing(int24,int24)": "7e9061b5",
    "swap(address,bool,int256,uint160,bytes)": "128acb08",
    "swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)": "71334694",
    "tickSpacing()": "d0c93a7c",
    "tickSpacingLimitOrders()": "18dd8891",
    "tickTable(int16)": "c677e3e0",
    "ticks(int24)": "f30dba93",
    "token0()": "0dfe1681",
    "token1()": "d21220a7",
    "totalFeeGrowth0Token()": "6378ae44",
    "totalFeeGrowth1Token()": "ecdecf42"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"communityFeeNew\",\"type\":\"uint8\"}],\"name\":\"CommunityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DataStorageFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIncentiveAddress\",\"type\":\"address\"}],\"name\":\"Incentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"newTickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"newTickSpacingLimitOrders\",\"type\":\"int24\"}],\"name\":\"TickSpacing\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeIncentive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"incentiveAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityFeeLastTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataStorageOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityFeePending\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"communityFeePending0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"communityFeePending1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"}],\"name\":\"getInnerCumulatives\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"innerSecondsSpentPerLiquidity\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"innerSecondsSpent\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reserve0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserve1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalState\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"prevInitializedTick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"timepointIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"communityFee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"limitOrders\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amountToSell\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"soldAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"boughtAmount0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtAmount1Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityActual\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth1Token\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fees0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fees1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerLiquidityCumulative\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"communityFee\",\"type\":\"uint8\"}],\"name\":\"setCommunityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIncentiveAddress\",\"type\":\"address\"}],\"name\":\"setIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"newTickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"newTickSpacingLimitOrders\",\"type\":\"int24\"}],\"name\":\"setTickSpacing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroToOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountRequired\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroToOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountRequired\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapSupportingFeeOnInputTokens\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacingLimitOrders\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityTotal\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth1Token\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"prevTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"nextTick\",\"type\":\"int24\"},{\"internalType\":\"uint160\",\"name\":\"outerSecondsPerLiquidity\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"outerSecondsSpent\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"hasLimitOrders\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth0Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth1Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces. Credit to Uniswap Labs under GPL-2.0-or-later license: https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\",\"kind\":\"dev\",\"methods\":{\"activeIncentive()\":{\"details\":\"if there is no active incentive at the moment, incentiveAddress would be equal to address(0)\",\"returns\":{\"incentiveAddress\":\"The address associated with the current active incentive\"}},\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"bottomTick\":\"The lower tick of the position for which to burn liquidity\",\"topTick\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"bottomTick\":\"The lower tick of the position for which to collect fees\",\"recipient\":\"The address which should receive the fees collected\",\"topTick\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"communityVault()\":{\"returns\":{\"_0\":\"The communityVault address\"}},\"dataStorageOperator()\":{\"returns\":{\"_0\":\"The operator address\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IAlgebraFlashCallback#AlgebraFlashCallbackAll excess tokens paid in the callback are distributed to currently in-range liquidity providers as an additional fee. If there are no in-range liquidity providers, the fee will be transferred to the first active provider in the future\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"getCommunityFeePending()\":{\"details\":\"Will be sent COMMUNITY_FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp\"},\"getInnerCumulatives(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"bottomTick\":\"The lower tick of the range\",\"topTick\":\"The upper tick of the range\"},\"returns\":{\"innerSecondsSpent\":\"The snapshot of the number of seconds during which the price was in this range\",\"innerSecondsSpentPerLiquidity\":\"The snapshot of seconds per liquidity for the range\"}},\"getReserves()\":{\"details\":\"If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee. If the balance exceeds uint128, the excess will be sent to the communityVault.\"},\"globalState()\":{\"returns\":{\"communityFee\":\"The community fee percentage of the swap fee in thousandths (1e-3)\",\"fee\":\"The last pool fee value in hundredths of a bip, i.e. 1e-6\",\"prevInitializedTick\":\"The previous initialized tick\",\"price\":\"The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value;\",\"tick\":\"The current tick of the pool, i.e. according to the last tick transition that was run; This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary;\",\"timepointIndex\":\"The index of the last written timepoint\",\"unlocked\":\"Whether the pool is currently locked to reentrancy\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valueInitialization should be done in one transaction with pool creation to avoid front-running\",\"params\":{\"price\":\"the initial sqrt price of the pool as a Q64.96\"}},\"limitOrders(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"amountToSell\":\"The amount of tokens to sell. Has only relative meaning\",\"boughtAmount0Cumulative\":\"The accumulator of bought tokens0 per amountToSell. Has only relative meaning\",\"boughtAmount1Cumulative\":\"The accumulator of bought tokens1 per amountToSell. Has only relative meaning\",\"initialized\":\"Will be true if a limit order was created at least once on this tick\",\"soldAmount\":\"The amount of tokens already sold. Has only relative meaning\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks. Returned value cannot exceed type(uint128).max\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on bottomTick, topTick, the amount of liquidity, and the current price. If bottomTick == topTick position is treated as a limit order\",\"params\":{\"amount\":\"The desired amount of liquidity to mint\",\"bottomTick\":\"The lower tick of the position in which to add liquidity\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"sender\":\"The address which will receive potential surplus of paid tokens\",\"topTick\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"liquidityActual\":\"The actual minted amount of liquidity\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\"},\"returns\":{\"fees0\":\"The computed amount of token0 owed to the position as of the last mint/burn/poke\",\"fees1\":\"The computed amount of token1 owed to the position as of the last mint/burn/poke\",\"innerFeeGrowth0Token\":\"Fee growth of token0 inside the tick range as of the last mint/burn/poke\",\"innerFeeGrowth1Token\":\"Fee growth of token1 inside the tick range as of the last mint/burn/poke\",\"liquidity\":\"The amount of liquidity in the position\"}},\"setCommunityFee(uint8)\":{\"params\":{\"communityFee\":\"new community fee percent in thousandths (1e-3)\"}},\"setIncentive(address)\":{\"params\":{\"newIncentiveAddress\":\"The address associated with the incentive\"}},\"setTickSpacing(int24,int24)\":{\"params\":{\"newTickSpacing\":\"The new tick spacing value\",\"newTickSpacingLimitOrders\":\"The new tick spacing value for limit orders\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IAlgebraSwapCallback#AlgebraSwapCallback\",\"params\":{\"amountRequired\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\",\"limitSqrtPrice\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"recipient\":\"The address to receive the output of the swap\",\"zeroToOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IAlgebraSwapCallback#AlgebraSwapCallback\",\"params\":{\"amountRequired\":\"The amount of the swap, which implicitly configures the swap as exact input\",\"data\":\"Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\",\"limitSqrtPrice\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"recipient\":\"The address to receive the output of the swap\",\"sender\":\"The address called this function (Comes from the Router)\",\"zeroToOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The current tick spacing\"}},\"tickSpacingLimitOrders()\":{\"details\":\"Ticks can only be used for limit orders at multiples of this value This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The current tick spacing for limit orders\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"hasLimitOrders\":\"Whether there are limit orders on this tick or not In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\",\"liquidityDelta\":\"How much liquidity changes when the pool price crosses the tick\",\"liquidityTotal\":\"The total amount of position liquidity that uses the pool either as tick lower or tick upper\",\"nextTick\":\"The next tick in tick list\",\"outerFeeGrowth0Token\":\"The fee growth on the other side of the tick from the current tick in token0\",\"outerFeeGrowth1Token\":\"The fee growth on the other side of the tick from the current tick in token1\",\"outerSecondsPerLiquidity\":\"The seconds spent per liquidity on the other side of the tick from the current tick\",\"outerSecondsSpent\":\"The seconds spent on the other side of the tick from the current tick\",\"prevTick\":\"The previous tick in tick list\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"totalFeeGrowth0Token()\":{\"details\":\"This value can overflow the uint256\"},\"totalFeeGrowth1Token()\":{\"details\":\"This value can overflow the uint256\"}},\"title\":\"The interface for a Algebra Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CommunityFee(uint8)\":{\"notice\":\"Emitted when the community fee is changed by the pool\"},\"DataStorageFailure()\":{\"notice\":\"Emitted in case of an error when trying to write to the DataStorage\"},\"Fee(uint16)\":{\"notice\":\"Emitted when the fee changes inside the pool\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"Incentive(address)\":{\"notice\":\"Emitted when new activeIncentive is set\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"},\"TickSpacing(int24,int24)\":{\"notice\":\"Emitted when the tick spacing changes\"}},\"kind\":\"user\",\"methods\":{\"activeIncentive()\":{\"notice\":\"Returns the information about active incentive\"},\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"communityFeeLastTimestamp()\":{\"notice\":\"The timestamp of the last sending of tokens to community vault\"},\"communityVault()\":{\"notice\":\"The contract to which community fees are transferred\"},\"dataStorageOperator()\":{\"notice\":\"The contract that stores all the timepoints and can perform actions with them\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"getCommunityFeePending()\":{\"notice\":\"The amounts of token0 and token1 that will be sent to the vault\"},\"getInnerCumulatives(int24,int24)\":{\"notice\":\"Returns a snapshot of seconds per liquidity and seconds inside a tick range\"},\"getReserves()\":{\"notice\":\"The tracked token0 and token1 reserves of pool\"},\"globalState()\":{\"notice\":\"The globalState structure in the pool stores many values but requires only one slot and is exposed as a single method to save gas when accessed externally.\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"limitOrders(int24)\":{\"notice\":\"Returns the summary information about a limit orders at tick\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/bottomTick/topTick position\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"secondsPerLiquidityCumulative()\":{\"notice\":\"The accumulator of seconds per liquidity since the pool was first initialized\"},\"setCommunityFee(uint8)\":{\"notice\":\"Set the community's % share of the fees. Cannot exceed 25% (250). Only factory owner or POOLS_ADMINISTRATOR_ROLE role\"},\"setIncentive(address)\":{\"notice\":\"Sets an active incentive. Only farming\"},\"setTickSpacing(int24,int24)\":{\"notice\":\"Set the new tick spacing values. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\"},\"tickSpacing()\":{\"notice\":\"The current tick spacing\"},\"tickSpacingLimitOrders()\":{\"notice\":\"The current tick spacing for limit orders\"},\"tickTable(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickTree for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"},\"totalFeeGrowth0Token()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"totalFeeGrowth1Token()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/algebrav2/IAlgebraPool.sol\":\"IAlgebraPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/algebrav2/IAlgebraPool.sol\":{\"keccak256\":\"0x755cd326bb55a296788b31bbe28af7e60c7f109f80db1c9fc04535688166da4c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2446e2a6ed5c8728df7ee1b03a8c5344ec2d28e62640d10ec62b920e56e279d8\",\"dweb:/ipfs/QmUGjYtSFATTh4f2nzfwUthxNvafvkX6is2U8Pmh1SWQiM\"]},\"src/interfaces/external/algebrav2/pool/IAlgebraPoolActions.sol\":{\"keccak256\":\"0xf8e5d053036d17d1719f1599f11da5b9141d85ac819c4fd8ec3960b76cb8830e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2e84a86f035e84ff02daa9b2c41e0cc35429be7b114baa6f41572572676d30fa\",\"dweb:/ipfs/QmZcnQvCfExUCj7zbvxgqoAd24XYofq7udUESQrR6DZ1Q3\"]},\"src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol\":{\"keccak256\":\"0x3068b5e85207a209e841214738a2c79c5eebe1ba81ce5427f2d0598582fe7f32\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://961752a020e3e128bb49496dfac03ab6da8cad8675dc3947d7ed493a278bc9ed\",\"dweb:/ipfs/QmRu23SksgKD7G2TQsJBmhWJz1FJuuD78SAFGebYRPUvTQ\"]},\"src/interfaces/external/algebrav2/pool/IAlgebraPoolEvents.sol\":{\"keccak256\":\"0x38348849e3c1b18334b4897f21b67a500215f9da8e47ed04209767052c2a5b93\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://01d9f8a7d90521f7c27c9ce4907ce4626f1fd6e597f5912da80eb516c7c56f58\",\"dweb:/ipfs/QmbETzZdzpEowRAWsjupb1AdvwZYvdZoHsPpv6vHYem2nQ\"]},\"src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol\":{\"keccak256\":\"0x527bd2f402e3c6b01107e70bcb6d159937de74663a0d914aefee924672facc1d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bccbcf10e3726243f354853cfed495970731a292ff12be715fd75d8f726d48f\",\"dweb:/ipfs/QmQdh7AuAYt8uq72DmEHNgqHmz66AbkEdZXxevkgo13pdc\"]},\"src/interfaces/external/algebrav2/pool/IAlgebraPoolPermissionedActions.sol\":{\"keccak256\":\"0x0c309a0fa5aae5336b8fe6e5987bd1825918717da98eea395183ec4868159ae0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://43eed8d7a7158af94acdec23661242a0aab5879614684b18e8af1e1b1f83d723\",\"dweb:/ipfs/QmeW9eNqAvt22SLtipSNdoUkgfUw53G6e7iUA7XYwQv5qR\"]},\"src/interfaces/external/algebrav2/pool/IAlgebraPoolState.sol\":{\"keccak256\":\"0xcd53e01bcc120d16a15847ba0e805bc5018de1a8d9177ea34c0976db2df3d902\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://cf0f48fa035b6558c3b774ed42f1de13a2457fe76aa766c93eaafc3ecb6e7ae3\",\"dweb:/ipfs/QmWpdDMVpFKCE2rLx9PfdD7Npd8Kck7Hfzp1i93k6iqtr3\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24",
              "indexed": true
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "liquidityAmount",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Burn",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24",
              "indexed": true
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "amount0",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "amount1",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Collect",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "communityFeeNew",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CommunityFee",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "DataStorageFailure",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint16",
              "name": "fee",
              "type": "uint16",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Fee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "paid0",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "paid1",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Flash",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newIncentiveAddress",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Incentive",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint160",
              "name": "price",
              "type": "uint160",
              "indexed": false
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialize",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24",
              "indexed": true
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "liquidityAmount",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Mint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint160",
              "name": "price",
              "type": "uint160",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Swap",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "newTickSpacing",
              "type": "int24",
              "indexed": false
            },
            {
              "internalType": "int24",
              "name": "newTickSpacingLimitOrders",
              "type": "int24",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TickSpacing",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "activeIncentive",
          "outputs": [
            {
              "internalType": "address",
              "name": "incentiveAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "amount0Requested",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount1Requested",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collect",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "amount0",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount1",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "communityFeeLastTimestamp",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "communityVault",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "dataStorageOperator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "factory",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "flash"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getCommunityFeePending",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "communityFeePending0",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "communityFeePending1",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getInnerCumulatives",
          "outputs": [
            {
              "internalType": "uint160",
              "name": "innerSecondsSpentPerLiquidity",
              "type": "uint160"
            },
            {
              "internalType": "uint32",
              "name": "innerSecondsSpent",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getReserves",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "reserve0",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "reserve1",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "globalState",
          "outputs": [
            {
              "internalType": "uint160",
              "name": "price",
              "type": "uint160"
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "prevInitializedTick",
              "type": "int24"
            },
            {
              "internalType": "uint16",
              "name": "fee",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "timepointIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "communityFee",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "unlocked",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint160",
              "name": "price",
              "type": "uint160"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "limitOrders",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "amountToSell",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "soldAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "boughtAmount0Cumulative",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boughtAmount1Cumulative",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "liquidity",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "maxLiquidityPerTick",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "liquidityActual",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "positions",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "innerFeeGrowth0Token",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "innerFeeGrowth1Token",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "fees0",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "fees1",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "secondsPerLiquidityCumulative",
          "outputs": [
            {
              "internalType": "uint160",
              "name": "",
              "type": "uint160"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "communityFee",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCommunityFee"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newIncentiveAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setIncentive"
        },
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "newTickSpacing",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "newTickSpacingLimitOrders",
              "type": "int24"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setTickSpacing"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "zeroToOne",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "amountRequired",
              "type": "int256"
            },
            {
              "internalType": "uint160",
              "name": "limitSqrtPrice",
              "type": "uint160"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swap",
          "outputs": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "zeroToOne",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "amountRequired",
              "type": "int256"
            },
            {
              "internalType": "uint160",
              "name": "limitSqrtPrice",
              "type": "uint160"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapSupportingFeeOnInputTokens",
          "outputs": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tickSpacing",
          "outputs": [
            {
              "internalType": "int24",
              "name": "",
              "type": "int24"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tickSpacingLimitOrders",
          "outputs": [
            {
              "internalType": "int24",
              "name": "",
              "type": "int24"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "int16",
              "name": "wordPosition",
              "type": "int16"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tickTable",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ticks",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "liquidityTotal",
              "type": "uint128"
            },
            {
              "internalType": "int128",
              "name": "liquidityDelta",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "outerFeeGrowth0Token",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outerFeeGrowth1Token",
              "type": "uint256"
            },
            {
              "internalType": "int24",
              "name": "prevTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "nextTick",
              "type": "int24"
            },
            {
              "internalType": "uint160",
              "name": "outerSecondsPerLiquidity",
              "type": "uint160"
            },
            {
              "internalType": "uint32",
              "name": "outerSecondsSpent",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "hasLimitOrders",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token0",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token1",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalFeeGrowth0Token",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalFeeGrowth1Token",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "activeIncentive()": {
            "details": "if there is no active incentive at the moment, incentiveAddress would be equal to address(0)",
            "returns": {
              "incentiveAddress": "The address associated with the current active incentive"
            }
          },
          "burn(int24,int24,uint128)": {
            "details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
            "params": {
              "amount": "How much liquidity to burn",
              "bottomTick": "The lower tick of the position for which to burn liquidity",
              "topTick": "The upper tick of the position for which to burn liquidity"
            },
            "returns": {
              "amount0": "The amount of token0 sent to the recipient",
              "amount1": "The amount of token1 sent to the recipient"
            }
          },
          "collect(address,int24,int24,uint128,uint128)": {
            "details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
            "params": {
              "amount0Requested": "How much token0 should be withdrawn from the fees owed",
              "amount1Requested": "How much token1 should be withdrawn from the fees owed",
              "bottomTick": "The lower tick of the position for which to collect fees",
              "recipient": "The address which should receive the fees collected",
              "topTick": "The upper tick of the position for which to collect fees"
            },
            "returns": {
              "amount0": "The amount of fees collected in token0",
              "amount1": "The amount of fees collected in token1"
            }
          },
          "communityVault()": {
            "returns": {
              "_0": "The communityVault address"
            }
          },
          "dataStorageOperator()": {
            "returns": {
              "_0": "The operator address"
            }
          },
          "factory()": {
            "returns": {
              "_0": "The contract address"
            }
          },
          "flash(address,uint256,uint256,bytes)": {
            "details": "The caller of this method receives a callback in the form of IAlgebraFlashCallback#AlgebraFlashCallbackAll excess tokens paid in the callback are distributed to currently in-range liquidity providers as an additional fee. If there are no in-range liquidity providers, the fee will be transferred to the first active provider in the future",
            "params": {
              "amount0": "The amount of token0 to send",
              "amount1": "The amount of token1 to send",
              "data": "Any data to be passed through to the callback",
              "recipient": "The address which will receive the token0 and token1 amounts"
            }
          },
          "getCommunityFeePending()": {
            "details": "Will be sent COMMUNITY_FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp"
          },
          "getInnerCumulatives(int24,int24)": {
            "details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
            "params": {
              "bottomTick": "The lower tick of the range",
              "topTick": "The upper tick of the range"
            },
            "returns": {
              "innerSecondsSpent": "The snapshot of the number of seconds during which the price was in this range",
              "innerSecondsSpentPerLiquidity": "The snapshot of seconds per liquidity for the range"
            }
          },
          "getReserves()": {
            "details": "If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee. If the balance exceeds uint128, the excess will be sent to the communityVault."
          },
          "globalState()": {
            "returns": {
              "communityFee": "The community fee percentage of the swap fee in thousandths (1e-3)",
              "fee": "The last pool fee value in hundredths of a bip, i.e. 1e-6",
              "prevInitializedTick": "The previous initialized tick",
              "price": "The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value;",
              "tick": "The current tick of the pool, i.e. according to the last tick transition that was run; This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary;",
              "timepointIndex": "The index of the last written timepoint",
              "unlocked": "Whether the pool is currently locked to reentrancy"
            }
          },
          "initialize(uint160)": {
            "details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valueInitialization should be done in one transaction with pool creation to avoid front-running",
            "params": {
              "price": "the initial sqrt price of the pool as a Q64.96"
            }
          },
          "limitOrders(int24)": {
            "params": {
              "tick": "The tick to look up"
            },
            "returns": {
              "amountToSell": "The amount of tokens to sell. Has only relative meaning",
              "boughtAmount0Cumulative": "The accumulator of bought tokens0 per amountToSell. Has only relative meaning",
              "boughtAmount1Cumulative": "The accumulator of bought tokens1 per amountToSell. Has only relative meaning",
              "initialized": "Will be true if a limit order was created at least once on this tick",
              "soldAmount": "The amount of tokens already sold. Has only relative meaning"
            }
          },
          "liquidity()": {
            "details": "This value has no relationship to the total liquidity across all ticks. Returned value cannot exceed type(uint128).max"
          },
          "maxLiquidityPerTick()": {
            "details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
            "returns": {
              "_0": "The max amount of liquidity per tick"
            }
          },
          "mint(address,address,int24,int24,uint128,bytes)": {
            "details": "The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on bottomTick, topTick, the amount of liquidity, and the current price. If bottomTick == topTick position is treated as a limit order",
            "params": {
              "amount": "The desired amount of liquidity to mint",
              "bottomTick": "The lower tick of the position in which to add liquidity",
              "data": "Any data that should be passed through to the callback",
              "recipient": "The address for which the liquidity will be created",
              "sender": "The address which will receive potential surplus of paid tokens",
              "topTick": "The upper tick of the position in which to add liquidity"
            },
            "returns": {
              "amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
              "amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback",
              "liquidityActual": "The actual minted amount of liquidity"
            }
          },
          "positions(bytes32)": {
            "params": {
              "key": "The position's key is a hash of a preimage composed by the owner, bottomTick and topTick"
            },
            "returns": {
              "fees0": "The computed amount of token0 owed to the position as of the last mint/burn/poke",
              "fees1": "The computed amount of token1 owed to the position as of the last mint/burn/poke",
              "innerFeeGrowth0Token": "Fee growth of token0 inside the tick range as of the last mint/burn/poke",
              "innerFeeGrowth1Token": "Fee growth of token1 inside the tick range as of the last mint/burn/poke",
              "liquidity": "The amount of liquidity in the position"
            }
          },
          "setCommunityFee(uint8)": {
            "params": {
              "communityFee": "new community fee percent in thousandths (1e-3)"
            }
          },
          "setIncentive(address)": {
            "params": {
              "newIncentiveAddress": "The address associated with the incentive"
            }
          },
          "setTickSpacing(int24,int24)": {
            "params": {
              "newTickSpacing": "The new tick spacing value",
              "newTickSpacingLimitOrders": "The new tick spacing value for limit orders"
            }
          },
          "swap(address,bool,int256,uint160,bytes)": {
            "details": "The caller of this method receives a callback in the form of IAlgebraSwapCallback#AlgebraSwapCallback",
            "params": {
              "amountRequired": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
              "data": "Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData",
              "limitSqrtPrice": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
              "recipient": "The address to receive the output of the swap",
              "zeroToOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
            },
            "returns": {
              "amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
              "amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
            }
          },
          "swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)": {
            "details": "The caller of this method receives a callback in the form of IAlgebraSwapCallback#AlgebraSwapCallback",
            "params": {
              "amountRequired": "The amount of the swap, which implicitly configures the swap as exact input",
              "data": "Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData",
              "limitSqrtPrice": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
              "recipient": "The address to receive the output of the swap",
              "sender": "The address called this function (Comes from the Router)",
              "zeroToOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
            },
            "returns": {
              "amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
              "amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
            }
          },
          "tickSpacing()": {
            "details": "Ticks can only be used at multiples of this value e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ... This value is an int24 to avoid casting even though it is always positive.",
            "returns": {
              "_0": "The current tick spacing"
            }
          },
          "tickSpacingLimitOrders()": {
            "details": "Ticks can only be used for limit orders at multiples of this value This value is an int24 to avoid casting even though it is always positive.",
            "returns": {
              "_0": "The current tick spacing for limit orders"
            }
          },
          "ticks(int24)": {
            "params": {
              "tick": "The tick to look up"
            },
            "returns": {
              "hasLimitOrders": "Whether there are limit orders on this tick or not In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.",
              "liquidityDelta": "How much liquidity changes when the pool price crosses the tick",
              "liquidityTotal": "The total amount of position liquidity that uses the pool either as tick lower or tick upper",
              "nextTick": "The next tick in tick list",
              "outerFeeGrowth0Token": "The fee growth on the other side of the tick from the current tick in token0",
              "outerFeeGrowth1Token": "The fee growth on the other side of the tick from the current tick in token1",
              "outerSecondsPerLiquidity": "The seconds spent per liquidity on the other side of the tick from the current tick",
              "outerSecondsSpent": "The seconds spent on the other side of the tick from the current tick",
              "prevTick": "The previous tick in tick list"
            }
          },
          "token0()": {
            "returns": {
              "_0": "The token contract address"
            }
          },
          "token1()": {
            "returns": {
              "_0": "The token contract address"
            }
          },
          "totalFeeGrowth0Token()": {
            "details": "This value can overflow the uint256"
          },
          "totalFeeGrowth1Token()": {
            "details": "This value can overflow the uint256"
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "activeIncentive()": {
            "notice": "Returns the information about active incentive"
          },
          "burn(int24,int24,uint128)": {
            "notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
          },
          "collect(address,int24,int24,uint128,uint128)": {
            "notice": "Collects tokens owed to a position"
          },
          "communityFeeLastTimestamp()": {
            "notice": "The timestamp of the last sending of tokens to community vault"
          },
          "communityVault()": {
            "notice": "The contract to which community fees are transferred"
          },
          "dataStorageOperator()": {
            "notice": "The contract that stores all the timepoints and can perform actions with them"
          },
          "factory()": {
            "notice": "The contract that deployed the pool, which must adhere to the IAlgebraFactory interface"
          },
          "flash(address,uint256,uint256,bytes)": {
            "notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
          },
          "getCommunityFeePending()": {
            "notice": "The amounts of token0 and token1 that will be sent to the vault"
          },
          "getInnerCumulatives(int24,int24)": {
            "notice": "Returns a snapshot of seconds per liquidity and seconds inside a tick range"
          },
          "getReserves()": {
            "notice": "The tracked token0 and token1 reserves of pool"
          },
          "globalState()": {
            "notice": "The globalState structure in the pool stores many values but requires only one slot and is exposed as a single method to save gas when accessed externally."
          },
          "initialize(uint160)": {
            "notice": "Sets the initial price for the pool"
          },
          "limitOrders(int24)": {
            "notice": "Returns the summary information about a limit orders at tick"
          },
          "liquidity()": {
            "notice": "The currently in range liquidity available to the pool"
          },
          "maxLiquidityPerTick()": {
            "notice": "The maximum amount of position liquidity that can use any tick in the range"
          },
          "mint(address,address,int24,int24,uint128,bytes)": {
            "notice": "Adds liquidity for the given recipient/bottomTick/topTick position"
          },
          "positions(bytes32)": {
            "notice": "Returns the information about a position by the position's key"
          },
          "secondsPerLiquidityCumulative()": {
            "notice": "The accumulator of seconds per liquidity since the pool was first initialized"
          },
          "setCommunityFee(uint8)": {
            "notice": "Set the community's % share of the fees. Cannot exceed 25% (250). Only factory owner or POOLS_ADMINISTRATOR_ROLE role"
          },
          "setIncentive(address)": {
            "notice": "Sets an active incentive. Only farming"
          },
          "setTickSpacing(int24,int24)": {
            "notice": "Set the new tick spacing values. Only factory owner or POOLS_ADMINISTRATOR_ROLE role"
          },
          "swap(address,bool,int256,uint160,bytes)": {
            "notice": "Swap token0 for token1, or token1 for token0"
          },
          "swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)": {
            "notice": "Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)"
          },
          "tickSpacing()": {
            "notice": "The current tick spacing"
          },
          "tickSpacingLimitOrders()": {
            "notice": "The current tick spacing for limit orders"
          },
          "tickTable(int16)": {
            "notice": "Returns 256 packed tick initialized boolean values. See TickTree for more information"
          },
          "ticks(int24)": {
            "notice": "Look up information about a specific tick in the pool"
          },
          "token0()": {
            "notice": "The first of the two tokens of the pool, sorted by address"
          },
          "token1()": {
            "notice": "The second of the two tokens of the pool, sorted by address"
          },
          "totalFeeGrowth0Token()": {
            "notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
          },
          "totalFeeGrowth1Token()": {
            "notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/algebrav2/IAlgebraPool.sol": "IAlgebraPool"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/algebrav2/IAlgebraPool.sol": {
        "keccak256": "0x755cd326bb55a296788b31bbe28af7e60c7f109f80db1c9fc04535688166da4c",
        "urls": [
          "bzz-raw://2446e2a6ed5c8728df7ee1b03a8c5344ec2d28e62640d10ec62b920e56e279d8",
          "dweb:/ipfs/QmUGjYtSFATTh4f2nzfwUthxNvafvkX6is2U8Pmh1SWQiM"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolActions.sol": {
        "keccak256": "0xf8e5d053036d17d1719f1599f11da5b9141d85ac819c4fd8ec3960b76cb8830e",
        "urls": [
          "bzz-raw://2e84a86f035e84ff02daa9b2c41e0cc35429be7b114baa6f41572572676d30fa",
          "dweb:/ipfs/QmZcnQvCfExUCj7zbvxgqoAd24XYofq7udUESQrR6DZ1Q3"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol": {
        "keccak256": "0x3068b5e85207a209e841214738a2c79c5eebe1ba81ce5427f2d0598582fe7f32",
        "urls": [
          "bzz-raw://961752a020e3e128bb49496dfac03ab6da8cad8675dc3947d7ed493a278bc9ed",
          "dweb:/ipfs/QmRu23SksgKD7G2TQsJBmhWJz1FJuuD78SAFGebYRPUvTQ"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolEvents.sol": {
        "keccak256": "0x38348849e3c1b18334b4897f21b67a500215f9da8e47ed04209767052c2a5b93",
        "urls": [
          "bzz-raw://01d9f8a7d90521f7c27c9ce4907ce4626f1fd6e597f5912da80eb516c7c56f58",
          "dweb:/ipfs/QmbETzZdzpEowRAWsjupb1AdvwZYvdZoHsPpv6vHYem2nQ"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol": {
        "keccak256": "0x527bd2f402e3c6b01107e70bcb6d159937de74663a0d914aefee924672facc1d",
        "urls": [
          "bzz-raw://4bccbcf10e3726243f354853cfed495970731a292ff12be715fd75d8f726d48f",
          "dweb:/ipfs/QmQdh7AuAYt8uq72DmEHNgqHmz66AbkEdZXxevkgo13pdc"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolPermissionedActions.sol": {
        "keccak256": "0x0c309a0fa5aae5336b8fe6e5987bd1825918717da98eea395183ec4868159ae0",
        "urls": [
          "bzz-raw://43eed8d7a7158af94acdec23661242a0aab5879614684b18e8af1e1b1f83d723",
          "dweb:/ipfs/QmeW9eNqAvt22SLtipSNdoUkgfUw53G6e7iUA7XYwQv5qR"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolState.sol": {
        "keccak256": "0xcd53e01bcc120d16a15847ba0e805bc5018de1a8d9177ea34c0976db2df3d902",
        "urls": [
          "bzz-raw://cf0f48fa035b6558c3b774ed42f1de13a2457fe76aa766c93eaafc3ecb6e7ae3",
          "dweb:/ipfs/QmWpdDMVpFKCE2rLx9PfdD7Npd8Kck7Hfzp1i93k6iqtr3"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/algebrav2/IAlgebraPool.sol",
    "id": 54175,
    "exportedSymbols": {
      "IAlgebraPool": [
        54174
      ],
      "IAlgebraPoolActions": [
        55975
      ],
      "IAlgebraPoolDerivedState": [
        55991
      ],
      "IAlgebraPoolEvents": [
        56106
      ],
      "IAlgebraPoolImmutables": [
        56146
      ],
      "IAlgebraPoolPermissionedActions": [
        56170
      ],
      "IAlgebraPoolState": [
        56320
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:767:73",
    "nodes": [
      {
        "id": 54154,
        "nodeType": "PragmaDirective",
        "src": "45:23:73",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 54155,
        "nodeType": "ImportDirective",
        "src": "70:43:73",
        "nodes": [],
        "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol",
        "file": "./pool/IAlgebraPoolImmutables.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 54175,
        "sourceUnit": 56147,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 54156,
        "nodeType": "ImportDirective",
        "src": "114:38:73",
        "nodes": [],
        "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolState.sol",
        "file": "./pool/IAlgebraPoolState.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 54175,
        "sourceUnit": 56321,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 54157,
        "nodeType": "ImportDirective",
        "src": "153:45:73",
        "nodes": [],
        "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol",
        "file": "./pool/IAlgebraPoolDerivedState.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 54175,
        "sourceUnit": 55992,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 54158,
        "nodeType": "ImportDirective",
        "src": "199:40:73",
        "nodes": [],
        "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolActions.sol",
        "file": "./pool/IAlgebraPoolActions.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 54175,
        "sourceUnit": 55976,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 54159,
        "nodeType": "ImportDirective",
        "src": "240:52:73",
        "nodes": [],
        "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolPermissionedActions.sol",
        "file": "./pool/IAlgebraPoolPermissionedActions.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 54175,
        "sourceUnit": 56171,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 54160,
        "nodeType": "ImportDirective",
        "src": "293:39:73",
        "nodes": [],
        "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolEvents.sol",
        "file": "./pool/IAlgebraPoolEvents.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 54175,
        "sourceUnit": 56107,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 54174,
        "nodeType": "ContractDefinition",
        "src": "574:237:73",
        "nodes": [],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 54162,
              "name": "IAlgebraPoolImmutables",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 56146,
              "src": "604:22:73"
            },
            "id": 54163,
            "nodeType": "InheritanceSpecifier",
            "src": "604:22:73"
          },
          {
            "baseName": {
              "id": 54164,
              "name": "IAlgebraPoolState",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 56320,
              "src": "632:17:73"
            },
            "id": 54165,
            "nodeType": "InheritanceSpecifier",
            "src": "632:17:73"
          },
          {
            "baseName": {
              "id": 54166,
              "name": "IAlgebraPoolDerivedState",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 55991,
              "src": "655:24:73"
            },
            "id": 54167,
            "nodeType": "InheritanceSpecifier",
            "src": "655:24:73"
          },
          {
            "baseName": {
              "id": 54168,
              "name": "IAlgebraPoolActions",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 55975,
              "src": "685:19:73"
            },
            "id": 54169,
            "nodeType": "InheritanceSpecifier",
            "src": "685:19:73"
          },
          {
            "baseName": {
              "id": 54170,
              "name": "IAlgebraPoolPermissionedActions",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 56170,
              "src": "710:31:73"
            },
            "id": 54171,
            "nodeType": "InheritanceSpecifier",
            "src": "710:31:73"
          },
          {
            "baseName": {
              "id": 54172,
              "name": "IAlgebraPoolEvents",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 56106,
              "src": "747:18:73"
            },
            "id": 54173,
            "nodeType": "InheritanceSpecifier",
            "src": "747:18:73"
          }
        ],
        "canonicalName": "IAlgebraPool",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 54161,
          "nodeType": "StructuredDocumentation",
          "src": "334:240:73",
          "text": "@title The interface for a Algebra Pool\n @dev The pool interface is broken up into many smaller pieces.\n Credit to Uniswap Labs under GPL-2.0-or-later license:\n https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          54174,
          56106,
          56170,
          55975,
          55991,
          56320,
          56146
        ],
        "name": "IAlgebraPool",
        "nameLocation": "584:12:73",
        "scope": 54175,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 73
}