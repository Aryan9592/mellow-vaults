{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "multicall(bytes[])": "ac9650d8"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/pancakeswap/IMulticall.sol\":\"IMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/pancakeswap/IMulticall.sol\":{\"keccak256\":\"0x7a8cffd7c80f601c978b43f2914c4c4522709eef8e702f218ca75c9288b39038\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://00821a790a8ee29bf06a0902ad29fa9370b4f8bcb5667a7b4d122212bb1181be\",\"dweb:/ipfs/Qmf5B6rwpF5YKxUpJ5CCFeh7rcJzoN68mG1BBcdJAvKiip\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "multicall(bytes[])": {
            "details": "The `msg.value` should not be trusted for any method callable from multicall.",
            "params": {
              "data": "The encoded function data for each of the calls to make to this contract"
            },
            "returns": {
              "results": "The results from each of the calls passed in via data"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "multicall(bytes[])": {
            "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/pancakeswap/IMulticall.sol": "IMulticall"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/pancakeswap/IMulticall.sol": {
        "keccak256": "0x7a8cffd7c80f601c978b43f2914c4c4522709eef8e702f218ca75c9288b39038",
        "urls": [
          "bzz-raw://00821a790a8ee29bf06a0902ad29fa9370b4f8bcb5667a7b4d122212bb1181be",
          "dweb:/ipfs/Qmf5B6rwpF5YKxUpJ5CCFeh7rcJzoN68mG1BBcdJAvKiip"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/pancakeswap/IMulticall.sol",
    "id": 69054,
    "exportedSymbols": {
      "IMulticall": [
        69053
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:659:233",
    "nodes": [
      {
        "id": 69040,
        "nodeType": "PragmaDirective",
        "src": "45:23:233",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 69041,
        "nodeType": "PragmaDirective",
        "src": "69:19:233",
        "nodes": [],
        "literals": [
          "abicoder",
          "v2"
        ]
      },
      {
        "id": 69053,
        "nodeType": "ContractDefinition",
        "src": "199:504:233",
        "nodes": [
          {
            "id": 69052,
            "nodeType": "FunctionDefinition",
            "src": "609:92:233",
            "nodes": [],
            "documentation": {
              "id": 69043,
              "nodeType": "StructuredDocumentation",
              "src": "226:378:233",
              "text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
            },
            "functionSelector": "ac9650d8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "multicall",
            "nameLocation": "618:9:233",
            "parameters": {
              "id": 69047,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69046,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "645:4:233",
                  "nodeType": "VariableDeclaration",
                  "scope": 69052,
                  "src": "628:21:233",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 69044,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "628:5:233",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 69045,
                    "nodeType": "ArrayTypeName",
                    "src": "628:7:233",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "627:23:233"
            },
            "returnParameters": {
              "id": 69051,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69050,
                  "mutability": "mutable",
                  "name": "results",
                  "nameLocation": "692:7:233",
                  "nodeType": "VariableDeclaration",
                  "scope": 69052,
                  "src": "677:22:233",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 69048,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "677:5:233",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 69049,
                    "nodeType": "ArrayTypeName",
                    "src": "677:7:233",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "676:24:233"
            },
            "scope": 69053,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IMulticall",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 69042,
          "nodeType": "StructuredDocumentation",
          "src": "90:109:233",
          "text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          69053
        ],
        "name": "IMulticall",
        "nameLocation": "209:10:233",
        "scope": 69054,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 233
}