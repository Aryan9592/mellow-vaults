{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "externalCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farm",
      "outputs": [
        {
          "internalType": "contract IKyberSwapElasticLM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "vaultTokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint24",
          "name": "fee_",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLiquidityInFarm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isVaultToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyberHelper",
      "outputs": [
        {
          "internalType": "contract IKyberHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyberNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mellowOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IBasePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "pull",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullExistentials",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "push",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "reclaimTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "transferAndPush",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "minTokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateFarmInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultGovernance",
      "outputs": [
        {
          "internalType": "contract IVaultGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "externalCall(address,bytes4,bytes)": "2e2f4cc2",
    "farm()": "36e9332d",
    "initialize(uint256,address[],uint24)": "c9168892",
    "initialized()": "158ef93e",
    "isLiquidityInFarm()": "6fbed9e8",
    "isValidSignature(bytes32,bytes)": "1626ba7e",
    "isVaultToken(address)": "338c4ccb",
    "kyberHelper()": "05cf2a44",
    "kyberNft()": "a7788fd9",
    "mellowOracle()": "ee117355",
    "nft()": "47ccca02",
    "onERC721Received(address,address,uint256,bytes)": "150b7a02",
    "pid()": "f1068454",
    "pool()": "16f0115b",
    "positionManager()": "791b98bc",
    "pull(address,address[],uint256[],bytes)": "2062d754",
    "pullExistentials()": "d2c219b0",
    "push(address[],uint256[],bytes)": "566ca6b4",
    "reclaimTokens(address[])": "05e1c942",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferAndPush(address,address[],uint256[],bytes)": "27a35e5a",
    "tvl()": "e5328e06",
    "updateFarmInfo()": "6719d376",
    "vaultGovernance()": "fe255a5e",
    "vaultTokens()": "69722233"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"externalCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"contract IKyberSwapElasticLM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"vaultTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint24\",\"name\":\"fee_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityInFarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isVaultToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberHelper\",\"outputs\":[{\"internalType\":\"contract IKyberHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mellowOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IBasePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"pull\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullExistentials\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"push\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"reclaimTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"transferAndPush\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFarmInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultGovernance\",\"outputs\":[{\"internalType\":\"contract IVaultGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"externalCall(address,bytes4,bytes)\":{\"details\":\"Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. Since this method allows sending arbitrary transactions, the destinations of the calls are whitelisted by Protocol Governance.\",\"params\":{\"data\":\"Abi encoded parameters to `to::selector`\",\"selector\":\"Selector of the call\",\"to\":\"Address of the reward pool\"},\"returns\":{\"result\":\"Result of execution of the call\"}},\"initialize(uint256,address[],uint24)\":{\"details\":\"Can only be initialized by vault governance\",\"params\":{\"fee_\":\"Fee of the Kyber pool\",\"nft_\":\"NFT of the vault in the VaultRegistry\",\"vaultTokens_\":\"ERC20 tokens that will be managed by this Vault\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided hash MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls\",\"params\":{\"_hash\":\"Hash of the data to be signed\",\"_signature\":\"Signature byte array associated with _hash\"},\"returns\":{\"magicValue\":\"0x1626ba7e if valid, 0xffffffff otherwise\"}},\"isVaultToken(address)\":{\"params\":{\"token\":\"Address of the token to check\"},\"returns\":{\"_0\":\"`true` if this token is managed by Vault\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"pull(address,address[],uint256[],bytes)\":{\"details\":\"Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. When called by vault owner this method just pulls the tokens from the protocol to the `to` address When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault) When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left. Thus any vault other than zero vault cannot have any tokens on it Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\",\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"to\":\"Address to receive the tokens\",\"tokenAmounts\":\"Amounts of tokens to pull\",\"tokens\":\"Tokens to pull\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\"}},\"push(address[],uint256[],bytes)\":{\"details\":\"Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\",\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"tokenAmounts\":\"Amounts of tokens to push\",\"tokens\":\"Tokens to push\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually invested. It could be less than tokenAmounts (but not higher)\"}},\"reclaimTokens(address[])\":{\"details\":\"Cannot be called from zero vault.\",\"params\":{\"tokens\":\"Tokens to claim\"},\"returns\":{\"actualTokenAmounts\":\"Amounts reclaimed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferAndPush(address,address[],uint256[],bytes)\":{\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"tokenAmounts\":\"Amounts of tokens to push\",\"tokens\":\"Tokens to push\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually invested. It could be less than tokenAmounts (but not higher)\"}},\"tvl()\":{\"details\":\"Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\",\"returns\":{\"maxTokenAmounts\":\"Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\",\"minTokenAmounts\":\"Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"externalCall(address,bytes4,bytes)\":{\"notice\":\"Execute one of whitelisted calls.\"},\"initialize(uint256,address[],uint24)\":{\"notice\":\"Initialized a new contract.\"},\"initialized()\":{\"notice\":\"Checks if the vault is initialized\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Verifies offchain signature.\"},\"isVaultToken(address)\":{\"notice\":\"Checks if a token is vault token\"},\"kyberNft()\":{\"notice\":\"NFT of KyberSwap position manager\"},\"nft()\":{\"notice\":\"VaultRegistry NFT for this vault\"},\"pool()\":{\"notice\":\"Reference to KyberSwap pool.\"},\"positionManager()\":{\"notice\":\"Reference to IBasePositionManager of KyberSwap protocol.\"},\"pull(address,address[],uint256[],bytes)\":{\"notice\":\"Pulls tokens from the underlying protocol to the `to` address.\"},\"pullExistentials()\":{\"notice\":\"Existential amounts for each token\"},\"push(address[],uint256[],bytes)\":{\"notice\":\"Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from the contract balance and convert it to yUSDC.\"},\"reclaimTokens(address[])\":{\"notice\":\"Claim ERC20 tokens from vault balance to zero vault.\"},\"transferAndPush(address,address[],uint256[],bytes)\":{\"notice\":\"The same as `push` method above but transfers tokens to vault balance prior to calling push. After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\"},\"tvl()\":{\"notice\":\"Total value locked for this contract.\"},\"vaultGovernance()\":{\"notice\":\"Address of the Vault Governance for this contract.\"},\"vaultTokens()\":{\"notice\":\"ERC20 tokens under Vault management.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/vaults/IKyberVault.sol\":\"IKyberVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276\",\"dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"src/interfaces/IProtocolGovernance.sol\":{\"keccak256\":\"0x56c5ffe3c7a0414fbe269fb65d5181c41c0937f2d854b35ac11d11d143b4025e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3c06dabc1ab8741d81f8f941230bb19d66c4a32707a984e2e48952f6d86a281\",\"dweb:/ipfs/Qmb47fn3Wpe38NyJ5f4Gzbthd6HimRBNDVU82JWwsyR36b\"]},\"src/interfaces/IUnitPricesGovernance.sol\":{\"keccak256\":\"0x9fc3abc68aeebff7927937d8a3ebe876a26550c95da8941b7a123583c6812081\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a323e55a7dd91bbe02329783c6fa447b3dfec8aa963f10a7bcd4aee986d7ca87\",\"dweb:/ipfs/QmRShHKXzDsxUDbSzhRQTZmagzYeP2Q7KAx1t4SVomn6Gk\"]},\"src/interfaces/IVaultRegistry.sol\":{\"keccak256\":\"0xbbff9405f05886e694fbb4ed6a39a85f05cd05ee28a8b689c62be86230b9be55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b9c10d208a2533045f2d00fccfdec42f20ac4a608e850e663be05075eeb3b50\",\"dweb:/ipfs/QmRFPZZVBdYvTLEW5zLjHzivVKH4Ug9mJKom5yq18cVij1\"]},\"src/interfaces/external/erc/IERC1271.sol\":{\"keccak256\":\"0x9f1bfb74bae3843c5ca1fc666cd9d7cef51a97b713b03d9de1023c7e3ba22d36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9053f788f8a2e5ba615a9f3069de68526f6784f60925e6aac9639fa167ee2779\",\"dweb:/ipfs/Qmc5Te45rStvUcDbArTk7jrqNoWuYTJJP4XiBK8PSYDDDd\"]},\"src/interfaces/external/kyber/IFactory.sol\":{\"keccak256\":\"0x7020090b863672ca05473e78ac7d464324b3374ba275605a4d2c90d36c7b8e6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b240d005cb74c42057e10440017b69849471f3ce14ba274e4640516deb3a7c4\",\"dweb:/ipfs/QmQZBoL5BaP3fbfC2jLe7nQHu56Xd9i4YWVMdyLVpQ4374\"]},\"src/interfaces/external/kyber/IKyberSwapElasticLM.sol\":{\"keccak256\":\"0x7abd60f77b69e0bd36b6a3ddecb5bd4adb20b6fdcfc427798373daa30417438f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4563c45d12539ec2e7d26cadfdf5c325dcb881e2206a8f022ce9a94f6742b142\",\"dweb:/ipfs/QmaTvBJVZBG9cPYz2JLKZSsQKmeiSLh1XyA5x4pJj7Td8F\"]},\"src/interfaces/external/kyber/IKyberSwapElasticLMEvents.sol\":{\"keccak256\":\"0x9ba2fbd81de0b7e1c2c862a842e1ac80406cdba9ae815eabd8f46c90525a6bae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31ad77d95ec01875fbefe3cf95a6c66b0b6580e3834731f015b1bc29d427e411\",\"dweb:/ipfs/QmR9pnNr15km9HnKTG9mrhU59YyJmhH1ghWnca3rBzDhHH\"]},\"src/interfaces/external/kyber/IPool.sol\":{\"keccak256\":\"0x19b4d59be8b20f08c39dbaee99c8ae1a2d700a2248a380fde55b1e2b25da4c1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cbcb8e747bcb294d92de94be807b9cb1891f1c6e463eda975eba68f53d85ea8a\",\"dweb:/ipfs/QmcpWt6RmYTQYJgco5fgaYL8xS4rJB6eYCF9jrHDq3qSob\"]},\"src/interfaces/external/kyber/periphery/IBasePositionManager.sol\":{\"keccak256\":\"0x392214c5e76603f6090cbb0e97e4ff2c167e09ff066ef893e9d8ac3ae794c9a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bd3e1ca9eb26a518d9687fd89c755d3e4a3730c5b96d805596b29468bf2c61a6\",\"dweb:/ipfs/QmeQ1qvdnPAV93xEoF3VPVN8QiRPQnTj4tTVs6MBGQ7LBV\"]},\"src/interfaces/external/kyber/periphery/IERC721Permit.sol\":{\"keccak256\":\"0x68e8b2d986bab8a124bd54e6753ab78278c8c2b7009f5c00e0e3ef64c6901b88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b5e0377fa4de7f8bc667259cf2a231e76501afe1962df923b93d8f6514e3b8dd\",\"dweb:/ipfs/QmbP4rdhK8ni1fZaHJJ4ekiwJvygkUNE34TiEbBnBw7FoT\"]},\"src/interfaces/external/kyber/periphery/IRouterTokenHelper.sol\":{\"keccak256\":\"0x916f611c57de74870fb12c444245c771227b5b79e5464f0f9f9db9d238ea8915\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4d805513ac1a18e27c47b9d9a59d5b2add44b5c18d45b42d016f9f97d555d618\",\"dweb:/ipfs/QmXBEkVC1kMvVHvDrCNz8cb6hXB39dr8L7oYA9ag1tJd79\"]},\"src/interfaces/external/kyber/periphery/base_position_manager/IBasePositionManagerEvents.sol\":{\"keccak256\":\"0xc11a814ea53f5e0260356724483457e2031cc4b9f3452c8918f6077786f49e3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8dacbe617f9956a9357a952be497d6eff5d4e717523ea880d988c8ea22af3cd\",\"dweb:/ipfs/QmNhSRWuB2Zkf1NrL8PBrf7LbtKRcFdXZbJMH2QMz1Nm2K\"]},\"src/interfaces/external/kyber/pool/IPoolActions.sol\":{\"keccak256\":\"0xeb7eb2b63738d4976f29b18d97747be76f98c5293d22507572d3e90dd579fb21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54735eaeff174f6c11cb8e9bc7d67e3c8ad154df79c8342538a0752f90203212\",\"dweb:/ipfs/QmQn8u7KLDzzAGJmje83RVLBkgXwNrahQ8bVSjM2AhZpKN\"]},\"src/interfaces/external/kyber/pool/IPoolEvents.sol\":{\"keccak256\":\"0x4be3e91b65d0c2afe3c38ca699ee7e70b67aec1d25376c825059225c33ea6c62\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://512cdecac86a853f0406a8bc6b0d1340938840ab2b293c4d71d1bb1ad533726c\",\"dweb:/ipfs/QmX8ohu3gKecXBX5vEYm5LPdTcbTAe56ijxsmmyJJ1cnKi\"]},\"src/interfaces/external/kyber/pool/IPoolStorage.sol\":{\"keccak256\":\"0x5fd3c60f74570731b09e28a272ddddff0b0d48d249ae624761e66528bad3bcec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d72d29549a8c90dce2434147f344d81e64f5d83b1b3e4ef806aa1bcc7ba2af9\",\"dweb:/ipfs/QmcaddeVFRKoCzQDvdqQUmRuBY7pojrdaMBttDZcGsuxi5\"]},\"src/interfaces/oracles/IOracle.sol\":{\"keccak256\":\"0x2d89a1f771e68129d47ae26eccf76f969cd2877e9b7190687056f912c3524b53\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f378b9f29c18878e73e251ca97abeca819f0789834281ee1399db878f6baedf5\",\"dweb:/ipfs/QmSrFYZWmGdVkgACwwZEfbkPt3kQCSkr6czBi9HVtzNSJg\"]},\"src/interfaces/utils/IDefaultAccessControl.sol\":{\"keccak256\":\"0xf746069a0607df88bbe40abd9d0ce377eac023a06315072a902f0a1995514d60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cef1e775b3ef0bdfab1871c54b6a7ba056e2baaef6f12a5ad5041ed500700add\",\"dweb:/ipfs/QmRKQoRR5FzupKKJb8pTQHzBf3A9hWnk4JrPSQ31s7zLtu\"]},\"src/interfaces/utils/IKyberHelper.sol\":{\"keccak256\":\"0x83c70bfcf2f1549197faab053a697473cf66fcfed62e64500fcb20c594309cf6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5955c85a24f88105011c6882577066f60c944a68150aca9791a7b01637c8633\",\"dweb:/ipfs/QmXMsFbzbusXgHZvTwaRcCtjkBKoKDGze8kckQQbtkxpXp\"]},\"src/interfaces/vaults/IIntegrationVault.sol\":{\"keccak256\":\"0x63ce1a5b16b87b88693680d338279fdf1281f7a093ca8da6f915bb3cb9530c5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2deaa9cd44b8e508e21f79e59acbe80d2b20d30e3ab7b07131f5513424709d1d\",\"dweb:/ipfs/QmUcfqcUPhuTt41TsvybCY9RDiMUVgp3seGTvmFYSXtjMy\"]},\"src/interfaces/vaults/IKyberVault.sol\":{\"keccak256\":\"0x9dd77d810d2e022ccedfc512478e48952beccdd667e555a348484ee17eaf0947\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4fb7a5e1e497699ee6895ac126ea6ed70ec7f211a175ebe2a4bb3cfd5cc400aa\",\"dweb:/ipfs/QmQ1JbRpe5Nkzkr2UeiwCb1xWuxneVGD81ZNP8j5di2DvQ\"]},\"src/interfaces/vaults/IVault.sol\":{\"keccak256\":\"0x8f5a025c2b61e9840b4a67321610de985f4e478f5368cbcd9737c525cf582c43\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6d397f0ddaa34fa8248c7624f72f31f8c8b66ee30965f8bbc3f434e2f3696b1\",\"dweb:/ipfs/QmcTfSgQLGJFmpx6ozKYKNXQp6tPNgswg2m9ttSZyoDQiw\"]},\"src/interfaces/vaults/IVaultGovernance.sol\":{\"keccak256\":\"0xb0295982be8e1730fb111e034f1ab4db0b8013674408a4ab851d978856387813\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://120ed22cf68dd88aad37700e42cd775637184c636f0fde6b068a5ddb8bfce375\",\"dweb:/ipfs/QmfA9CVkP5MMkXsuDFj86o8pRMtLEjeidmwWe43Henaxwu\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "externalCall",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "result",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "farm",
          "outputs": [
            {
              "internalType": "contract IKyberSwapElasticLM",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nft_",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "vaultTokens_",
              "type": "address[]"
            },
            {
              "internalType": "uint24",
              "name": "fee_",
              "type": "uint24"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "initialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "isLiquidityInFarm",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "_signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidSignature",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "magicValue",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isVaultToken",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "kyberHelper",
          "outputs": [
            {
              "internalType": "contract IKyberHelper",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "kyberNft",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "mellowOracle",
          "outputs": [
            {
              "internalType": "contract IOracle",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nft",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onERC721Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pid",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pool",
          "outputs": [
            {
              "internalType": "contract IPool",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "positionManager",
          "outputs": [
            {
              "internalType": "contract IBasePositionManager",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pull",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pullExistentials",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "push",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimTokens",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAndPush",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tvl",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "minTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateFarmInfo"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultGovernance",
          "outputs": [
            {
              "internalType": "contract IVaultGovernance",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "externalCall(address,bytes4,bytes)": {
            "details": "Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. Since this method allows sending arbitrary transactions, the destinations of the calls are whitelisted by Protocol Governance.",
            "params": {
              "data": "Abi encoded parameters to `to::selector`",
              "selector": "Selector of the call",
              "to": "Address of the reward pool"
            },
            "returns": {
              "result": "Result of execution of the call"
            }
          },
          "initialize(uint256,address[],uint24)": {
            "details": "Can only be initialized by vault governance",
            "params": {
              "fee_": "Fee of the Kyber pool",
              "nft_": "NFT of the vault in the VaultRegistry",
              "vaultTokens_": "ERC20 tokens that will be managed by this Vault"
            }
          },
          "isValidSignature(bytes32,bytes)": {
            "details": "Should return whether the signature provided is valid for the provided hash MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls",
            "params": {
              "_hash": "Hash of the data to be signed",
              "_signature": "Signature byte array associated with _hash"
            },
            "returns": {
              "magicValue": "0x1626ba7e if valid, 0xffffffff otherwise"
            }
          },
          "isVaultToken(address)": {
            "params": {
              "token": "Address of the token to check"
            },
            "returns": {
              "_0": "`true` if this token is managed by Vault"
            }
          },
          "onERC721Received(address,address,uint256,bytes)": {
            "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
          },
          "pull(address,address[],uint256[],bytes)": {
            "details": "Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. When called by vault owner this method just pulls the tokens from the protocol to the `to` address When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault) When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left. Thus any vault other than zero vault cannot have any tokens on it Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.",
            "params": {
              "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
              "to": "Address to receive the tokens",
              "tokenAmounts": "Amounts of tokens to pull",
              "tokens": "Tokens to pull"
            },
            "returns": {
              "actualTokenAmounts": "The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)"
            }
          },
          "push(address[],uint256[],bytes)": {
            "details": "Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.",
            "params": {
              "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
              "tokenAmounts": "Amounts of tokens to push",
              "tokens": "Tokens to push"
            },
            "returns": {
              "actualTokenAmounts": "The amounts actually invested. It could be less than tokenAmounts (but not higher)"
            }
          },
          "reclaimTokens(address[])": {
            "details": "Cannot be called from zero vault.",
            "params": {
              "tokens": "Tokens to claim"
            },
            "returns": {
              "actualTokenAmounts": "Amounts reclaimed"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "transferAndPush(address,address[],uint256[],bytes)": {
            "params": {
              "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
              "tokenAmounts": "Amounts of tokens to push",
              "tokens": "Tokens to push"
            },
            "returns": {
              "actualTokenAmounts": "The amounts actually invested. It could be less than tokenAmounts (but not higher)"
            }
          },
          "tvl()": {
            "details": "Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not",
            "returns": {
              "maxTokenAmounts": "Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)",
              "minTokenAmounts": "Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "externalCall(address,bytes4,bytes)": {
            "notice": "Execute one of whitelisted calls."
          },
          "initialize(uint256,address[],uint24)": {
            "notice": "Initialized a new contract."
          },
          "initialized()": {
            "notice": "Checks if the vault is initialized"
          },
          "isValidSignature(bytes32,bytes)": {
            "notice": "Verifies offchain signature."
          },
          "isVaultToken(address)": {
            "notice": "Checks if a token is vault token"
          },
          "kyberNft()": {
            "notice": "NFT of KyberSwap position manager"
          },
          "nft()": {
            "notice": "VaultRegistry NFT for this vault"
          },
          "pool()": {
            "notice": "Reference to KyberSwap pool."
          },
          "positionManager()": {
            "notice": "Reference to IBasePositionManager of KyberSwap protocol."
          },
          "pull(address,address[],uint256[],bytes)": {
            "notice": "Pulls tokens from the underlying protocol to the `to` address."
          },
          "pullExistentials()": {
            "notice": "Existential amounts for each token"
          },
          "push(address[],uint256[],bytes)": {
            "notice": "Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from the contract balance and convert it to yUSDC."
          },
          "reclaimTokens(address[])": {
            "notice": "Claim ERC20 tokens from vault balance to zero vault."
          },
          "transferAndPush(address,address[],uint256[],bytes)": {
            "notice": "The same as `push` method above but transfers tokens to vault balance prior to calling push. After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full)."
          },
          "tvl()": {
            "notice": "Total value locked for this contract."
          },
          "vaultGovernance()": {
            "notice": "Address of the Vault Governance for this contract."
          },
          "vaultTokens()": {
            "notice": "ERC20 tokens under Vault management."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/vaults/IKyberVault.sol": "IKyberVault"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
        "urls": [
          "bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a",
          "dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "keccak256": "0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676",
        "urls": [
          "bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276",
          "dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [
          "bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
          "dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
        "urls": [
          "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
          "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
        "keccak256": "0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf",
        "urls": [
          "bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34",
          "dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [
          "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
          "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "src/interfaces/IProtocolGovernance.sol": {
        "keccak256": "0x56c5ffe3c7a0414fbe269fb65d5181c41c0937f2d854b35ac11d11d143b4025e",
        "urls": [
          "bzz-raw://c3c06dabc1ab8741d81f8f941230bb19d66c4a32707a984e2e48952f6d86a281",
          "dweb:/ipfs/Qmb47fn3Wpe38NyJ5f4Gzbthd6HimRBNDVU82JWwsyR36b"
        ],
        "license": "MIT"
      },
      "src/interfaces/IUnitPricesGovernance.sol": {
        "keccak256": "0x9fc3abc68aeebff7927937d8a3ebe876a26550c95da8941b7a123583c6812081",
        "urls": [
          "bzz-raw://a323e55a7dd91bbe02329783c6fa447b3dfec8aa963f10a7bcd4aee986d7ca87",
          "dweb:/ipfs/QmRShHKXzDsxUDbSzhRQTZmagzYeP2Q7KAx1t4SVomn6Gk"
        ],
        "license": "MIT"
      },
      "src/interfaces/IVaultRegistry.sol": {
        "keccak256": "0xbbff9405f05886e694fbb4ed6a39a85f05cd05ee28a8b689c62be86230b9be55",
        "urls": [
          "bzz-raw://1b9c10d208a2533045f2d00fccfdec42f20ac4a608e850e663be05075eeb3b50",
          "dweb:/ipfs/QmRFPZZVBdYvTLEW5zLjHzivVKH4Ug9mJKom5yq18cVij1"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/erc/IERC1271.sol": {
        "keccak256": "0x9f1bfb74bae3843c5ca1fc666cd9d7cef51a97b713b03d9de1023c7e3ba22d36",
        "urls": [
          "bzz-raw://9053f788f8a2e5ba615a9f3069de68526f6784f60925e6aac9639fa167ee2779",
          "dweb:/ipfs/Qmc5Te45rStvUcDbArTk7jrqNoWuYTJJP4XiBK8PSYDDDd"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/IFactory.sol": {
        "keccak256": "0x7020090b863672ca05473e78ac7d464324b3374ba275605a4d2c90d36c7b8e6a",
        "urls": [
          "bzz-raw://8b240d005cb74c42057e10440017b69849471f3ce14ba274e4640516deb3a7c4",
          "dweb:/ipfs/QmQZBoL5BaP3fbfC2jLe7nQHu56Xd9i4YWVMdyLVpQ4374"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/IKyberSwapElasticLM.sol": {
        "keccak256": "0x7abd60f77b69e0bd36b6a3ddecb5bd4adb20b6fdcfc427798373daa30417438f",
        "urls": [
          "bzz-raw://4563c45d12539ec2e7d26cadfdf5c325dcb881e2206a8f022ce9a94f6742b142",
          "dweb:/ipfs/QmaTvBJVZBG9cPYz2JLKZSsQKmeiSLh1XyA5x4pJj7Td8F"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/IKyberSwapElasticLMEvents.sol": {
        "keccak256": "0x9ba2fbd81de0b7e1c2c862a842e1ac80406cdba9ae815eabd8f46c90525a6bae",
        "urls": [
          "bzz-raw://31ad77d95ec01875fbefe3cf95a6c66b0b6580e3834731f015b1bc29d427e411",
          "dweb:/ipfs/QmR9pnNr15km9HnKTG9mrhU59YyJmhH1ghWnca3rBzDhHH"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/IPool.sol": {
        "keccak256": "0x19b4d59be8b20f08c39dbaee99c8ae1a2d700a2248a380fde55b1e2b25da4c1f",
        "urls": [
          "bzz-raw://cbcb8e747bcb294d92de94be807b9cb1891f1c6e463eda975eba68f53d85ea8a",
          "dweb:/ipfs/QmcpWt6RmYTQYJgco5fgaYL8xS4rJB6eYCF9jrHDq3qSob"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/periphery/IBasePositionManager.sol": {
        "keccak256": "0x392214c5e76603f6090cbb0e97e4ff2c167e09ff066ef893e9d8ac3ae794c9a2",
        "urls": [
          "bzz-raw://bd3e1ca9eb26a518d9687fd89c755d3e4a3730c5b96d805596b29468bf2c61a6",
          "dweb:/ipfs/QmeQ1qvdnPAV93xEoF3VPVN8QiRPQnTj4tTVs6MBGQ7LBV"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/kyber/periphery/IERC721Permit.sol": {
        "keccak256": "0x68e8b2d986bab8a124bd54e6753ab78278c8c2b7009f5c00e0e3ef64c6901b88",
        "urls": [
          "bzz-raw://b5e0377fa4de7f8bc667259cf2a231e76501afe1962df923b93d8f6514e3b8dd",
          "dweb:/ipfs/QmbP4rdhK8ni1fZaHJJ4ekiwJvygkUNE34TiEbBnBw7FoT"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/kyber/periphery/IRouterTokenHelper.sol": {
        "keccak256": "0x916f611c57de74870fb12c444245c771227b5b79e5464f0f9f9db9d238ea8915",
        "urls": [
          "bzz-raw://4d805513ac1a18e27c47b9d9a59d5b2add44b5c18d45b42d016f9f97d555d618",
          "dweb:/ipfs/QmXBEkVC1kMvVHvDrCNz8cb6hXB39dr8L7oYA9ag1tJd79"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/kyber/periphery/base_position_manager/IBasePositionManagerEvents.sol": {
        "keccak256": "0xc11a814ea53f5e0260356724483457e2031cc4b9f3452c8918f6077786f49e3b",
        "urls": [
          "bzz-raw://e8dacbe617f9956a9357a952be497d6eff5d4e717523ea880d988c8ea22af3cd",
          "dweb:/ipfs/QmNhSRWuB2Zkf1NrL8PBrf7LbtKRcFdXZbJMH2QMz1Nm2K"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/pool/IPoolActions.sol": {
        "keccak256": "0xeb7eb2b63738d4976f29b18d97747be76f98c5293d22507572d3e90dd579fb21",
        "urls": [
          "bzz-raw://54735eaeff174f6c11cb8e9bc7d67e3c8ad154df79c8342538a0752f90203212",
          "dweb:/ipfs/QmQn8u7KLDzzAGJmje83RVLBkgXwNrahQ8bVSjM2AhZpKN"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/pool/IPoolEvents.sol": {
        "keccak256": "0x4be3e91b65d0c2afe3c38ca699ee7e70b67aec1d25376c825059225c33ea6c62",
        "urls": [
          "bzz-raw://512cdecac86a853f0406a8bc6b0d1340938840ab2b293c4d71d1bb1ad533726c",
          "dweb:/ipfs/QmX8ohu3gKecXBX5vEYm5LPdTcbTAe56ijxsmmyJJ1cnKi"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/kyber/pool/IPoolStorage.sol": {
        "keccak256": "0x5fd3c60f74570731b09e28a272ddddff0b0d48d249ae624761e66528bad3bcec",
        "urls": [
          "bzz-raw://6d72d29549a8c90dce2434147f344d81e64f5d83b1b3e4ef806aa1bcc7ba2af9",
          "dweb:/ipfs/QmcaddeVFRKoCzQDvdqQUmRuBY7pojrdaMBttDZcGsuxi5"
        ],
        "license": "MIT"
      },
      "src/interfaces/oracles/IOracle.sol": {
        "keccak256": "0x2d89a1f771e68129d47ae26eccf76f969cd2877e9b7190687056f912c3524b53",
        "urls": [
          "bzz-raw://f378b9f29c18878e73e251ca97abeca819f0789834281ee1399db878f6baedf5",
          "dweb:/ipfs/QmSrFYZWmGdVkgACwwZEfbkPt3kQCSkr6czBi9HVtzNSJg"
        ],
        "license": "MIT"
      },
      "src/interfaces/utils/IDefaultAccessControl.sol": {
        "keccak256": "0xf746069a0607df88bbe40abd9d0ce377eac023a06315072a902f0a1995514d60",
        "urls": [
          "bzz-raw://cef1e775b3ef0bdfab1871c54b6a7ba056e2baaef6f12a5ad5041ed500700add",
          "dweb:/ipfs/QmRKQoRR5FzupKKJb8pTQHzBf3A9hWnk4JrPSQ31s7zLtu"
        ],
        "license": "MIT"
      },
      "src/interfaces/utils/IKyberHelper.sol": {
        "keccak256": "0x83c70bfcf2f1549197faab053a697473cf66fcfed62e64500fcb20c594309cf6",
        "urls": [
          "bzz-raw://b5955c85a24f88105011c6882577066f60c944a68150aca9791a7b01637c8633",
          "dweb:/ipfs/QmXMsFbzbusXgHZvTwaRcCtjkBKoKDGze8kckQQbtkxpXp"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IIntegrationVault.sol": {
        "keccak256": "0x63ce1a5b16b87b88693680d338279fdf1281f7a093ca8da6f915bb3cb9530c5e",
        "urls": [
          "bzz-raw://2deaa9cd44b8e508e21f79e59acbe80d2b20d30e3ab7b07131f5513424709d1d",
          "dweb:/ipfs/QmUcfqcUPhuTt41TsvybCY9RDiMUVgp3seGTvmFYSXtjMy"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IKyberVault.sol": {
        "keccak256": "0x9dd77d810d2e022ccedfc512478e48952beccdd667e555a348484ee17eaf0947",
        "urls": [
          "bzz-raw://4fb7a5e1e497699ee6895ac126ea6ed70ec7f211a175ebe2a4bb3cfd5cc400aa",
          "dweb:/ipfs/QmQ1JbRpe5Nkzkr2UeiwCb1xWuxneVGD81ZNP8j5di2DvQ"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/vaults/IVault.sol": {
        "keccak256": "0x8f5a025c2b61e9840b4a67321610de985f4e478f5368cbcd9737c525cf582c43",
        "urls": [
          "bzz-raw://a6d397f0ddaa34fa8248c7624f72f31f8c8b66ee30965f8bbc3f434e2f3696b1",
          "dweb:/ipfs/QmcTfSgQLGJFmpx6ozKYKNXQp6tPNgswg2m9ttSZyoDQiw"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IVaultGovernance.sol": {
        "keccak256": "0xb0295982be8e1730fb111e034f1ab4db0b8013674408a4ab851d978856387813",
        "urls": [
          "bzz-raw://120ed22cf68dd88aad37700e42cd775637184c636f0fde6b068a5ddb8bfce375",
          "dweb:/ipfs/QmfA9CVkP5MMkXsuDFj86o8pRMtLEjeidmwWe43Henaxwu"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/vaults/IKyberVault.sol",
    "id": 77851,
    "exportedSymbols": {
      "IAccessControl": [
        43366
      ],
      "IAccessControlEnumerable": [
        43391
      ],
      "IBasePositionManager": [
        67457
      ],
      "IBasePositionManagerEvents": [
        67677
      ],
      "IDefaultAccessControl": [
        75786
      ],
      "IERC1271": [
        64026
      ],
      "IERC165": [
        48073
      ],
      "IERC721": [
        46687
      ],
      "IERC721Metadata": [
        46763
      ],
      "IERC721Permit": [
        67505
      ],
      "IERC721Receiver": [
        46705
      ],
      "IIntegrationVault": [
        77767
      ],
      "IKyberHelper": [
        75886
      ],
      "IKyberSwapElasticLM": [
        67109
      ],
      "IKyberSwapElasticLMEvents": [
        67198
      ],
      "IKyberVault": [
        77850
      ],
      "IOracle": [
        75605
      ],
      "IPool": [
        67213
      ],
      "IPoolActions": [
        68494
      ],
      "IPoolEvents": [
        68579
      ],
      "IPoolStorage": [
        68709
      ],
      "IProtocolGovernance": [
        52868
      ],
      "IRouterTokenHelper": [
        67630
      ],
      "IUnitPricesGovernance": [
        52921
      ],
      "IVault": [
        78599
      ],
      "IVaultGovernance": [
        78668
      ],
      "IVaultRegistry": [
        53012
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:1601:345",
    "nodes": [
      {
        "id": 77769,
        "nodeType": "PragmaDirective",
        "src": "45:23:345",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 77770,
        "nodeType": "ImportDirective",
        "src": "70:66:345",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77851,
        "sourceUnit": 46706,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77771,
        "nodeType": "ImportDirective",
        "src": "137:33:345",
        "nodes": [],
        "absolutePath": "src/interfaces/vaults/IIntegrationVault.sol",
        "file": "./IIntegrationVault.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77851,
        "sourceUnit": 77768,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77772,
        "nodeType": "ImportDirective",
        "src": "171:62:345",
        "nodes": [],
        "absolutePath": "src/interfaces/external/kyber/periphery/IBasePositionManager.sol",
        "file": "../external/kyber/periphery/IBasePositionManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77851,
        "sourceUnit": 67458,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77773,
        "nodeType": "ImportDirective",
        "src": "234:37:345",
        "nodes": [],
        "absolutePath": "src/interfaces/external/kyber/IPool.sol",
        "file": "../external/kyber/IPool.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77851,
        "sourceUnit": 67214,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77774,
        "nodeType": "ImportDirective",
        "src": "273:32:345",
        "nodes": [],
        "absolutePath": "src/interfaces/oracles/IOracle.sol",
        "file": "../oracles/IOracle.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77851,
        "sourceUnit": 75606,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77775,
        "nodeType": "ImportDirective",
        "src": "306:35:345",
        "nodes": [],
        "absolutePath": "src/interfaces/utils/IKyberHelper.sol",
        "file": "../utils/IKyberHelper.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77851,
        "sourceUnit": 75887,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77776,
        "nodeType": "ImportDirective",
        "src": "342:51:345",
        "nodes": [],
        "absolutePath": "src/interfaces/external/kyber/IKyberSwapElasticLM.sol",
        "file": "../external/kyber/IKyberSwapElasticLM.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77851,
        "sourceUnit": 67110,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77850,
        "nodeType": "ContractDefinition",
        "src": "395:1250:345",
        "nodes": [
          {
            "id": 77787,
            "nodeType": "StructDefinition",
            "src": "461:104:345",
            "nodes": [],
            "canonicalName": "IKyberVault.Options",
            "members": [
              {
                "constant": false,
                "id": 77782,
                "mutability": "mutable",
                "name": "amount0Min",
                "nameLocation": "494:10:345",
                "nodeType": "VariableDeclaration",
                "scope": 77787,
                "src": "486:18:345",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 77781,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "486:7:345",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 77784,
                "mutability": "mutable",
                "name": "amount1Min",
                "nameLocation": "522:10:345",
                "nodeType": "VariableDeclaration",
                "scope": 77787,
                "src": "514:18:345",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 77783,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "514:7:345",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 77786,
                "mutability": "mutable",
                "name": "deadline",
                "nameLocation": "550:8:345",
                "nodeType": "VariableDeclaration",
                "scope": 77787,
                "src": "542:16:345",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 77785,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "542:7:345",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Options",
            "nameLocation": "468:7:345",
            "scope": 77850,
            "visibility": "public"
          },
          {
            "id": 77794,
            "nodeType": "FunctionDefinition",
            "src": "644:72:345",
            "nodes": [],
            "documentation": {
              "id": 77788,
              "nodeType": "StructuredDocumentation",
              "src": "571:68:345",
              "text": "@notice Reference to IBasePositionManager of KyberSwap protocol."
            },
            "functionSelector": "791b98bc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "positionManager",
            "nameLocation": "653:15:345",
            "parameters": {
              "id": 77789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "668:2:345"
            },
            "returnParameters": {
              "id": 77793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77792,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77794,
                  "src": "694:20:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IBasePositionManager_$67457",
                    "typeString": "contract IBasePositionManager"
                  },
                  "typeName": {
                    "id": 77791,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77790,
                      "name": "IBasePositionManager",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67457,
                      "src": "694:20:345"
                    },
                    "referencedDeclaration": 67457,
                    "src": "694:20:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBasePositionManager_$67457",
                      "typeString": "contract IBasePositionManager"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "693:22:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77801,
            "nodeType": "FunctionDefinition",
            "src": "767:46:345",
            "nodes": [],
            "documentation": {
              "id": 77795,
              "nodeType": "StructuredDocumentation",
              "src": "722:40:345",
              "text": "@notice Reference to KyberSwap pool."
            },
            "functionSelector": "16f0115b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pool",
            "nameLocation": "776:4:345",
            "parameters": {
              "id": 77796,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "780:2:345"
            },
            "returnParameters": {
              "id": 77800,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77799,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77801,
                  "src": "806:5:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPool_$67213",
                    "typeString": "contract IPool"
                  },
                  "typeName": {
                    "id": 77798,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77797,
                      "name": "IPool",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67213,
                      "src": "806:5:345"
                    },
                    "referencedDeclaration": 67213,
                    "src": "806:5:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPool_$67213",
                      "typeString": "contract IPool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "805:7:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77807,
            "nodeType": "FunctionDefinition",
            "src": "869:52:345",
            "nodes": [],
            "documentation": {
              "id": 77802,
              "nodeType": "StructuredDocumentation",
              "src": "819:45:345",
              "text": "@notice NFT of KyberSwap position manager"
            },
            "functionSelector": "a7788fd9",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "kyberNft",
            "nameLocation": "878:8:345",
            "parameters": {
              "id": 77803,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "886:2:345"
            },
            "returnParameters": {
              "id": 77806,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77805,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77807,
                  "src": "912:7:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77804,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "912:7:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "911:9:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77818,
            "nodeType": "FunctionDefinition",
            "src": "1204:87:345",
            "nodes": [],
            "documentation": {
              "id": 77808,
              "nodeType": "StructuredDocumentation",
              "src": "927:272:345",
              "text": "@notice Initialized a new contract.\n @dev Can only be initialized by vault governance\n @param nft_ NFT of the vault in the VaultRegistry\n @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n @param fee_ Fee of the Kyber pool"
            },
            "functionSelector": "c9168892",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "1213:10:345",
            "parameters": {
              "id": 77816,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77810,
                  "mutability": "mutable",
                  "name": "nft_",
                  "nameLocation": "1232:4:345",
                  "nodeType": "VariableDeclaration",
                  "scope": 77818,
                  "src": "1224:12:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77809,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1224:7:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77813,
                  "mutability": "mutable",
                  "name": "vaultTokens_",
                  "nameLocation": "1255:12:345",
                  "nodeType": "VariableDeclaration",
                  "scope": 77818,
                  "src": "1238:29:345",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 77811,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1238:7:345",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 77812,
                    "nodeType": "ArrayTypeName",
                    "src": "1238:9:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77815,
                  "mutability": "mutable",
                  "name": "fee_",
                  "nameLocation": "1276:4:345",
                  "nodeType": "VariableDeclaration",
                  "scope": 77818,
                  "src": "1269:11:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint24",
                    "typeString": "uint24"
                  },
                  "typeName": {
                    "id": 77814,
                    "name": "uint24",
                    "nodeType": "ElementaryTypeName",
                    "src": "1269:6:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint24",
                      "typeString": "uint24"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1223:58:345"
            },
            "returnParameters": {
              "id": 77817,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1290:0:345"
            },
            "scope": 77850,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77821,
            "nodeType": "FunctionDefinition",
            "src": "1297:35:345",
            "nodes": [],
            "functionSelector": "6719d376",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateFarmInfo",
            "nameLocation": "1306:14:345",
            "parameters": {
              "id": 77819,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1320:2:345"
            },
            "returnParameters": {
              "id": 77820,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1331:0:345"
            },
            "scope": 77850,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77827,
            "nodeType": "FunctionDefinition",
            "src": "1338:60:345",
            "nodes": [],
            "functionSelector": "36e9332d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "farm",
            "nameLocation": "1347:4:345",
            "parameters": {
              "id": 77822,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1351:2:345"
            },
            "returnParameters": {
              "id": 77826,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77825,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77827,
                  "src": "1377:19:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IKyberSwapElasticLM_$67109",
                    "typeString": "contract IKyberSwapElasticLM"
                  },
                  "typeName": {
                    "id": 77824,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77823,
                      "name": "IKyberSwapElasticLM",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67109,
                      "src": "1377:19:345"
                    },
                    "referencedDeclaration": 67109,
                    "src": "1377:19:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IKyberSwapElasticLM_$67109",
                      "typeString": "contract IKyberSwapElasticLM"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1376:21:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77833,
            "nodeType": "FunctionDefinition",
            "src": "1404:56:345",
            "nodes": [],
            "functionSelector": "ee117355",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mellowOracle",
            "nameLocation": "1413:12:345",
            "parameters": {
              "id": 77828,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1425:2:345"
            },
            "returnParameters": {
              "id": 77832,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77831,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77833,
                  "src": "1451:7:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IOracle_$75605",
                    "typeString": "contract IOracle"
                  },
                  "typeName": {
                    "id": 77830,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77829,
                      "name": "IOracle",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 75605,
                      "src": "1451:7:345"
                    },
                    "referencedDeclaration": 75605,
                    "src": "1451:7:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IOracle_$75605",
                      "typeString": "contract IOracle"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1450:9:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77838,
            "nodeType": "FunctionDefinition",
            "src": "1466:47:345",
            "nodes": [],
            "functionSelector": "f1068454",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pid",
            "nameLocation": "1475:3:345",
            "parameters": {
              "id": 77834,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1478:2:345"
            },
            "returnParameters": {
              "id": 77837,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77836,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77838,
                  "src": "1504:7:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77835,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1504:7:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1503:9:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77843,
            "nodeType": "FunctionDefinition",
            "src": "1519:58:345",
            "nodes": [],
            "functionSelector": "6fbed9e8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isLiquidityInFarm",
            "nameLocation": "1528:17:345",
            "parameters": {
              "id": 77839,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1545:2:345"
            },
            "returnParameters": {
              "id": 77842,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77841,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77843,
                  "src": "1571:4:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 77840,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1571:4:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1570:6:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77849,
            "nodeType": "FunctionDefinition",
            "src": "1583:60:345",
            "nodes": [],
            "functionSelector": "05cf2a44",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "kyberHelper",
            "nameLocation": "1592:11:345",
            "parameters": {
              "id": 77844,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1603:2:345"
            },
            "returnParameters": {
              "id": 77848,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77847,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77849,
                  "src": "1629:12:345",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IKyberHelper_$75886",
                    "typeString": "contract IKyberHelper"
                  },
                  "typeName": {
                    "id": 77846,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77845,
                      "name": "IKyberHelper",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 75886,
                      "src": "1629:12:345"
                    },
                    "referencedDeclaration": 75886,
                    "src": "1629:12:345",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IKyberHelper_$75886",
                      "typeString": "contract IKyberHelper"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1628:14:345"
            },
            "scope": 77850,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 77777,
              "name": "IERC721Receiver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46705,
              "src": "420:15:345"
            },
            "id": 77778,
            "nodeType": "InheritanceSpecifier",
            "src": "420:15:345"
          },
          {
            "baseName": {
              "id": 77779,
              "name": "IIntegrationVault",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 77767,
              "src": "437:17:345"
            },
            "id": 77780,
            "nodeType": "InheritanceSpecifier",
            "src": "437:17:345"
          }
        ],
        "canonicalName": "IKyberVault",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          77850,
          77767,
          64026,
          78599,
          48073,
          46705
        ],
        "name": "IKyberVault",
        "nameLocation": "405:11:345",
        "scope": 77851,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 345
}