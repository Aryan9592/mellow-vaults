{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "deltaQty0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaQty1",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "swapCallback(int256,int256,bytes)": "fa483e72"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"deltaQty0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaQty1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapCallback(int256,int256,bytes)\":{\"details\":\"This function's implementation must pay tokens owed to the pool for the swap. The caller of this method must be checked to be a Pool deployed by the canonical Factory. deltaQty0 and deltaQty1 can both be 0 if no tokens were swapped.\",\"params\":{\"data\":\"Data passed through by the caller via the IPool#swap call\",\"deltaQty0\":\"The token0 quantity that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send deltaQty0 of token0 to the pool.\",\"deltaQty1\":\"The token1 quantity that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send deltaQty1 of token1 to the pool.\"}}},\"title\":\"Callback for IPool#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after swap execution of IPool#swap.\"}},\"notice\":\"Any contract that calls IPool#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/kyber/callback/ISwapCallback.sol\":\"ISwapCallback\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/kyber/callback/ISwapCallback.sol\":{\"keccak256\":\"0xc53863390ecc20903af7b5ad920cf45720c68ae0c18a1ed4a0b8239d851c93de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3264ddf97ea2a6f569889b4446e539df13045c2348f315a3911360183635d0e1\",\"dweb:/ipfs/QmcMy15nsxvZZim72T81Bck17nNaNv6AV53sESMsvjboSo\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "deltaQty0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "deltaQty1",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapCallback"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "swapCallback(int256,int256,bytes)": {
            "details": "This function's implementation must pay tokens owed to the pool for the swap. The caller of this method must be checked to be a Pool deployed by the canonical Factory. deltaQty0 and deltaQty1 can both be 0 if no tokens were swapped.",
            "params": {
              "data": "Data passed through by the caller via the IPool#swap call",
              "deltaQty0": "The token0 quantity that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send deltaQty0 of token0 to the pool.",
              "deltaQty1": "The token1 quantity that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send deltaQty1 of token1 to the pool."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "swapCallback(int256,int256,bytes)": {
            "notice": "Called to `msg.sender` after swap execution of IPool#swap."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/kyber/callback/ISwapCallback.sol": "ISwapCallback"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/kyber/callback/ISwapCallback.sol": {
        "keccak256": "0xc53863390ecc20903af7b5ad920cf45720c68ae0c18a1ed4a0b8239d851c93de",
        "urls": [
          "bzz-raw://3264ddf97ea2a6f569889b4446e539df13045c2348f315a3911360183635d0e1",
          "dweb:/ipfs/QmcMy15nsxvZZim72T81Bck17nNaNv6AV53sESMsvjboSo"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/kyber/callback/ISwapCallback.sol",
    "id": 67228,
    "exportedSymbols": {
      "ISwapCallback": [
        67227
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1131:218",
    "nodes": [
      {
        "id": 67215,
        "nodeType": "PragmaDirective",
        "src": "32:23:218",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 67227,
        "nodeType": "ContractDefinition",
        "src": "169:993:218",
        "nodes": [
          {
            "id": 67226,
            "nodeType": "FunctionDefinition",
            "src": "1042:118:218",
            "nodes": [],
            "documentation": {
              "id": 67217,
              "nodeType": "StructuredDocumentation",
              "src": "199:838:218",
              "text": "@notice Called to `msg.sender` after swap execution of IPool#swap.\n @dev This function's implementation must pay tokens owed to the pool for the swap.\n The caller of this method must be checked to be a Pool deployed by the canonical Factory.\n deltaQty0 and deltaQty1 can both be 0 if no tokens were swapped.\n @param deltaQty0 The token0 quantity that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send deltaQty0 of token0 to the pool.\n @param deltaQty1 The token1 quantity that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send deltaQty1 of token1 to the pool.\n @param data Data passed through by the caller via the IPool#swap call"
            },
            "functionSelector": "fa483e72",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "swapCallback",
            "nameLocation": "1051:12:218",
            "parameters": {
              "id": 67224,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67219,
                  "mutability": "mutable",
                  "name": "deltaQty0",
                  "nameLocation": "1080:9:218",
                  "nodeType": "VariableDeclaration",
                  "scope": 67226,
                  "src": "1073:16:218",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 67218,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1073:6:218",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 67221,
                  "mutability": "mutable",
                  "name": "deltaQty1",
                  "nameLocation": "1106:9:218",
                  "nodeType": "VariableDeclaration",
                  "scope": 67226,
                  "src": "1099:16:218",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 67220,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1099:6:218",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 67223,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "1140:4:218",
                  "nodeType": "VariableDeclaration",
                  "scope": 67226,
                  "src": "1125:19:218",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 67222,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1125:5:218",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1063:87:218"
            },
            "returnParameters": {
              "id": 67225,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1159:0:218"
            },
            "scope": 67227,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ISwapCallback",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 67216,
          "nodeType": "StructuredDocumentation",
          "src": "57:112:218",
          "text": "@title Callback for IPool#swap\n @notice Any contract that calls IPool#swap must implement this interface"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          67227
        ],
        "name": "ISwapCallback",
        "nameLocation": "179:13:218",
        "scope": 67228,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 218
}