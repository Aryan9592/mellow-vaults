{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "AllowlistAddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "AllowlistAddressRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bptPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerBoundPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperBoundPercentage",
          "type": "uint256"
        }
      ],
      "name": "CircuitBreakerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startSwapFeePercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endSwapFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "GradualSwapFeeUpdateScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "startWeights",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "endWeights",
          "type": "uint256[]"
        }
      ],
      "name": "GradualWeightUpdateScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "joinExitEnabled",
          "type": "bool"
        }
      ],
      "name": "JoinExitEnabledSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bptAmount",
          "type": "uint256"
        }
      ],
      "name": "ManagementAumFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementAumFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "ManagementAumFeePercentageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mustAllowlistLPs",
          "type": "bool"
        }
      ],
      "name": "MustAllowlistLPsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapEnabled",
          "type": "bool"
        }
      ],
      "name": "SwapEnabledSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalizedWeight",
          "type": "uint256"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "addAllowedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenToAdd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenToAddNormalizedWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectAumManagementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getCircuitBreakerState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bptPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lowerBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lowerBptPriceBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperBptPriceBound",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGradualSwapFeeUpdateParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startSwapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endSwapFeePercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGradualWeightUpdateParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "startWeights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endWeights",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJoinExitEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getManagementAumFeeParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "aumFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollectionTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMustAllowlistLPs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNormalizedWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getScalingFactors",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isAddressOnAllowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolSwapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "onExitPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "dueProtocolFeeAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolSwapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "onJoinPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "dueProtocolFeeAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolSwapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "queryExit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bptIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolSwapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "queryJoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bptOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "removeAllowedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenToRemove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "bptPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "lowerBoundPercentages",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "upperBoundPercentages",
          "type": "uint256[]"
        }
      ],
      "name": "setCircuitBreakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "joinExitEnabled",
          "type": "bool"
        }
      ],
      "name": "setJoinExitEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "managementAumFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "setManagementAumFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "mustAllowlistLPs",
          "type": "bool"
        }
      ],
      "name": "setMustAllowlistLPs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "swapEnabled",
          "type": "bool"
        }
      ],
      "name": "setSwapEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startSwapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endSwapFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapFeeGradually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endWeights",
          "type": "uint256[]"
        }
      ],
      "name": "updateWeightsGradually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addAllowedAddress(address)": "81788e2b",
    "addToken(address,address,uint256,uint256,address)": "34a36df8",
    "collectAumManagementFees()": "73656f89",
    "getActualSupply()": "876f303b",
    "getCircuitBreakerState(address)": "ebf1b742",
    "getGradualSwapFeeUpdateParams()": "6a2efb2c",
    "getGradualWeightUpdateParams()": "7beed220",
    "getJoinExitEnabled()": "41e45a20",
    "getManagementAumFeeParams()": "6b47273b",
    "getMustAllowlistLPs()": "8d027466",
    "getNormalizedWeights()": "f89f27ed",
    "getPoolId()": "38fff2d0",
    "getScalingFactors()": "1dd746ea",
    "getSwapEnabled()": "47bc4d92",
    "getSwapFeePercentage()": "55c67628",
    "isAddressOnAllowlist(address)": "36eb097b",
    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": "74f3b009",
    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": "d5c096c4",
    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": "6028bfd4",
    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": "87ec6817",
    "removeAllowedAddress(address)": "3c9d93b8",
    "removeToken(address,uint256,address)": "97bb15c9",
    "setCircuitBreakers(address[],uint256[],uint256[],uint256[])": "f885a4bb",
    "setJoinExitEnabled(bool)": "de3d2b2d",
    "setManagementAumFeePercentage(uint256)": "2a9a0323",
    "setMustAllowlistLPs(bool)": "7b749c45",
    "setSwapEnabled(bool)": "e01af92c",
    "updateSwapFeeGradually(uint256,uint256,uint256,uint256)": "b62c1f06",
    "updateWeightsGradually(uint256,uint256,address[],uint256[])": "819c70f3"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AllowlistAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AllowlistAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerBoundPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperBoundPercentage\",\"type\":\"uint256\"}],\"name\":\"CircuitBreakerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startSwapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GradualSwapFeeUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"startWeights\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"endWeights\",\"type\":\"uint256[]\"}],\"name\":\"GradualWeightUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"joinExitEnabled\",\"type\":\"bool\"}],\"name\":\"JoinExitEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptAmount\",\"type\":\"uint256\"}],\"name\":\"ManagementAumFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementAumFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ManagementAumFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mustAllowlistLPs\",\"type\":\"bool\"}],\"name\":\"MustAllowlistLPsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalizedWeight\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"addAllowedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenToAdd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenToAddNormalizedWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAumManagementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCircuitBreakerState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBptPriceBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBptPriceBound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGradualSwapFeeUpdateParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGradualWeightUpdateParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"startWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endWeights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJoinExitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagementAumFeeParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aumFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectionTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMustAllowlistLPs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNormalizedWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScalingFactors\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isAddressOnAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onExitPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dueProtocolFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onJoinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dueProtocolFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"removeAllowedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenToRemove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bptPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lowerBoundPercentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"upperBoundPercentages\",\"type\":\"uint256[]\"}],\"name\":\"setCircuitBreakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"joinExitEnabled\",\"type\":\"bool\"}],\"name\":\"setJoinExitEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"managementAumFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setManagementAumFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mustAllowlistLPs\",\"type\":\"bool\"}],\"name\":\"setMustAllowlistLPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateSwapFeeGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endWeights\",\"type\":\"uint256[]\"}],\"name\":\"updateWeightsGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAllowedAddress(address)\":{\"details\":\"Will fail if the address is already allowlisted. Emits the AllowlistAddressAdded event. This is a permissioned function.\",\"params\":{\"member\":\"- The address to be added to the allowlist.\"}},\"addToken(address,address,uint256,uint256,address)\":{\"details\":\"By adding a token to the Pool's composition, the weights of all other tokens will be decreased. The new token will have no balance - it is up to the owner to provide some immediately after calling this function. Note however that regular join functions will not work while the new token has no balance: the only way to deposit an initial amount is by using an Asset Manager. Token addition is forbidden during a weight change, or if one is scheduled to happen in the future. The caller may additionally pass a non-zero `mintAmount` to have some BPT be minted for them, which might be useful in some scenarios to account for the fact that the Pool will have more tokens. Emits the TokenAdded event. This is a permissioned function. Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\",\"params\":{\"assetManager\":\"- The Asset Manager for the token.\",\"mintAmount\":\"- The amount of BPT to be minted as a result of adding `token` to the Pool.\",\"recipient\":\"- The address to receive the BPT minted by the Pool.\",\"tokenToAdd\":\"- The ERC20 token to be added to the Pool.\",\"tokenToAddNormalizedWeight\":\"- The normalized weight of `token` relative to the other tokens in the Pool.\"}},\"collectAumManagementFees()\":{\"details\":\"This can be called by anyone to collect accrued AUM fees - and will be called automatically whenever the supply changes (e.g., joins and exits, add and remove token), and before the fee percentage is changed by the manager, to prevent fees from being applied retroactively. Correct behavior depends on the current supply, which is potentially manipulable if the pool is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\",\"returns\":{\"_0\":\"The amount of BPT minted to the manager.\"}},\"getActualSupply()\":{\"details\":\"The Pool owes debt to the Protocol and the Pool's owner in the form of unminted BPT, which will be minted immediately before the next join or exit. We need to take these into account since, even if they don't yet exist, they will effectively be included in any Pool operation that involves BPT. In the vast majority of cases, this function should be used instead of `totalSupply()`. WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation via reentrancy. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference. To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant function before calling `getActualSupply`. That will make the transaction revert in an unsafe context. (See `whenNotInVaultContext` in `ManagedPoolSettings`).\"},\"getCircuitBreakerState(address)\":{\"details\":\"These are the reference values (BPT price and reference weight) passed in when the breaker was set, along with the percentage bounds. It also returns the current BPT price bounds, needed to check whether the circuit breaker should trip.\"},\"getGradualSwapFeeUpdateParams()\":{\"details\":\"The current swap fee can be retrieved via `getSwapFeePercentage()`.\",\"returns\":{\"endSwapFeePercentage\":\"- The final swap fee percentage, when the current timestamp >= endTime.\",\"endTime\":\"- The timestamp when the swap fee update will end.\",\"startSwapFeePercentage\":\"- The starting swap fee percentage (could be different from the current value).\",\"startTime\":\"- The timestamp when the swap fee update will begin.\"}},\"getGradualWeightUpdateParams()\":{\"details\":\"The current weights can be retrieved via `getNormalizedWeights()`.\",\"returns\":{\"endTime\":\"- The timestamp when the weight update will end.\",\"endWeights\":\"- The final weights, when the current timestamp >= endTime.\",\"startTime\":\"- The timestamp when the weight update will begin.\",\"startWeights\":\"- The starting weights, when the weight change was initiated.\"}},\"getPoolId()\":{\"details\":\"Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).\"},\"getScalingFactors()\":{\"details\":\"Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically not relevant for outside parties, but which might be useful for some types of Pools.\"},\"getSwapFeePercentage()\":{\"details\":\"Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a 10% swap fee.\"},\"isAddressOnAllowlist(address)\":{\"details\":\"This simply checks the list, regardless of whether the allowlist feature is enabled.\",\"params\":{\"member\":\"- The address to check against the allowlist.\"},\"returns\":{\"_0\":\"true if the given address is on the allowlist.\"}},\"onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"details\":\"Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`, as well as collect the reported amount in protocol fees, which the Pool should calculate based on `protocolSwapFeePercentage`. Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share. `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account to which the Vault will send the proceeds. `balances` contains the total token balances for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return. `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total balance. `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.) Contracts implementing this function should check that the caller is indeed the Vault before performing any state-changing operations, such as burning pool shares.\"},\"onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"details\":\"Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault. The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`. Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join. `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account designated to receive any benefits (typically pool shares). `balances` contains the total balances for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return. `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total balance. `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.) Contracts implementing this function should check that the caller is indeed the Vault before performing any state-changing operations, such as minting pool shares.\"},\"removeAllowedAddress(address)\":{\"details\":\"Will fail if the address was not previously allowlisted. Emits the AllowlistAddressRemoved event. This is a permissioned function.\",\"params\":{\"member\":\"- The address to be removed from the allowlist.\"}},\"removeToken(address,uint256,address)\":{\"details\":\"Tokens can only be removed if the Pool has more than 2 tokens, as it can never have fewer than 2 (not including BPT). Token removal is also forbidden during a weight change, or if one is scheduled to happen in the future. Emits the TokenRemoved event. This is a permissioned function. Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference. The caller may additionally pass a non-zero `burnAmount` to burn some of their BPT, which might be useful in some scenarios to account for the fact that the Pool now has fewer tokens. This is a permissioned function.\",\"params\":{\"burnAmount\":\"- The amount of BPT to be burned after removing `token` from the Pool.\",\"sender\":\"- The address to burn BPT from.\",\"tokenToRemove\":\"- The ERC20 token to be removed from the Pool.\"}},\"setCircuitBreakers(address[],uint256[],uint256[],uint256[])\":{\"details\":\"This is a permissioned function. The lower and upper bounds are percentages, corresponding to a relative change in the token's spot price: e.g., a lower bound of 0.8 means the breaker should prevent trades that result in the value of the token dropping 20% or more relative to the rest of the pool.\"},\"setJoinExitEnabled(bool)\":{\"details\":\"Emits the JoinExitEnabledSet event. This is a permissioned function.\",\"params\":{\"joinExitEnabled\":\"- The new value of the join/exit enabled flag.\"}},\"setManagementAumFeePercentage(uint256)\":{\"details\":\"Attempting to collect AUM fees in excess of the maximum permitted percentage will revert. To avoid retroactive fee increases, we force collection at the current fee percentage before processing the update. Emits the ManagementAumFeePercentageChanged event. This is a permissioned function. To prevent changing management fees retroactively, this triggers payment of protocol fees before applying the change. Correct behavior depends on the current supply, which is potentially manipulable if the pool is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\",\"params\":{\"managementAumFeePercentage\":\"- The new management AUM fee percentage.\"},\"returns\":{\"_0\":\"amount - The amount of BPT minted to the manager before the update, if any.\"}},\"setMustAllowlistLPs(bool)\":{\"details\":\"Note that any addresses added to the allowlist will be retained if the allowlist is toggled off and back on again, because this action does not affect the list of LP addresses. Emits the MustAllowlistLPsSet event. This is a permissioned function.\",\"params\":{\"mustAllowlistLPs\":\"- The new value of the mustAllowlistLPs flag.\"}},\"setSwapEnabled(bool)\":{\"details\":\"Emits the SwapEnabledSet event. This is a permissioned function.\",\"params\":{\"swapEnabled\":\"- The new value of the swap enabled flag.\"}},\"updateSwapFeeGradually(uint256,uint256,uint256,uint256)\":{\"details\":\"The swap fee will change from the given starting value (which may or may not be the current value) to the given ending fee percentage, over startTime to endTime. Note that calling this with a starting swap fee different from the current value will immediately change the current swap fee to `startSwapFeePercentage`, before commencing the gradual change at `startTime`. Emits the GradualSwapFeeUpdateScheduled event. This is a permissioned function.\",\"params\":{\"endSwapFeePercentage\":\"- The ending value for the swap fee change. If the current timestamp >= endTime, `getSwapFeePercentage()` will return this value.\",\"endTime\":\"- The timestamp when the swap fee change will end (must be >= startTime).\",\"startSwapFeePercentage\":\"- The starting value for the swap fee change.\",\"startTime\":\"- The timestamp when the swap fee change will begin.\"}},\"updateWeightsGradually(uint256,uint256,address[],uint256[])\":{\"details\":\"The weights will change from their current values to the given endWeights, over startTime to endTime. This is a permissioned function. Since, unlike with swap fee updates, we generally do not want to allow instantaneous weight changes, the weights always start from their current values. This also guarantees a smooth transition when updateWeightsGradually is called during an ongoing weight change.\",\"params\":{\"endTime\":\"- The timestamp when the weight change will end (can be >= startTime).\",\"endWeights\":\"- The target weights. If the current timestamp >= endTime, `getNormalizedWeights()` will return these values.\",\"startTime\":\"- The timestamp when the weight change will begin.\",\"tokens\":\"- The tokens associated with the target weights (must match the current pool tokens).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAllowedAddress(address)\":{\"notice\":\"Adds an address to the LP allowlist.\"},\"addToken(address,address,uint256,uint256,address)\":{\"notice\":\"Adds a token to the Pool's list of tradeable tokens. This is a permissioned function.\"},\"collectAumManagementFees()\":{\"notice\":\"Collect any accrued AUM fees and send them to the pool manager.\"},\"getActualSupply()\":{\"notice\":\"Returns the effective BPT supply.\"},\"getCircuitBreakerState(address)\":{\"notice\":\"Return the full circuit breaker state for the given token.\"},\"getGradualSwapFeeUpdateParams()\":{\"notice\":\"Returns the current gradual swap fee update parameters.\"},\"getGradualWeightUpdateParams()\":{\"notice\":\"Returns the current gradual weight change update parameters.\"},\"getJoinExitEnabled()\":{\"notice\":\"Returns whether joins and exits are enabled.\"},\"getManagementAumFeeParams()\":{\"notice\":\"Returns the management AUM fee percentage as an 18-decimal fixed point number and the timestamp of the last collection of AUM fees.\"},\"getMustAllowlistLPs()\":{\"notice\":\"Returns whether the allowlist for LPs is enabled.\"},\"getNormalizedWeights()\":{\"notice\":\"Returns all normalized weights, in the same order as the Pool's tokens.\"},\"getSwapEnabled()\":{\"notice\":\"Returns whether swaps are enabled.\"},\"isAddressOnAllowlist(address)\":{\"notice\":\"Check whether an LP address is on the allowlist.\"},\"removeAllowedAddress(address)\":{\"notice\":\"Removes an address from the LP allowlist.\"},\"removeToken(address,uint256,address)\":{\"notice\":\"Removes a token from the Pool's list of tradeable tokens.\"},\"setCircuitBreakers(address[],uint256[],uint256[],uint256[])\":{\"notice\":\"Set a circuit breaker for one or more tokens.\"},\"setJoinExitEnabled(bool)\":{\"notice\":\"Enable or disable joins and exits. Note that this does not affect Recovery Mode exits.\"},\"setManagementAumFeePercentage(uint256)\":{\"notice\":\"Setter for the yearly percentage AUM management fee, which is payable to the pool manager.\"},\"setMustAllowlistLPs(bool)\":{\"notice\":\"Enable or disable the LP allowlist.\"},\"setSwapEnabled(bool)\":{\"notice\":\"Enable or disable trading.\"},\"updateSwapFeeGradually(uint256,uint256,uint256,uint256)\":{\"notice\":\"Schedule a gradual swap fee update.\"},\"updateWeightsGradually(uint256,uint256,address[],uint256[])\":{\"notice\":\"Schedule a gradual weight change.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/balancer/pool-utils/IManagedPool.sol\":\"IManagedPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/balancer/pool-utils/IManagedPool.sol\":{\"keccak256\":\"0x09b700bb2a67ad9cc0e19455a7d55d4e2efeaaa380e19969dcc7acceb795fd4f\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7b013e3dee42088da1b696c5f652535c4ebe68c86dbefc11573ff180df44d7d9\",\"dweb:/ipfs/QmR2yymvt2ACn3qz69gY3sMoUCY9zEnsR4kBF1489cw2si\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1\",\"dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3\",\"dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5\",\"dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z\"]},\"src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6\",\"dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6\"]},\"src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f\",\"dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U\"]},\"src/interfaces/external/balancer/vault/IAsset.sol\":{\"keccak256\":\"0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4\",\"dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn\"]},\"src/interfaces/external/balancer/vault/IAuthorizer.sol\":{\"keccak256\":\"0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1\",\"dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34\"]},\"src/interfaces/external/balancer/vault/IBasePool.sol\":{\"keccak256\":\"0x2a655dcb1150402a7446dc41a9ff2f3cf1ae5caa6d2384bddee08aac1d417e77\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c506e6beb0542dcb9861f3d4b524f2ff716cdcf5513b2132c24f954ee22f25c9\",\"dweb:/ipfs/QmcJ1dLRHbLMGiYvS8TH1W6G61beZy8MmiSvzFw11UxLQv\"]},\"src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039\",\"dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC\"]},\"src/interfaces/external/balancer/vault/IPoolSwapStructs.sol\":{\"keccak256\":\"0x6bcc1ff0bbbe512e442e1f5a10c79e124a67fb2eae15c7ef2885679f30abfb06\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://cd2c36763fb58b288f317735ee23d464499c9c98056cca5c601ba0398c70a7b9\",\"dweb:/ipfs/QmUSgTJCuzNFrscqZZFWfLQsEvX6v2bqJ5piFQa4o8aiZy\"]},\"src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a\",\"dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK\"]},\"src/interfaces/external/balancer/vault/IVault.sol\":{\"keccak256\":\"0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d\",\"dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AllowlistAddressAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AllowlistAddressRemoved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "bptPrice",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "lowerBoundPercentage",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "upperBoundPercentage",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CircuitBreakerSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "startSwapFeePercentage",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "endSwapFeePercentage",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "GradualSwapFeeUpdateScheduled",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "startWeights",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "endWeights",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "GradualWeightUpdateScheduled",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "joinExitEnabled",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "JoinExitEnabledSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "bptAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ManagementAumFeeCollected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "managementAumFeePercentage",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ManagementAumFeePercentageChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "mustAllowlistLPs",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MustAllowlistLPsSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "swapEnabled",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SwapEnabledSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "normalizedWeight",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokenAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TokenRemoved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addAllowedAddress"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "tokenToAdd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenToAddNormalizedWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addToken"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectAumManagementFees",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getActualSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getCircuitBreakerState",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "bptPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referenceWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBptPriceBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBptPriceBound",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGradualSwapFeeUpdateParams",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startSwapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endSwapFeePercentage",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGradualWeightUpdateParams",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "startWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "endWeights",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getJoinExitEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getManagementAumFeeParams",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "aumFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCollectionTimestamp",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getMustAllowlistLPs",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getNormalizedWeights",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getPoolId",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getScalingFactors",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSwapEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSwapFeePercentage",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isAddressOnAllowlist",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolSwapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onExitPool",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "amountsOut",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "dueProtocolFeeAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolSwapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onJoinPool",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "amountsIn",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "dueProtocolFeeAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolSwapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "queryExit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "bptIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsOut",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolSwapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "queryJoin",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "bptOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsIn",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeAllowedAddress"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "tokenToRemove",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeToken"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "bptPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "lowerBoundPercentages",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "upperBoundPercentages",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCircuitBreakers"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "joinExitEnabled",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setJoinExitEnabled"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "managementAumFeePercentage",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setManagementAumFeePercentage",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "mustAllowlistLPs",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMustAllowlistLPs"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "swapEnabled",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setSwapEnabled"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startSwapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endSwapFeePercentage",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateSwapFeeGradually"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "endWeights",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateWeightsGradually"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addAllowedAddress(address)": {
            "details": "Will fail if the address is already allowlisted. Emits the AllowlistAddressAdded event. This is a permissioned function.",
            "params": {
              "member": "- The address to be added to the allowlist."
            }
          },
          "addToken(address,address,uint256,uint256,address)": {
            "details": "By adding a token to the Pool's composition, the weights of all other tokens will be decreased. The new token will have no balance - it is up to the owner to provide some immediately after calling this function. Note however that regular join functions will not work while the new token has no balance: the only way to deposit an initial amount is by using an Asset Manager. Token addition is forbidden during a weight change, or if one is scheduled to happen in the future. The caller may additionally pass a non-zero `mintAmount` to have some BPT be minted for them, which might be useful in some scenarios to account for the fact that the Pool will have more tokens. Emits the TokenAdded event. This is a permissioned function. Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.",
            "params": {
              "assetManager": "- The Asset Manager for the token.",
              "mintAmount": "- The amount of BPT to be minted as a result of adding `token` to the Pool.",
              "recipient": "- The address to receive the BPT minted by the Pool.",
              "tokenToAdd": "- The ERC20 token to be added to the Pool.",
              "tokenToAddNormalizedWeight": "- The normalized weight of `token` relative to the other tokens in the Pool."
            }
          },
          "collectAumManagementFees()": {
            "details": "This can be called by anyone to collect accrued AUM fees - and will be called automatically whenever the supply changes (e.g., joins and exits, add and remove token), and before the fee percentage is changed by the manager, to prevent fees from being applied retroactively. Correct behavior depends on the current supply, which is potentially manipulable if the pool is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.",
            "returns": {
              "_0": "The amount of BPT minted to the manager."
            }
          },
          "getActualSupply()": {
            "details": "The Pool owes debt to the Protocol and the Pool's owner in the form of unminted BPT, which will be minted immediately before the next join or exit. We need to take these into account since, even if they don't yet exist, they will effectively be included in any Pool operation that involves BPT. In the vast majority of cases, this function should be used instead of `totalSupply()`. WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation via reentrancy. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference. To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant function before calling `getActualSupply`. That will make the transaction revert in an unsafe context. (See `whenNotInVaultContext` in `ManagedPoolSettings`)."
          },
          "getCircuitBreakerState(address)": {
            "details": "These are the reference values (BPT price and reference weight) passed in when the breaker was set, along with the percentage bounds. It also returns the current BPT price bounds, needed to check whether the circuit breaker should trip."
          },
          "getGradualSwapFeeUpdateParams()": {
            "details": "The current swap fee can be retrieved via `getSwapFeePercentage()`.",
            "returns": {
              "endSwapFeePercentage": "- The final swap fee percentage, when the current timestamp >= endTime.",
              "endTime": "- The timestamp when the swap fee update will end.",
              "startSwapFeePercentage": "- The starting swap fee percentage (could be different from the current value).",
              "startTime": "- The timestamp when the swap fee update will begin."
            }
          },
          "getGradualWeightUpdateParams()": {
            "details": "The current weights can be retrieved via `getNormalizedWeights()`.",
            "returns": {
              "endTime": "- The timestamp when the weight update will end.",
              "endWeights": "- The final weights, when the current timestamp >= endTime.",
              "startTime": "- The timestamp when the weight update will begin.",
              "startWeights": "- The starting weights, when the weight change was initiated."
            }
          },
          "getPoolId()": {
            "details": "Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it)."
          },
          "getScalingFactors()": {
            "details": "Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically not relevant for outside parties, but which might be useful for some types of Pools."
          },
          "getSwapFeePercentage()": {
            "details": "Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a 10% swap fee."
          },
          "isAddressOnAllowlist(address)": {
            "details": "This simply checks the list, regardless of whether the allowlist feature is enabled.",
            "params": {
              "member": "- The address to check against the allowlist."
            },
            "returns": {
              "_0": "true if the given address is on the allowlist."
            }
          },
          "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
            "details": "Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`, as well as collect the reported amount in protocol fees, which the Pool should calculate based on `protocolSwapFeePercentage`. Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share. `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account to which the Vault will send the proceeds. `balances` contains the total token balances for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return. `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total balance. `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.) Contracts implementing this function should check that the caller is indeed the Vault before performing any state-changing operations, such as burning pool shares."
          },
          "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
            "details": "Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault. The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`. Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join. `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account designated to receive any benefits (typically pool shares). `balances` contains the total balances for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return. `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total balance. `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.) Contracts implementing this function should check that the caller is indeed the Vault before performing any state-changing operations, such as minting pool shares."
          },
          "removeAllowedAddress(address)": {
            "details": "Will fail if the address was not previously allowlisted. Emits the AllowlistAddressRemoved event. This is a permissioned function.",
            "params": {
              "member": "- The address to be removed from the allowlist."
            }
          },
          "removeToken(address,uint256,address)": {
            "details": "Tokens can only be removed if the Pool has more than 2 tokens, as it can never have fewer than 2 (not including BPT). Token removal is also forbidden during a weight change, or if one is scheduled to happen in the future. Emits the TokenRemoved event. This is a permissioned function. Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference. The caller may additionally pass a non-zero `burnAmount` to burn some of their BPT, which might be useful in some scenarios to account for the fact that the Pool now has fewer tokens. This is a permissioned function.",
            "params": {
              "burnAmount": "- The amount of BPT to be burned after removing `token` from the Pool.",
              "sender": "- The address to burn BPT from.",
              "tokenToRemove": "- The ERC20 token to be removed from the Pool."
            }
          },
          "setCircuitBreakers(address[],uint256[],uint256[],uint256[])": {
            "details": "This is a permissioned function. The lower and upper bounds are percentages, corresponding to a relative change in the token's spot price: e.g., a lower bound of 0.8 means the breaker should prevent trades that result in the value of the token dropping 20% or more relative to the rest of the pool."
          },
          "setJoinExitEnabled(bool)": {
            "details": "Emits the JoinExitEnabledSet event. This is a permissioned function.",
            "params": {
              "joinExitEnabled": "- The new value of the join/exit enabled flag."
            }
          },
          "setManagementAumFeePercentage(uint256)": {
            "details": "Attempting to collect AUM fees in excess of the maximum permitted percentage will revert. To avoid retroactive fee increases, we force collection at the current fee percentage before processing the update. Emits the ManagementAumFeePercentageChanged event. This is a permissioned function. To prevent changing management fees retroactively, this triggers payment of protocol fees before applying the change. Correct behavior depends on the current supply, which is potentially manipulable if the pool is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.",
            "params": {
              "managementAumFeePercentage": "- The new management AUM fee percentage."
            },
            "returns": {
              "_0": "amount - The amount of BPT minted to the manager before the update, if any."
            }
          },
          "setMustAllowlistLPs(bool)": {
            "details": "Note that any addresses added to the allowlist will be retained if the allowlist is toggled off and back on again, because this action does not affect the list of LP addresses. Emits the MustAllowlistLPsSet event. This is a permissioned function.",
            "params": {
              "mustAllowlistLPs": "- The new value of the mustAllowlistLPs flag."
            }
          },
          "setSwapEnabled(bool)": {
            "details": "Emits the SwapEnabledSet event. This is a permissioned function.",
            "params": {
              "swapEnabled": "- The new value of the swap enabled flag."
            }
          },
          "updateSwapFeeGradually(uint256,uint256,uint256,uint256)": {
            "details": "The swap fee will change from the given starting value (which may or may not be the current value) to the given ending fee percentage, over startTime to endTime. Note that calling this with a starting swap fee different from the current value will immediately change the current swap fee to `startSwapFeePercentage`, before commencing the gradual change at `startTime`. Emits the GradualSwapFeeUpdateScheduled event. This is a permissioned function.",
            "params": {
              "endSwapFeePercentage": "- The ending value for the swap fee change. If the current timestamp >= endTime, `getSwapFeePercentage()` will return this value.",
              "endTime": "- The timestamp when the swap fee change will end (must be >= startTime).",
              "startSwapFeePercentage": "- The starting value for the swap fee change.",
              "startTime": "- The timestamp when the swap fee change will begin."
            }
          },
          "updateWeightsGradually(uint256,uint256,address[],uint256[])": {
            "details": "The weights will change from their current values to the given endWeights, over startTime to endTime. This is a permissioned function. Since, unlike with swap fee updates, we generally do not want to allow instantaneous weight changes, the weights always start from their current values. This also guarantees a smooth transition when updateWeightsGradually is called during an ongoing weight change.",
            "params": {
              "endTime": "- The timestamp when the weight change will end (can be >= startTime).",
              "endWeights": "- The target weights. If the current timestamp >= endTime, `getNormalizedWeights()` will return these values.",
              "startTime": "- The timestamp when the weight change will begin.",
              "tokens": "- The tokens associated with the target weights (must match the current pool tokens)."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addAllowedAddress(address)": {
            "notice": "Adds an address to the LP allowlist."
          },
          "addToken(address,address,uint256,uint256,address)": {
            "notice": "Adds a token to the Pool's list of tradeable tokens. This is a permissioned function."
          },
          "collectAumManagementFees()": {
            "notice": "Collect any accrued AUM fees and send them to the pool manager."
          },
          "getActualSupply()": {
            "notice": "Returns the effective BPT supply."
          },
          "getCircuitBreakerState(address)": {
            "notice": "Return the full circuit breaker state for the given token."
          },
          "getGradualSwapFeeUpdateParams()": {
            "notice": "Returns the current gradual swap fee update parameters."
          },
          "getGradualWeightUpdateParams()": {
            "notice": "Returns the current gradual weight change update parameters."
          },
          "getJoinExitEnabled()": {
            "notice": "Returns whether joins and exits are enabled."
          },
          "getManagementAumFeeParams()": {
            "notice": "Returns the management AUM fee percentage as an 18-decimal fixed point number and the timestamp of the last collection of AUM fees."
          },
          "getMustAllowlistLPs()": {
            "notice": "Returns whether the allowlist for LPs is enabled."
          },
          "getNormalizedWeights()": {
            "notice": "Returns all normalized weights, in the same order as the Pool's tokens."
          },
          "getSwapEnabled()": {
            "notice": "Returns whether swaps are enabled."
          },
          "isAddressOnAllowlist(address)": {
            "notice": "Check whether an LP address is on the allowlist."
          },
          "removeAllowedAddress(address)": {
            "notice": "Removes an address from the LP allowlist."
          },
          "removeToken(address,uint256,address)": {
            "notice": "Removes a token from the Pool's list of tradeable tokens."
          },
          "setCircuitBreakers(address[],uint256[],uint256[],uint256[])": {
            "notice": "Set a circuit breaker for one or more tokens."
          },
          "setJoinExitEnabled(bool)": {
            "notice": "Enable or disable joins and exits. Note that this does not affect Recovery Mode exits."
          },
          "setManagementAumFeePercentage(uint256)": {
            "notice": "Setter for the yearly percentage AUM management fee, which is payable to the pool manager."
          },
          "setMustAllowlistLPs(bool)": {
            "notice": "Enable or disable the LP allowlist."
          },
          "setSwapEnabled(bool)": {
            "notice": "Enable or disable trading."
          },
          "updateSwapFeeGradually(uint256,uint256,uint256,uint256)": {
            "notice": "Schedule a gradual swap fee update."
          },
          "updateWeightsGradually(uint256,uint256,address[],uint256[])": {
            "notice": "Schedule a gradual weight change."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/balancer/pool-utils/IManagedPool.sol": "IManagedPool"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/balancer/pool-utils/IManagedPool.sol": {
        "keccak256": "0x09b700bb2a67ad9cc0e19455a7d55d4e2efeaaa380e19969dcc7acceb795fd4f",
        "urls": [
          "bzz-raw://7b013e3dee42088da1b696c5f652535c4ebe68c86dbefc11573ff180df44d7d9",
          "dweb:/ipfs/QmR2yymvt2ACn3qz69gY3sMoUCY9zEnsR4kBF1489cw2si"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol": {
        "keccak256": "0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842",
        "urls": [
          "bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1",
          "dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol": {
        "keccak256": "0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979",
        "urls": [
          "bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3",
          "dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol": {
        "keccak256": "0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c",
        "urls": [
          "bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5",
          "dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol": {
        "keccak256": "0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9",
        "urls": [
          "bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6",
          "dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol": {
        "keccak256": "0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835",
        "urls": [
          "bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f",
          "dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/balancer/vault/IAsset.sol": {
        "keccak256": "0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef",
        "urls": [
          "bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4",
          "dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IAuthorizer.sol": {
        "keccak256": "0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b",
        "urls": [
          "bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1",
          "dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IBasePool.sol": {
        "keccak256": "0x2a655dcb1150402a7446dc41a9ff2f3cf1ae5caa6d2384bddee08aac1d417e77",
        "urls": [
          "bzz-raw://c506e6beb0542dcb9861f3d4b524f2ff716cdcf5513b2132c24f954ee22f25c9",
          "dweb:/ipfs/QmcJ1dLRHbLMGiYvS8TH1W6G61beZy8MmiSvzFw11UxLQv"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol": {
        "keccak256": "0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43",
        "urls": [
          "bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039",
          "dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IPoolSwapStructs.sol": {
        "keccak256": "0x6bcc1ff0bbbe512e442e1f5a10c79e124a67fb2eae15c7ef2885679f30abfb06",
        "urls": [
          "bzz-raw://cd2c36763fb58b288f317735ee23d464499c9c98056cca5c601ba0398c70a7b9",
          "dweb:/ipfs/QmUSgTJCuzNFrscqZZFWfLQsEvX6v2bqJ5piFQa4o8aiZy"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol": {
        "keccak256": "0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a",
        "urls": [
          "bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a",
          "dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IVault.sol": {
        "keccak256": "0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb",
        "urls": [
          "bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d",
          "dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/balancer/pool-utils/IManagedPool.sol",
    "id": 58883,
    "exportedSymbols": {
      "IAsset": [
        61808
      ],
      "IAuthentication": [
        60077
      ],
      "IAuthorizer": [
        61823
      ],
      "IBasePool": [
        61947
      ],
      "IERC20": [
        60345
      ],
      "IFlashLoanRecipient": [
        62001
      ],
      "IManagedPool": [
        58882
      ],
      "IPoolSwapStructs": [
        62072
      ],
      "IProtocolFeesCollector": [
        62141
      ],
      "ISignaturesValidator": [
        60129
      ],
      "ITemporarilyPausable": [
        60148
      ],
      "IVault": [
        63277
      ],
      "IWETH": [
        60253
      ]
    },
    "nodeType": "SourceUnit",
    "src": "688:15981:135",
    "nodes": [
      {
        "id": 58598,
        "nodeType": "PragmaDirective",
        "src": "688:23:135",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 58599,
        "nodeType": "ImportDirective",
        "src": "713:51:135",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol",
        "file": "../solidity-utils/openzeppelin/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58883,
        "sourceUnit": 60346,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 58600,
        "nodeType": "ImportDirective",
        "src": "765:32:135",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/vault/IBasePool.sol",
        "file": "../vault/IBasePool.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58883,
        "sourceUnit": 61948,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 58882,
        "nodeType": "ContractDefinition",
        "src": "799:15869:135",
        "nodes": [
          {
            "id": 58612,
            "nodeType": "EventDefinition",
            "src": "841:172:135",
            "nodes": [],
            "anonymous": false,
            "name": "GradualSwapFeeUpdateScheduled",
            "nameLocation": "847:29:135",
            "parameters": {
              "id": 58611,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58604,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "894:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58612,
                  "src": "886:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58603,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "886:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58606,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "921:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58612,
                  "src": "913:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58605,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "913:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58608,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startSwapFeePercentage",
                  "nameLocation": "946:22:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58612,
                  "src": "938:30:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58607,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "938:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58610,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endSwapFeePercentage",
                  "nameLocation": "986:20:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58612,
                  "src": "978:28:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58609,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "978:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "876:136:135"
            }
          },
          {
            "id": 58624,
            "nodeType": "EventDefinition",
            "src": "1018:155:135",
            "nodes": [],
            "anonymous": false,
            "name": "GradualWeightUpdateScheduled",
            "nameLocation": "1024:28:135",
            "parameters": {
              "id": 58623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58614,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "1070:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58624,
                  "src": "1062:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58613,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1062:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58616,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "1097:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58624,
                  "src": "1089:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58615,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1089:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58619,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startWeights",
                  "nameLocation": "1124:12:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58624,
                  "src": "1114:22:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58617,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1114:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58618,
                    "nodeType": "ArrayTypeName",
                    "src": "1114:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58622,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endWeights",
                  "nameLocation": "1156:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58624,
                  "src": "1146:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58620,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1146:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58621,
                    "nodeType": "ArrayTypeName",
                    "src": "1146:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1052:120:135"
            }
          },
          {
            "id": 58628,
            "nodeType": "EventDefinition",
            "src": "1178:39:135",
            "nodes": [],
            "anonymous": false,
            "name": "SwapEnabledSet",
            "nameLocation": "1184:14:135",
            "parameters": {
              "id": 58627,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58626,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "swapEnabled",
                  "nameLocation": "1204:11:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58628,
                  "src": "1199:16:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58625,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1199:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1198:18:135"
            }
          },
          {
            "id": 58632,
            "nodeType": "EventDefinition",
            "src": "1222:47:135",
            "nodes": [],
            "anonymous": false,
            "name": "JoinExitEnabledSet",
            "nameLocation": "1228:18:135",
            "parameters": {
              "id": 58631,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58630,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "joinExitEnabled",
                  "nameLocation": "1252:15:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58632,
                  "src": "1247:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58629,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1247:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1246:22:135"
            }
          },
          {
            "id": 58636,
            "nodeType": "EventDefinition",
            "src": "1274:49:135",
            "nodes": [],
            "anonymous": false,
            "name": "MustAllowlistLPsSet",
            "nameLocation": "1280:19:135",
            "parameters": {
              "id": 58635,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58634,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "mustAllowlistLPs",
                  "nameLocation": "1305:16:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58636,
                  "src": "1300:21:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58633,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1300:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1299:23:135"
            }
          },
          {
            "id": 58640,
            "nodeType": "EventDefinition",
            "src": "1328:52:135",
            "nodes": [],
            "anonymous": false,
            "name": "AllowlistAddressAdded",
            "nameLocation": "1334:21:135",
            "parameters": {
              "id": 58639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58638,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "1372:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58640,
                  "src": "1356:22:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58637,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1356:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1355:24:135"
            }
          },
          {
            "id": 58644,
            "nodeType": "EventDefinition",
            "src": "1385:54:135",
            "nodes": [],
            "anonymous": false,
            "name": "AllowlistAddressRemoved",
            "nameLocation": "1391:23:135",
            "parameters": {
              "id": 58643,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58642,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "1431:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58644,
                  "src": "1415:22:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58641,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1415:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1414:24:135"
            }
          },
          {
            "id": 58648,
            "nodeType": "EventDefinition",
            "src": "1444:76:135",
            "nodes": [],
            "anonymous": false,
            "name": "ManagementAumFeePercentageChanged",
            "nameLocation": "1450:33:135",
            "parameters": {
              "id": 58647,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58646,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "managementAumFeePercentage",
                  "nameLocation": "1492:26:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58648,
                  "src": "1484:34:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58645,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1484:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1483:36:135"
            }
          },
          {
            "id": 58652,
            "nodeType": "EventDefinition",
            "src": "1525:51:135",
            "nodes": [],
            "anonymous": false,
            "name": "ManagementAumFeeCollected",
            "nameLocation": "1531:25:135",
            "parameters": {
              "id": 58651,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58650,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "bptAmount",
                  "nameLocation": "1565:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58652,
                  "src": "1557:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58649,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1557:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1556:19:135"
            }
          },
          {
            "id": 58663,
            "nodeType": "EventDefinition",
            "src": "1581:162:135",
            "nodes": [],
            "anonymous": false,
            "name": "CircuitBreakerSet",
            "nameLocation": "1587:17:135",
            "parameters": {
              "id": 58662,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58655,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "1629:5:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58663,
                  "src": "1614:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$60345",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 58654,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58653,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60345,
                      "src": "1614:6:135"
                    },
                    "referencedDeclaration": 60345,
                    "src": "1614:6:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$60345",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58657,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "bptPrice",
                  "nameLocation": "1652:8:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58663,
                  "src": "1644:16:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58656,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1644:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58659,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lowerBoundPercentage",
                  "nameLocation": "1678:20:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58663,
                  "src": "1670:28:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58658,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1670:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58661,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "upperBoundPercentage",
                  "nameLocation": "1716:20:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58663,
                  "src": "1708:28:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58660,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1708:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1604:138:135"
            }
          },
          {
            "id": 58670,
            "nodeType": "EventDefinition",
            "src": "1748:65:135",
            "nodes": [],
            "anonymous": false,
            "name": "TokenAdded",
            "nameLocation": "1754:10:135",
            "parameters": {
              "id": 58669,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58666,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "1780:5:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58670,
                  "src": "1765:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$60345",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 58665,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58664,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60345,
                      "src": "1765:6:135"
                    },
                    "referencedDeclaration": 60345,
                    "src": "1765:6:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$60345",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58668,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "normalizedWeight",
                  "nameLocation": "1795:16:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58670,
                  "src": "1787:24:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58667,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1787:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1764:48:135"
            }
          },
          {
            "id": 58675,
            "nodeType": "EventDefinition",
            "src": "1818:41:135",
            "nodes": [],
            "anonymous": false,
            "name": "TokenRemoved",
            "nameLocation": "1824:12:135",
            "parameters": {
              "id": 58674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58673,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "1852:5:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58675,
                  "src": "1837:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$60345",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 58672,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58671,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60345,
                      "src": "1837:6:135"
                    },
                    "referencedDeclaration": 60345,
                    "src": "1837:6:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$60345",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1836:22:135"
            }
          },
          {
            "id": 58681,
            "nodeType": "FunctionDefinition",
            "src": "2897:59:135",
            "nodes": [],
            "documentation": {
              "id": 58676,
              "nodeType": "StructuredDocumentation",
              "src": "1865:1027:135",
              "text": " @notice Returns the effective BPT supply.\n @dev The Pool owes debt to the Protocol and the Pool's owner in the form of unminted BPT, which will be minted\n immediately before the next join or exit. We need to take these into account since, even if they don't yet exist,\n they will effectively be included in any Pool operation that involves BPT.\n In the vast majority of cases, this function should be used instead of `totalSupply()`.\n WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation\n via reentrancy. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\n To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant\n function before calling `getActualSupply`. That will make the transaction revert in an unsafe context.\n (See `whenNotInVaultContext` in `ManagedPoolSettings`)."
            },
            "functionSelector": "876f303b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getActualSupply",
            "nameLocation": "2906:15:135",
            "parameters": {
              "id": 58677,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2921:2:135"
            },
            "returnParameters": {
              "id": 58680,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58679,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58681,
                  "src": "2947:7:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58678,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2947:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2946:9:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58693,
            "nodeType": "FunctionDefinition",
            "src": "3996:177:135",
            "nodes": [],
            "documentation": {
              "id": 58682,
              "nodeType": "StructuredDocumentation",
              "src": "2990:1001:135",
              "text": " @notice Schedule a gradual swap fee update.\n @dev The swap fee will change from the given starting value (which may or may not be the current\n value) to the given ending fee percentage, over startTime to endTime.\n Note that calling this with a starting swap fee different from the current value will immediately change the\n current swap fee to `startSwapFeePercentage`, before commencing the gradual change at `startTime`.\n Emits the GradualSwapFeeUpdateScheduled event.\n This is a permissioned function.\n @param startTime - The timestamp when the swap fee change will begin.\n @param endTime - The timestamp when the swap fee change will end (must be >= startTime).\n @param startSwapFeePercentage - The starting value for the swap fee change.\n @param endSwapFeePercentage - The ending value for the swap fee change. If the current timestamp >= endTime,\n `getSwapFeePercentage()` will return this value."
            },
            "functionSelector": "b62c1f06",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateSwapFeeGradually",
            "nameLocation": "4005:22:135",
            "parameters": {
              "id": 58691,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58684,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "4045:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58693,
                  "src": "4037:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58683,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4037:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58686,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "4072:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58693,
                  "src": "4064:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58685,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4064:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58688,
                  "mutability": "mutable",
                  "name": "startSwapFeePercentage",
                  "nameLocation": "4097:22:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58693,
                  "src": "4089:30:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58687,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4089:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58690,
                  "mutability": "mutable",
                  "name": "endSwapFeePercentage",
                  "nameLocation": "4137:20:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58693,
                  "src": "4129:28:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58689,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4129:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4027:136:135"
            },
            "returnParameters": {
              "id": 58692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4172:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58705,
            "nodeType": "FunctionDefinition",
            "src": "4724:186:135",
            "nodes": [],
            "documentation": {
              "id": 58694,
              "nodeType": "StructuredDocumentation",
              "src": "4179:540:135",
              "text": " @notice Returns the current gradual swap fee update parameters.\n @dev The current swap fee can be retrieved via `getSwapFeePercentage()`.\n @return startTime - The timestamp when the swap fee update will begin.\n @return endTime - The timestamp when the swap fee update will end.\n @return startSwapFeePercentage - The starting swap fee percentage (could be different from the current value).\n @return endSwapFeePercentage - The final swap fee percentage, when the current timestamp >= endTime."
            },
            "functionSelector": "6a2efb2c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGradualSwapFeeUpdateParams",
            "nameLocation": "4733:29:135",
            "parameters": {
              "id": 58695,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4762:2:135"
            },
            "returnParameters": {
              "id": 58704,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58697,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "4820:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58705,
                  "src": "4812:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58696,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4812:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58699,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "4839:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58705,
                  "src": "4831:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58698,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4831:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58701,
                  "mutability": "mutable",
                  "name": "startSwapFeePercentage",
                  "nameLocation": "4856:22:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58705,
                  "src": "4848:30:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58700,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4848:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58703,
                  "mutability": "mutable",
                  "name": "endSwapFeePercentage",
                  "nameLocation": "4888:20:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58705,
                  "src": "4880:28:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58702,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4880:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4811:98:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58720,
            "nodeType": "FunctionDefinition",
            "src": "5867:168:135",
            "nodes": [],
            "documentation": {
              "id": 58706,
              "nodeType": "StructuredDocumentation",
              "src": "4938:924:135",
              "text": " @notice Schedule a gradual weight change.\n @dev The weights will change from their current values to the given endWeights, over startTime to endTime.\n This is a permissioned function.\n Since, unlike with swap fee updates, we generally do not want to allow instantaneous weight changes,\n the weights always start from their current values. This also guarantees a smooth transition when\n updateWeightsGradually is called during an ongoing weight change.\n @param startTime - The timestamp when the weight change will begin.\n @param endTime - The timestamp when the weight change will end (can be >= startTime).\n @param tokens - The tokens associated with the target weights (must match the current pool tokens).\n @param endWeights - The target weights. If the current timestamp >= endTime, `getNormalizedWeights()`\n will return these values."
            },
            "functionSelector": "819c70f3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateWeightsGradually",
            "nameLocation": "5876:22:135",
            "parameters": {
              "id": 58718,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58708,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "5916:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58720,
                  "src": "5908:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58707,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5908:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58710,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "5943:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58720,
                  "src": "5935:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58709,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5935:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58714,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "5976:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58720,
                  "src": "5960:22:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20_$60345_$dyn_memory_ptr",
                    "typeString": "contract IERC20[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58712,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 58711,
                        "name": "IERC20",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 60345,
                        "src": "5960:6:135"
                      },
                      "referencedDeclaration": 60345,
                      "src": "5960:6:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$60345",
                        "typeString": "contract IERC20"
                      }
                    },
                    "id": 58713,
                    "nodeType": "ArrayTypeName",
                    "src": "5960:8:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20_$60345_$dyn_storage_ptr",
                      "typeString": "contract IERC20[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58717,
                  "mutability": "mutable",
                  "name": "endWeights",
                  "nameLocation": "6009:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58720,
                  "src": "5992:27:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58715,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5992:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58716,
                    "nodeType": "ArrayTypeName",
                    "src": "5992:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5898:127:135"
            },
            "returnParameters": {
              "id": 58719,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6034:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58727,
            "nodeType": "FunctionDefinition",
            "src": "6144:73:135",
            "nodes": [],
            "documentation": {
              "id": 58721,
              "nodeType": "StructuredDocumentation",
              "src": "6041:98:135",
              "text": " @notice Returns all normalized weights, in the same order as the Pool's tokens."
            },
            "functionSelector": "f89f27ed",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getNormalizedWeights",
            "nameLocation": "6153:20:135",
            "parameters": {
              "id": 58722,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6173:2:135"
            },
            "returnParameters": {
              "id": 58726,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58725,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58727,
                  "src": "6199:16:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58723,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6199:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58724,
                    "nodeType": "ArrayTypeName",
                    "src": "6199:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6198:18:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58741,
            "nodeType": "FunctionDefinition",
            "src": "6718:183:135",
            "nodes": [],
            "documentation": {
              "id": 58728,
              "nodeType": "StructuredDocumentation",
              "src": "6223:490:135",
              "text": " @notice Returns the current gradual weight change update parameters.\n @dev The current weights can be retrieved via `getNormalizedWeights()`.\n @return startTime - The timestamp when the weight update will begin.\n @return endTime - The timestamp when the weight update will end.\n @return startWeights - The starting weights, when the weight change was initiated.\n @return endWeights - The final weights, when the current timestamp >= endTime."
            },
            "functionSelector": "7beed220",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGradualWeightUpdateParams",
            "nameLocation": "6727:28:135",
            "parameters": {
              "id": 58729,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6755:2:135"
            },
            "returnParameters": {
              "id": 58740,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58731,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "6813:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58741,
                  "src": "6805:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58730,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6805:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58733,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "6832:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58741,
                  "src": "6824:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58732,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6824:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58736,
                  "mutability": "mutable",
                  "name": "startWeights",
                  "nameLocation": "6858:12:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58741,
                  "src": "6841:29:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58734,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6841:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58735,
                    "nodeType": "ArrayTypeName",
                    "src": "6841:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58739,
                  "mutability": "mutable",
                  "name": "endWeights",
                  "nameLocation": "6889:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58741,
                  "src": "6872:27:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58737,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6872:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58738,
                    "nodeType": "ArrayTypeName",
                    "src": "6872:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6804:96:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58747,
            "nodeType": "FunctionDefinition",
            "src": "7220:59:135",
            "nodes": [],
            "documentation": {
              "id": 58742,
              "nodeType": "StructuredDocumentation",
              "src": "6944:271:135",
              "text": " @notice Enable or disable joins and exits. Note that this does not affect Recovery Mode exits.\n @dev Emits the JoinExitEnabledSet event. This is a permissioned function.\n @param joinExitEnabled - The new value of the join/exit enabled flag."
            },
            "functionSelector": "de3d2b2d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setJoinExitEnabled",
            "nameLocation": "7229:18:135",
            "parameters": {
              "id": 58745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58744,
                  "mutability": "mutable",
                  "name": "joinExitEnabled",
                  "nameLocation": "7253:15:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58747,
                  "src": "7248:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58743,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7248:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7247:22:135"
            },
            "returnParameters": {
              "id": 58746,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7278:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58753,
            "nodeType": "FunctionDefinition",
            "src": "7361:59:135",
            "nodes": [],
            "documentation": {
              "id": 58748,
              "nodeType": "StructuredDocumentation",
              "src": "7285:71:135",
              "text": " @notice Returns whether joins and exits are enabled."
            },
            "functionSelector": "41e45a20",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getJoinExitEnabled",
            "nameLocation": "7370:18:135",
            "parameters": {
              "id": 58749,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7388:2:135"
            },
            "returnParameters": {
              "id": 58752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58751,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58753,
                  "src": "7414:4:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58750,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7414:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7413:6:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58759,
            "nodeType": "FunctionDefinition",
            "src": "7657:51:135",
            "nodes": [],
            "documentation": {
              "id": 58754,
              "nodeType": "StructuredDocumentation",
              "src": "7454:198:135",
              "text": " @notice Enable or disable trading.\n @dev Emits the SwapEnabledSet event. This is a permissioned function.\n @param swapEnabled - The new value of the swap enabled flag."
            },
            "functionSelector": "e01af92c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setSwapEnabled",
            "nameLocation": "7666:14:135",
            "parameters": {
              "id": 58757,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58756,
                  "mutability": "mutable",
                  "name": "swapEnabled",
                  "nameLocation": "7686:11:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58759,
                  "src": "7681:16:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58755,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7681:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7680:18:135"
            },
            "returnParameters": {
              "id": 58758,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7707:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58765,
            "nodeType": "FunctionDefinition",
            "src": "7780:55:135",
            "nodes": [],
            "documentation": {
              "id": 58760,
              "nodeType": "StructuredDocumentation",
              "src": "7714:61:135",
              "text": " @notice Returns whether swaps are enabled."
            },
            "functionSelector": "47bc4d92",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSwapEnabled",
            "nameLocation": "7789:14:135",
            "parameters": {
              "id": 58761,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7803:2:135"
            },
            "returnParameters": {
              "id": 58764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58763,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58765,
                  "src": "7829:4:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58762,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7829:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7828:6:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58771,
            "nodeType": "FunctionDefinition",
            "src": "8279:61:135",
            "nodes": [],
            "documentation": {
              "id": 58766,
              "nodeType": "StructuredDocumentation",
              "src": "7862:412:135",
              "text": " @notice Enable or disable the LP allowlist.\n @dev Note that any addresses added to the allowlist will be retained if the allowlist is toggled off and\n back on again, because this action does not affect the list of LP addresses.\n Emits the MustAllowlistLPsSet event. This is a permissioned function.\n @param mustAllowlistLPs - The new value of the mustAllowlistLPs flag."
            },
            "functionSelector": "7b749c45",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMustAllowlistLPs",
            "nameLocation": "8288:19:135",
            "parameters": {
              "id": 58769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58768,
                  "mutability": "mutable",
                  "name": "mustAllowlistLPs",
                  "nameLocation": "8313:16:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58771,
                  "src": "8308:21:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58767,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8308:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8307:23:135"
            },
            "returnParameters": {
              "id": 58770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8339:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58777,
            "nodeType": "FunctionDefinition",
            "src": "8619:52:135",
            "nodes": [],
            "documentation": {
              "id": 58772,
              "nodeType": "StructuredDocumentation",
              "src": "8346:268:135",
              "text": " @notice Adds an address to the LP allowlist.\n @dev Will fail if the address is already allowlisted.\n Emits the AllowlistAddressAdded event. This is a permissioned function.\n @param member - The address to be added to the allowlist."
            },
            "functionSelector": "81788e2b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addAllowedAddress",
            "nameLocation": "8628:17:135",
            "parameters": {
              "id": 58775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58774,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "8654:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58777,
                  "src": "8646:14:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58773,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8646:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8645:16:135"
            },
            "returnParameters": {
              "id": 58776,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8670:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58783,
            "nodeType": "FunctionDefinition",
            "src": "8969:55:135",
            "nodes": [],
            "documentation": {
              "id": 58778,
              "nodeType": "StructuredDocumentation",
              "src": "8677:287:135",
              "text": " @notice Removes an address from the LP allowlist.\n @dev Will fail if the address was not previously allowlisted.\n Emits the AllowlistAddressRemoved event. This is a permissioned function.\n @param member - The address to be removed from the allowlist."
            },
            "functionSelector": "3c9d93b8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeAllowedAddress",
            "nameLocation": "8978:20:135",
            "parameters": {
              "id": 58781,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58780,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "9007:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58783,
                  "src": "8999:14:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58779,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8999:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8998:16:135"
            },
            "returnParameters": {
              "id": 58782,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9023:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58789,
            "nodeType": "FunctionDefinition",
            "src": "9111:60:135",
            "nodes": [],
            "documentation": {
              "id": 58784,
              "nodeType": "StructuredDocumentation",
              "src": "9030:76:135",
              "text": " @notice Returns whether the allowlist for LPs is enabled."
            },
            "functionSelector": "8d027466",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMustAllowlistLPs",
            "nameLocation": "9120:19:135",
            "parameters": {
              "id": 58785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9139:2:135"
            },
            "returnParameters": {
              "id": 58788,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58787,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58789,
                  "src": "9165:4:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58786,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9165:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9164:6:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58797,
            "nodeType": "FunctionDefinition",
            "src": "9483:75:135",
            "nodes": [],
            "documentation": {
              "id": 58790,
              "nodeType": "StructuredDocumentation",
              "src": "9177:301:135",
              "text": " @notice Check whether an LP address is on the allowlist.\n @dev This simply checks the list, regardless of whether the allowlist feature is enabled.\n @param member - The address to check against the allowlist.\n @return true if the given address is on the allowlist."
            },
            "functionSelector": "36eb097b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isAddressOnAllowlist",
            "nameLocation": "9492:20:135",
            "parameters": {
              "id": 58793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58792,
                  "mutability": "mutable",
                  "name": "member",
                  "nameLocation": "9521:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58797,
                  "src": "9513:14:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58791,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9513:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9512:16:135"
            },
            "returnParameters": {
              "id": 58796,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58795,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58797,
                  "src": "9552:4:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58794,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9552:4:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9551:6:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58803,
            "nodeType": "FunctionDefinition",
            "src": "10418:63:135",
            "nodes": [],
            "documentation": {
              "id": 58798,
              "nodeType": "StructuredDocumentation",
              "src": "9588:825:135",
              "text": " @notice Collect any accrued AUM fees and send them to the pool manager.\n @dev This can be called by anyone to collect accrued AUM fees - and will be called automatically\n whenever the supply changes (e.g., joins and exits, add and remove token), and before the fee\n percentage is changed by the manager, to prevent fees from being applied retroactively.\n Correct behavior depends on the current supply, which is potentially manipulable if the pool\n is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\n and so is safe to call on ManagedPool.\n See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\n @return The amount of BPT minted to the manager."
            },
            "functionSelector": "73656f89",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "collectAumManagementFees",
            "nameLocation": "10427:24:135",
            "parameters": {
              "id": 58799,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10451:2:135"
            },
            "returnParameters": {
              "id": 58802,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58801,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58803,
                  "src": "10472:7:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58800,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10472:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10471:9:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58811,
            "nodeType": "FunctionDefinition",
            "src": "11602:102:135",
            "nodes": [],
            "documentation": {
              "id": 58804,
              "nodeType": "StructuredDocumentation",
              "src": "10487:1110:135",
              "text": " @notice Setter for the yearly percentage AUM management fee, which is payable to the pool manager.\n @dev Attempting to collect AUM fees in excess of the maximum permitted percentage will revert.\n To avoid retroactive fee increases, we force collection at the current fee percentage before processing\n the update. Emits the ManagementAumFeePercentageChanged event. This is a permissioned function.\n To prevent changing management fees retroactively, this triggers payment of protocol fees before applying\n the change. Correct behavior depends on the current supply, which is potentially manipulable if the pool\n is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\n and so is safe to call on ManagedPool.\n See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\n @param managementAumFeePercentage - The new management AUM fee percentage.\n @return amount - The amount of BPT minted to the manager before the update, if any."
            },
            "functionSelector": "2a9a0323",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setManagementAumFeePercentage",
            "nameLocation": "11611:29:135",
            "parameters": {
              "id": 58807,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58806,
                  "mutability": "mutable",
                  "name": "managementAumFeePercentage",
                  "nameLocation": "11649:26:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58811,
                  "src": "11641:34:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58805,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11641:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11640:36:135"
            },
            "returnParameters": {
              "id": 58810,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58809,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58811,
                  "src": "11695:7:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58808,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11695:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11694:9:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58819,
            "nodeType": "FunctionDefinition",
            "src": "11880:143:135",
            "nodes": [],
            "documentation": {
              "id": 58812,
              "nodeType": "StructuredDocumentation",
              "src": "11710:165:135",
              "text": " @notice Returns the management AUM fee percentage as an 18-decimal fixed point number and the timestamp of the\n last collection of AUM fees."
            },
            "functionSelector": "6b47273b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getManagementAumFeeParams",
            "nameLocation": "11889:25:135",
            "parameters": {
              "id": 58813,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11914:2:135"
            },
            "returnParameters": {
              "id": 58818,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58815,
                  "mutability": "mutable",
                  "name": "aumFeePercentage",
                  "nameLocation": "11972:16:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58819,
                  "src": "11964:24:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58814,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11964:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58817,
                  "mutability": "mutable",
                  "name": "lastCollectionTimestamp",
                  "nameLocation": "11998:23:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58819,
                  "src": "11990:31:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58816,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11990:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11963:59:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58836,
            "nodeType": "FunctionDefinition",
            "src": "12456:207:135",
            "nodes": [],
            "documentation": {
              "id": 58820,
              "nodeType": "StructuredDocumentation",
              "src": "12054:397:135",
              "text": " @notice Set a circuit breaker for one or more tokens.\n @dev This is a permissioned function. The lower and upper bounds are percentages, corresponding to a\n relative change in the token's spot price: e.g., a lower bound of 0.8 means the breaker should prevent\n trades that result in the value of the token dropping 20% or more relative to the rest of the pool."
            },
            "functionSelector": "f885a4bb",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setCircuitBreakers",
            "nameLocation": "12465:18:135",
            "parameters": {
              "id": 58834,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58824,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "12509:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58836,
                  "src": "12493:22:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20_$60345_$dyn_memory_ptr",
                    "typeString": "contract IERC20[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58822,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 58821,
                        "name": "IERC20",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 60345,
                        "src": "12493:6:135"
                      },
                      "referencedDeclaration": 60345,
                      "src": "12493:6:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$60345",
                        "typeString": "contract IERC20"
                      }
                    },
                    "id": 58823,
                    "nodeType": "ArrayTypeName",
                    "src": "12493:8:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20_$60345_$dyn_storage_ptr",
                      "typeString": "contract IERC20[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58827,
                  "mutability": "mutable",
                  "name": "bptPrices",
                  "nameLocation": "12542:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58836,
                  "src": "12525:26:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58825,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "12525:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58826,
                    "nodeType": "ArrayTypeName",
                    "src": "12525:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58830,
                  "mutability": "mutable",
                  "name": "lowerBoundPercentages",
                  "nameLocation": "12578:21:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58836,
                  "src": "12561:38:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58828,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "12561:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58829,
                    "nodeType": "ArrayTypeName",
                    "src": "12561:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58833,
                  "mutability": "mutable",
                  "name": "upperBoundPercentages",
                  "nameLocation": "12626:21:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58836,
                  "src": "12609:38:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58831,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "12609:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58832,
                    "nodeType": "ArrayTypeName",
                    "src": "12609:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12483:170:135"
            },
            "returnParameters": {
              "id": 58835,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12662:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58855,
            "nodeType": "FunctionDefinition",
            "src": "13022:328:135",
            "nodes": [],
            "documentation": {
              "id": 58837,
              "nodeType": "StructuredDocumentation",
              "src": "12669:348:135",
              "text": " @notice Return the full circuit breaker state for the given token.\n @dev These are the reference values (BPT price and reference weight) passed in when the breaker was set,\n along with the percentage bounds. It also returns the current BPT price bounds, needed to check whether\n the circuit breaker should trip."
            },
            "functionSelector": "ebf1b742",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCircuitBreakerState",
            "nameLocation": "13031:22:135",
            "parameters": {
              "id": 58841,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58840,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "13070:5:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58855,
                  "src": "13063:12:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$60345",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 58839,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58838,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60345,
                      "src": "13063:6:135"
                    },
                    "referencedDeclaration": 60345,
                    "src": "13063:6:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$60345",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13053:28:135"
            },
            "returnParameters": {
              "id": 58854,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58843,
                  "mutability": "mutable",
                  "name": "bptPrice",
                  "nameLocation": "13150:8:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58855,
                  "src": "13142:16:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58842,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13142:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58845,
                  "mutability": "mutable",
                  "name": "referenceWeight",
                  "nameLocation": "13180:15:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58855,
                  "src": "13172:23:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58844,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13172:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58847,
                  "mutability": "mutable",
                  "name": "lowerBound",
                  "nameLocation": "13217:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58855,
                  "src": "13209:18:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58846,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13209:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58849,
                  "mutability": "mutable",
                  "name": "upperBound",
                  "nameLocation": "13249:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58855,
                  "src": "13241:18:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58848,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13241:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58851,
                  "mutability": "mutable",
                  "name": "lowerBptPriceBound",
                  "nameLocation": "13281:18:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58855,
                  "src": "13273:26:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58850,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13273:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58853,
                  "mutability": "mutable",
                  "name": "upperBptPriceBound",
                  "nameLocation": "13321:18:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58855,
                  "src": "13313:26:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58852,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13313:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13128:221:135"
            },
            "scope": 58882,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58870,
            "nodeType": "FunctionDefinition",
            "src": "15133:189:135",
            "nodes": [],
            "documentation": {
              "id": 58856,
              "nodeType": "StructuredDocumentation",
              "src": "13382:1746:135",
              "text": " @notice Adds a token to the Pool's list of tradeable tokens. This is a permissioned function.\n @dev By adding a token to the Pool's composition, the weights of all other tokens will be decreased. The new\n token will have no balance - it is up to the owner to provide some immediately after calling this function.\n Note however that regular join functions will not work while the new token has no balance: the only way to\n deposit an initial amount is by using an Asset Manager.\n Token addition is forbidden during a weight change, or if one is scheduled to happen in the future.\n The caller may additionally pass a non-zero `mintAmount` to have some BPT be minted for them, which might be\n useful in some scenarios to account for the fact that the Pool will have more tokens.\n Emits the TokenAdded event. This is a permissioned function.\n Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of\n the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\n and so is safe to call on ManagedPool.\n See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\n @param tokenToAdd - The ERC20 token to be added to the Pool.\n @param assetManager - The Asset Manager for the token.\n @param tokenToAddNormalizedWeight - The normalized weight of `token` relative to the other tokens in the Pool.\n @param mintAmount - The amount of BPT to be minted as a result of adding `token` to the Pool.\n @param recipient - The address to receive the BPT minted by the Pool."
            },
            "functionSelector": "34a36df8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addToken",
            "nameLocation": "15142:8:135",
            "parameters": {
              "id": 58868,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58859,
                  "mutability": "mutable",
                  "name": "tokenToAdd",
                  "nameLocation": "15167:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58870,
                  "src": "15160:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$60345",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 58858,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58857,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60345,
                      "src": "15160:6:135"
                    },
                    "referencedDeclaration": 60345,
                    "src": "15160:6:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$60345",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58861,
                  "mutability": "mutable",
                  "name": "assetManager",
                  "nameLocation": "15195:12:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58870,
                  "src": "15187:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58860,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15187:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58863,
                  "mutability": "mutable",
                  "name": "tokenToAddNormalizedWeight",
                  "nameLocation": "15225:26:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58870,
                  "src": "15217:34:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58862,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15217:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58865,
                  "mutability": "mutable",
                  "name": "mintAmount",
                  "nameLocation": "15269:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58870,
                  "src": "15261:18:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58864,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15261:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58867,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "15297:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58870,
                  "src": "15289:17:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58866,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15289:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15150:162:135"
            },
            "returnParameters": {
              "id": 58869,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15321:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58881,
            "nodeType": "FunctionDefinition",
            "src": "16578:88:135",
            "nodes": [],
            "documentation": {
              "id": 58871,
              "nodeType": "StructuredDocumentation",
              "src": "15328:1245:135",
              "text": " @notice Removes a token from the Pool's list of tradeable tokens.\n @dev Tokens can only be removed if the Pool has more than 2 tokens, as it can never have fewer than 2 (not\n including BPT). Token removal is also forbidden during a weight change, or if one is scheduled to happen in\n the future.\n Emits the TokenRemoved event. This is a permissioned function.\n Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of\n the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\n and so is safe to call on ManagedPool.\n See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\n The caller may additionally pass a non-zero `burnAmount` to burn some of their BPT, which might be useful\n in some scenarios to account for the fact that the Pool now has fewer tokens. This is a permissioned function.\n @param tokenToRemove - The ERC20 token to be removed from the Pool.\n @param burnAmount - The amount of BPT to be burned after removing `token` from the Pool.\n @param sender - The address to burn BPT from."
            },
            "functionSelector": "97bb15c9",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeToken",
            "nameLocation": "16587:11:135",
            "parameters": {
              "id": 58879,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58874,
                  "mutability": "mutable",
                  "name": "tokenToRemove",
                  "nameLocation": "16606:13:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58881,
                  "src": "16599:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$60345",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 58873,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58872,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60345,
                      "src": "16599:6:135"
                    },
                    "referencedDeclaration": 60345,
                    "src": "16599:6:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$60345",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58876,
                  "mutability": "mutable",
                  "name": "burnAmount",
                  "nameLocation": "16629:10:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58881,
                  "src": "16621:18:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58875,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16621:7:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58878,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "16649:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 58881,
                  "src": "16641:14:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58877,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16641:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16598:58:135"
            },
            "returnParameters": {
              "id": 58880,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16665:0:135"
            },
            "scope": 58882,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 58601,
              "name": "IBasePool",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 61947,
              "src": "825:9:135"
            },
            "id": 58602,
            "nodeType": "InheritanceSpecifier",
            "src": "825:9:135"
          }
        ],
        "canonicalName": "IManagedPool",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          58882,
          61947,
          62072
        ],
        "name": "IManagedPool",
        "nameLocation": "809:12:135",
        "scope": 58883,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 135
}