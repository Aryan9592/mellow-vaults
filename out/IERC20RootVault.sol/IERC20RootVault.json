{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "depositors",
          "type": "address[]"
        }
      ],
      "name": "addDepositorsToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minLpTokens",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "vaultOptions",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositorsAllowlist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_",
          "type": "uint256"
        }
      ],
      "name": "hasSubvault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "vaultTokens_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "strategy_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "subvaultNfts_",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IERC20RootVaultHelper",
          "name": "helper_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isVaultToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeCharge",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpPriceHighWaterMarkD18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullExistentials",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "depositors",
          "type": "address[]"
        }
      ],
      "name": "removeDepositorsFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "subvaultAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subvaultNfts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_",
          "type": "uint256"
        }
      ],
      "name": "subvaultOneBasedIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "totalWithdrawnAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWithdrawnAmountsTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "minTokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultGovernance",
      "outputs": [
        {
          "internalType": "contract IVaultGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minTokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "vaultsOptions",
          "type": "bytes[]"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addDepositorsToAllowlist(address[])": "91b7ab47",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "deposit(uint256[],uint256,bytes)": "54a3f474",
    "depositorsAllowlist()": "a09eb0e7",
    "hasSubvault(uint256)": "9d9fd0d9",
    "initialize(uint256,address[],address,uint256[],address)": "6a72a804",
    "initialized()": "158ef93e",
    "isVaultToken(address)": "338c4ccb",
    "lastFeeCharge()": "3da7463f",
    "lpPriceHighWaterMarkD18()": "24004a66",
    "nft()": "47ccca02",
    "pullExistentials()": "d2c219b0",
    "removeDepositorsFromAllowlist(address[])": "e273d23e",
    "subvaultAt(uint256)": "9bd0911b",
    "subvaultNfts()": "79183973",
    "subvaultOneBasedIndex(uint256)": "9ddc875f",
    "supportsInterface(bytes4)": "01ffc9a7",
    "totalSupply()": "18160ddd",
    "totalWithdrawnAmounts(uint256)": "151bb8d1",
    "totalWithdrawnAmountsTimestamp()": "407a31c0",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "tvl()": "e5328e06",
    "vaultGovernance()": "fe255a5e",
    "vaultTokens()": "69722233",
    "withdraw(address,uint256,uint256[],bytes[])": "82491fac"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"}],\"name\":\"addDepositorsToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vaultOptions\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositorsAllowlist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_\",\"type\":\"uint256\"}],\"name\":\"hasSubvault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"vaultTokens_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"subvaultNfts_\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20RootVaultHelper\",\"name\":\"helper_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isVaultToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeCharge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPriceHighWaterMarkD18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullExistentials\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"}],\"name\":\"removeDepositorsFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"subvaultAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subvaultNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_\",\"type\":\"uint256\"}],\"name\":\"subvaultOneBasedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"totalWithdrawnAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawnAmountsTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultGovernance\",\"outputs\":[{\"internalType\":\"contract IVaultGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"vaultsOptions\",\"type\":\"bytes[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addDepositorsToAllowlist(address[])\":{\"details\":\"The action can be done only by user with admins, owners or by approved rights\",\"params\":{\"depositors\":\"Array of new depositors\"}},\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"deposit(uint256[],uint256,bytes)\":{\"params\":{\"minLpTokens\":\"Minimal value of LP tokens\",\"tokenAmounts\":\"Array of amounts of tokens for deposit\",\"vaultOptions\":\"Options of vaults\"},\"returns\":{\"actualTokenAmounts\":\"Arrays of actual token amounts after deposit\"}},\"hasSubvault(uint256)\":{\"params\":{\"nft_\":\"index of subvault for check\"},\"returns\":{\"_0\":\"`true` if subvault present, `false` otherwise\"}},\"initialize(uint256,address[],address,uint256[],address)\":{\"details\":\"Can only be initialized by vault governance\",\"params\":{\"nft_\":\"NFT of the vault in the VaultRegistry\",\"strategy_\":\"The address that will have approvals for subvaultNfts\",\"subvaultNfts_\":\"The NFTs of the subvaults that will be aggregated by this ERC20RootVault\",\"vaultTokens_\":\"ERC20 tokens that will be managed by this Vault\"}},\"isVaultToken(address)\":{\"params\":{\"token\":\"Address of the token to check\"},\"returns\":{\"_0\":\"`true` if this token is managed by Vault\"}},\"removeDepositorsFromAllowlist(address[])\":{\"details\":\"The action can be done only by user with admins, owners or by approved rights\",\"params\":{\"depositors\":\"Array of depositors for remove\"}},\"subvaultAt(uint256)\":{\"params\":{\"index\":\"Index of subvault\"},\"returns\":{\"_0\":\"address Address of the contract\"}},\"subvaultNfts()\":{\"returns\":{\"_0\":\"subvaultNfts Subvaults of NTFs\"}},\"subvaultOneBasedIndex(uint256)\":{\"params\":{\"nft_\":\"Nft for getting subvault\"},\"returns\":{\"_0\":\"index Index of subvault\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"totalWithdrawnAmounts(uint256)\":{\"params\":{\"_index\":\"The index at which the value will be returned\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"tvl()\":{\"details\":\"Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\",\"returns\":{\"maxTokenAmounts\":\"Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\",\"minTokenAmounts\":\"Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\"}},\"withdraw(address,uint256,uint256[],bytes[])\":{\"params\":{\"lpTokenAmount\":\"LP token amount, that requested for withdraw\",\"minTokenAmounts\":\"Array of minmal remining wtoken amounts after withdrawal\",\"to\":\"Address to which the withdrawal will be sent\",\"vaultsOptions\":\"Options of vaults\"},\"returns\":{\"actualTokenAmounts\":\"Arrays of actual token amounts after withdrawal\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDepositorsToAllowlist(address[])\":{\"notice\":\"Add new depositors in the depositorsAllowlist\"},\"deposit(uint256[],uint256,bytes)\":{\"notice\":\"The function of depositing the amount of tokens in exchange\"},\"depositorsAllowlist()\":{\"notice\":\"List of addresses of depositors from which interaction with private vaults is allowed\"},\"hasSubvault(uint256)\":{\"notice\":\"Checks if subvault is present\"},\"initialize(uint256,address[],address,uint256[],address)\":{\"notice\":\"Initialized a new contract.\"},\"initialized()\":{\"notice\":\"Checks if the vault is initialized\"},\"isVaultToken(address)\":{\"notice\":\"Checks if a token is vault token\"},\"lastFeeCharge()\":{\"notice\":\"The timestamp of last charging of fees\"},\"lpPriceHighWaterMarkD18()\":{\"notice\":\"LP parameter that controls the charge in performance fees\"},\"nft()\":{\"notice\":\"VaultRegistry NFT for this vault\"},\"pullExistentials()\":{\"notice\":\"Existential amounts for each token\"},\"removeDepositorsFromAllowlist(address[])\":{\"notice\":\"Remove depositors from the depositorsAllowlist\"},\"subvaultAt(uint256)\":{\"notice\":\"Get subvault by index\"},\"subvaultNfts()\":{\"notice\":\"Get all subvalutNfts in the current Vault\"},\"subvaultOneBasedIndex(uint256)\":{\"notice\":\"Get index of subvault by nft\"},\"totalWithdrawnAmounts(uint256)\":{\"notice\":\"Returns value from totalWithdrawnAmounts array by _index\"},\"totalWithdrawnAmountsTimestamp()\":{\"notice\":\"The timestamp of last updating totalWithdrawnAmounts array\"},\"tvl()\":{\"notice\":\"Total value locked for this contract.\"},\"vaultGovernance()\":{\"notice\":\"Address of the Vault Governance for this contract.\"},\"vaultTokens()\":{\"notice\":\"ERC20 tokens under Vault management.\"},\"withdraw(address,uint256,uint256[],bytes[])\":{\"notice\":\"The function of withdrawing the amount of tokens in exchange\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/vaults/IERC20RootVault.sol\":\"IERC20RootVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276\",\"dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"src/interfaces/IProtocolGovernance.sol\":{\"keccak256\":\"0x56c5ffe3c7a0414fbe269fb65d5181c41c0937f2d854b35ac11d11d143b4025e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3c06dabc1ab8741d81f8f941230bb19d66c4a32707a984e2e48952f6d86a281\",\"dweb:/ipfs/Qmb47fn3Wpe38NyJ5f4Gzbthd6HimRBNDVU82JWwsyR36b\"]},\"src/interfaces/IUnitPricesGovernance.sol\":{\"keccak256\":\"0x9fc3abc68aeebff7927937d8a3ebe876a26550c95da8941b7a123583c6812081\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a323e55a7dd91bbe02329783c6fa447b3dfec8aa963f10a7bcd4aee986d7ca87\",\"dweb:/ipfs/QmRShHKXzDsxUDbSzhRQTZmagzYeP2Q7KAx1t4SVomn6Gk\"]},\"src/interfaces/IVaultRegistry.sol\":{\"keccak256\":\"0xbbff9405f05886e694fbb4ed6a39a85f05cd05ee28a8b689c62be86230b9be55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b9c10d208a2533045f2d00fccfdec42f20ac4a608e850e663be05075eeb3b50\",\"dweb:/ipfs/QmRFPZZVBdYvTLEW5zLjHzivVKH4Ug9mJKom5yq18cVij1\"]},\"src/interfaces/oracles/IOracle.sol\":{\"keccak256\":\"0x2d89a1f771e68129d47ae26eccf76f969cd2877e9b7190687056f912c3524b53\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f378b9f29c18878e73e251ca97abeca819f0789834281ee1399db878f6baedf5\",\"dweb:/ipfs/QmSrFYZWmGdVkgACwwZEfbkPt3kQCSkr6czBi9HVtzNSJg\"]},\"src/interfaces/utils/IDefaultAccessControl.sol\":{\"keccak256\":\"0xf746069a0607df88bbe40abd9d0ce377eac023a06315072a902f0a1995514d60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cef1e775b3ef0bdfab1871c54b6a7ba056e2baaef6f12a5ad5041ed500700add\",\"dweb:/ipfs/QmRKQoRR5FzupKKJb8pTQHzBf3A9hWnk4JrPSQ31s7zLtu\"]},\"src/interfaces/utils/IERC20RootVaultHelper.sol\":{\"keccak256\":\"0x58a7fcc0db33c498d00b2ece9876a5fc272f362fb5f96d1b666fc10b5683a38f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ebd1b47e1dee02800bbf211f45a13dc6accfb2e91c645711486bb9e3f5559cd\",\"dweb:/ipfs/QmYFVKRWs73onqQxiUw8AJHfHbhib6nshmAzvCr3T5pqpW\"]},\"src/interfaces/vaults/IAggregateVault.sol\":{\"keccak256\":\"0x22c60a8c3758f52aeeabf448cff491582357bed969cf9328cd93623ed12df3f9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34fc54a3c550f28f0d77bdecad9e2b1083a79f37b6d783277c06741b1ecae35a\",\"dweb:/ipfs/QmdAXG1NpbzNPH6o8NxsVSVmnoUdtQeP9cNxmQ44Dm6qCT\"]},\"src/interfaces/vaults/IERC20RootVault.sol\":{\"keccak256\":\"0x81fae667b46299223c56ed34d77aa64d7d2a2b19d80167c23f0ba0dcbdd97cf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://69b4669c0267163c52c78904f8a090b60b171e76dacc2468c1b8e82e20df8b2a\",\"dweb:/ipfs/QmUwAJcY157nBGxdGEpBTYLmRNW5WbsF74qF7WT8hQVj3k\"]},\"src/interfaces/vaults/IVault.sol\":{\"keccak256\":\"0x8f5a025c2b61e9840b4a67321610de985f4e478f5368cbcd9737c525cf582c43\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6d397f0ddaa34fa8248c7624f72f31f8c8b66ee30965f8bbc3f434e2f3696b1\",\"dweb:/ipfs/QmcTfSgQLGJFmpx6ozKYKNXQp6tPNgswg2m9ttSZyoDQiw\"]},\"src/interfaces/vaults/IVaultGovernance.sol\":{\"keccak256\":\"0xb0295982be8e1730fb111e034f1ab4db0b8013674408a4ab851d978856387813\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://120ed22cf68dd88aad37700e42cd775637184c636f0fde6b068a5ddb8bfce375\",\"dweb:/ipfs/QmfA9CVkP5MMkXsuDFj86o8pRMtLEjeidmwWe43Henaxwu\"]},\"src/interfaces/vaults/IVaultRoot.sol\":{\"keccak256\":\"0xfc566a9133afe6942e196bcfde5b5e1920094d6f1656885b25b72b91f48c10ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79470664780741869fe81ad1eed10b2afd7d9432ee70be1599f242f102a4deaa\",\"dweb:/ipfs/QmUUPv5juGLrdngD5ZQNcsHxvQzWPG1c8aLjA2nsUC6uJz\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "depositors",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addDepositorsToAllowlist"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "minLpTokens",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vaultOptions",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deposit",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "depositorsAllowlist",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nft_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasSubvault",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nft_",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "vaultTokens_",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "strategy_",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "subvaultNfts_",
              "type": "uint256[]"
            },
            {
              "internalType": "contract IERC20RootVaultHelper",
              "name": "helper_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "initialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isVaultToken",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "lastFeeCharge",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "lpPriceHighWaterMarkD18",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nft",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pullExistentials",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "depositors",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeDepositorsFromAllowlist"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "subvaultAt",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "subvaultNfts",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nft_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "subvaultOneBasedIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalWithdrawnAmounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalWithdrawnAmountsTimestamp",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tvl",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "minTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultGovernance",
          "outputs": [
            {
              "internalType": "contract IVaultGovernance",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lpTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "minTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "vaultsOptions",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addDepositorsToAllowlist(address[])": {
            "details": "The action can be done only by user with admins, owners or by approved rights",
            "params": {
              "depositors": "Array of new depositors"
            }
          },
          "allowance(address,address)": {
            "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
          },
          "approve(address,uint256)": {
            "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the amount of tokens owned by `account`."
          },
          "deposit(uint256[],uint256,bytes)": {
            "params": {
              "minLpTokens": "Minimal value of LP tokens",
              "tokenAmounts": "Array of amounts of tokens for deposit",
              "vaultOptions": "Options of vaults"
            },
            "returns": {
              "actualTokenAmounts": "Arrays of actual token amounts after deposit"
            }
          },
          "hasSubvault(uint256)": {
            "params": {
              "nft_": "index of subvault for check"
            },
            "returns": {
              "_0": "`true` if subvault present, `false` otherwise"
            }
          },
          "initialize(uint256,address[],address,uint256[],address)": {
            "details": "Can only be initialized by vault governance",
            "params": {
              "nft_": "NFT of the vault in the VaultRegistry",
              "strategy_": "The address that will have approvals for subvaultNfts",
              "subvaultNfts_": "The NFTs of the subvaults that will be aggregated by this ERC20RootVault",
              "vaultTokens_": "ERC20 tokens that will be managed by this Vault"
            }
          },
          "isVaultToken(address)": {
            "params": {
              "token": "Address of the token to check"
            },
            "returns": {
              "_0": "`true` if this token is managed by Vault"
            }
          },
          "removeDepositorsFromAllowlist(address[])": {
            "details": "The action can be done only by user with admins, owners or by approved rights",
            "params": {
              "depositors": "Array of depositors for remove"
            }
          },
          "subvaultAt(uint256)": {
            "params": {
              "index": "Index of subvault"
            },
            "returns": {
              "_0": "address Address of the contract"
            }
          },
          "subvaultNfts()": {
            "returns": {
              "_0": "subvaultNfts Subvaults of NTFs"
            }
          },
          "subvaultOneBasedIndex(uint256)": {
            "params": {
              "nft_": "Nft for getting subvault"
            },
            "returns": {
              "_0": "index Index of subvault"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "totalSupply()": {
            "details": "Returns the amount of tokens in existence."
          },
          "totalWithdrawnAmounts(uint256)": {
            "params": {
              "_index": "The index at which the value will be returned"
            }
          },
          "transfer(address,uint256)": {
            "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
          },
          "transferFrom(address,address,uint256)": {
            "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
          },
          "tvl()": {
            "details": "Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not",
            "returns": {
              "maxTokenAmounts": "Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)",
              "minTokenAmounts": "Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)"
            }
          },
          "withdraw(address,uint256,uint256[],bytes[])": {
            "params": {
              "lpTokenAmount": "LP token amount, that requested for withdraw",
              "minTokenAmounts": "Array of minmal remining wtoken amounts after withdrawal",
              "to": "Address to which the withdrawal will be sent",
              "vaultsOptions": "Options of vaults"
            },
            "returns": {
              "actualTokenAmounts": "Arrays of actual token amounts after withdrawal"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addDepositorsToAllowlist(address[])": {
            "notice": "Add new depositors in the depositorsAllowlist"
          },
          "deposit(uint256[],uint256,bytes)": {
            "notice": "The function of depositing the amount of tokens in exchange"
          },
          "depositorsAllowlist()": {
            "notice": "List of addresses of depositors from which interaction with private vaults is allowed"
          },
          "hasSubvault(uint256)": {
            "notice": "Checks if subvault is present"
          },
          "initialize(uint256,address[],address,uint256[],address)": {
            "notice": "Initialized a new contract."
          },
          "initialized()": {
            "notice": "Checks if the vault is initialized"
          },
          "isVaultToken(address)": {
            "notice": "Checks if a token is vault token"
          },
          "lastFeeCharge()": {
            "notice": "The timestamp of last charging of fees"
          },
          "lpPriceHighWaterMarkD18()": {
            "notice": "LP parameter that controls the charge in performance fees"
          },
          "nft()": {
            "notice": "VaultRegistry NFT for this vault"
          },
          "pullExistentials()": {
            "notice": "Existential amounts for each token"
          },
          "removeDepositorsFromAllowlist(address[])": {
            "notice": "Remove depositors from the depositorsAllowlist"
          },
          "subvaultAt(uint256)": {
            "notice": "Get subvault by index"
          },
          "subvaultNfts()": {
            "notice": "Get all subvalutNfts in the current Vault"
          },
          "subvaultOneBasedIndex(uint256)": {
            "notice": "Get index of subvault by nft"
          },
          "totalWithdrawnAmounts(uint256)": {
            "notice": "Returns value from totalWithdrawnAmounts array by _index"
          },
          "totalWithdrawnAmountsTimestamp()": {
            "notice": "The timestamp of last updating totalWithdrawnAmounts array"
          },
          "tvl()": {
            "notice": "Total value locked for this contract."
          },
          "vaultGovernance()": {
            "notice": "Address of the Vault Governance for this contract."
          },
          "vaultTokens()": {
            "notice": "ERC20 tokens under Vault management."
          },
          "withdraw(address,uint256,uint256[],bytes[])": {
            "notice": "The function of withdrawing the amount of tokens in exchange"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/vaults/IERC20RootVault.sol": "IERC20RootVault"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
        "urls": [
          "bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a",
          "dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "keccak256": "0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676",
        "urls": [
          "bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276",
          "dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [
          "bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
          "dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "src/interfaces/IProtocolGovernance.sol": {
        "keccak256": "0x56c5ffe3c7a0414fbe269fb65d5181c41c0937f2d854b35ac11d11d143b4025e",
        "urls": [
          "bzz-raw://c3c06dabc1ab8741d81f8f941230bb19d66c4a32707a984e2e48952f6d86a281",
          "dweb:/ipfs/Qmb47fn3Wpe38NyJ5f4Gzbthd6HimRBNDVU82JWwsyR36b"
        ],
        "license": "MIT"
      },
      "src/interfaces/IUnitPricesGovernance.sol": {
        "keccak256": "0x9fc3abc68aeebff7927937d8a3ebe876a26550c95da8941b7a123583c6812081",
        "urls": [
          "bzz-raw://a323e55a7dd91bbe02329783c6fa447b3dfec8aa963f10a7bcd4aee986d7ca87",
          "dweb:/ipfs/QmRShHKXzDsxUDbSzhRQTZmagzYeP2Q7KAx1t4SVomn6Gk"
        ],
        "license": "MIT"
      },
      "src/interfaces/IVaultRegistry.sol": {
        "keccak256": "0xbbff9405f05886e694fbb4ed6a39a85f05cd05ee28a8b689c62be86230b9be55",
        "urls": [
          "bzz-raw://1b9c10d208a2533045f2d00fccfdec42f20ac4a608e850e663be05075eeb3b50",
          "dweb:/ipfs/QmRFPZZVBdYvTLEW5zLjHzivVKH4Ug9mJKom5yq18cVij1"
        ],
        "license": "MIT"
      },
      "src/interfaces/oracles/IOracle.sol": {
        "keccak256": "0x2d89a1f771e68129d47ae26eccf76f969cd2877e9b7190687056f912c3524b53",
        "urls": [
          "bzz-raw://f378b9f29c18878e73e251ca97abeca819f0789834281ee1399db878f6baedf5",
          "dweb:/ipfs/QmSrFYZWmGdVkgACwwZEfbkPt3kQCSkr6czBi9HVtzNSJg"
        ],
        "license": "MIT"
      },
      "src/interfaces/utils/IDefaultAccessControl.sol": {
        "keccak256": "0xf746069a0607df88bbe40abd9d0ce377eac023a06315072a902f0a1995514d60",
        "urls": [
          "bzz-raw://cef1e775b3ef0bdfab1871c54b6a7ba056e2baaef6f12a5ad5041ed500700add",
          "dweb:/ipfs/QmRKQoRR5FzupKKJb8pTQHzBf3A9hWnk4JrPSQ31s7zLtu"
        ],
        "license": "MIT"
      },
      "src/interfaces/utils/IERC20RootVaultHelper.sol": {
        "keccak256": "0x58a7fcc0db33c498d00b2ece9876a5fc272f362fb5f96d1b666fc10b5683a38f",
        "urls": [
          "bzz-raw://8ebd1b47e1dee02800bbf211f45a13dc6accfb2e91c645711486bb9e3f5559cd",
          "dweb:/ipfs/QmYFVKRWs73onqQxiUw8AJHfHbhib6nshmAzvCr3T5pqpW"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IAggregateVault.sol": {
        "keccak256": "0x22c60a8c3758f52aeeabf448cff491582357bed969cf9328cd93623ed12df3f9",
        "urls": [
          "bzz-raw://34fc54a3c550f28f0d77bdecad9e2b1083a79f37b6d783277c06741b1ecae35a",
          "dweb:/ipfs/QmdAXG1NpbzNPH6o8NxsVSVmnoUdtQeP9cNxmQ44Dm6qCT"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IERC20RootVault.sol": {
        "keccak256": "0x81fae667b46299223c56ed34d77aa64d7d2a2b19d80167c23f0ba0dcbdd97cf1",
        "urls": [
          "bzz-raw://69b4669c0267163c52c78904f8a090b60b171e76dacc2468c1b8e82e20df8b2a",
          "dweb:/ipfs/QmUwAJcY157nBGxdGEpBTYLmRNW5WbsF74qF7WT8hQVj3k"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IVault.sol": {
        "keccak256": "0x8f5a025c2b61e9840b4a67321610de985f4e478f5368cbcd9737c525cf582c43",
        "urls": [
          "bzz-raw://a6d397f0ddaa34fa8248c7624f72f31f8c8b66ee30965f8bbc3f434e2f3696b1",
          "dweb:/ipfs/QmcTfSgQLGJFmpx6ozKYKNXQp6tPNgswg2m9ttSZyoDQiw"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IVaultGovernance.sol": {
        "keccak256": "0xb0295982be8e1730fb111e034f1ab4db0b8013674408a4ab851d978856387813",
        "urls": [
          "bzz-raw://120ed22cf68dd88aad37700e42cd775637184c636f0fde6b068a5ddb8bfce375",
          "dweb:/ipfs/QmfA9CVkP5MMkXsuDFj86o8pRMtLEjeidmwWe43Henaxwu"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IVaultRoot.sol": {
        "keccak256": "0xfc566a9133afe6942e196bcfde5b5e1920094d6f1656885b25b72b91f48c10ef",
        "urls": [
          "bzz-raw://79470664780741869fe81ad1eed10b2afd7d9432ee70be1599f242f102a4deaa",
          "dweb:/ipfs/QmUUPv5juGLrdngD5ZQNcsHxvQzWPG1c8aLjA2nsUC6uJz"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/vaults/IERC20RootVault.sol",
    "id": 76956,
    "exportedSymbols": {
      "IAccessControl": [
        43366
      ],
      "IAccessControlEnumerable": [
        43391
      ],
      "IAggregateVault": [
        76190
      ],
      "IDefaultAccessControl": [
        75786
      ],
      "IERC165": [
        48073
      ],
      "IERC20": [
        45207
      ],
      "IERC20RootVault": [
        76955
      ],
      "IERC20RootVaultHelper": [
        75804
      ],
      "IERC721": [
        46687
      ],
      "IOracle": [
        75605
      ],
      "IProtocolGovernance": [
        52868
      ],
      "IUnitPricesGovernance": [
        52921
      ],
      "IVault": [
        78599
      ],
      "IVaultGovernance": [
        78668
      ],
      "IVaultRegistry": [
        53012
      ],
      "IVaultRoot": [
        78702
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:3401:337",
    "nodes": [
      {
        "id": 76852,
        "nodeType": "PragmaDirective",
        "src": "32:23:337",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 76853,
        "nodeType": "ImportDirective",
        "src": "57:56:337",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 76956,
        "sourceUnit": 45208,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 76854,
        "nodeType": "ImportDirective",
        "src": "114:31:337",
        "nodes": [],
        "absolutePath": "src/interfaces/vaults/IAggregateVault.sol",
        "file": "./IAggregateVault.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 76956,
        "sourceUnit": 76191,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 76855,
        "nodeType": "ImportDirective",
        "src": "146:44:337",
        "nodes": [],
        "absolutePath": "src/interfaces/utils/IERC20RootVaultHelper.sol",
        "file": "../utils/IERC20RootVaultHelper.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 76956,
        "sourceUnit": 75805,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 76955,
        "nodeType": "ContractDefinition",
        "src": "192:3240:337",
        "nodes": [
          {
            "id": 76876,
            "nodeType": "FunctionDefinition",
            "src": "667:202:337",
            "nodes": [],
            "documentation": {
              "id": 76860,
              "nodeType": "StructuredDocumentation",
              "src": "251:411:337",
              "text": "@notice Initialized a new contract.\n @dev Can only be initialized by vault governance\n @param nft_ NFT of the vault in the VaultRegistry\n @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n @param strategy_ The address that will have approvals for subvaultNfts\n @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault"
            },
            "functionSelector": "6a72a804",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "676:10:337",
            "parameters": {
              "id": 76874,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76862,
                  "mutability": "mutable",
                  "name": "nft_",
                  "nameLocation": "704:4:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76876,
                  "src": "696:12:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76861,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "696:7:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76865,
                  "mutability": "mutable",
                  "name": "vaultTokens_",
                  "nameLocation": "735:12:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76876,
                  "src": "718:29:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76863,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "718:7:337",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 76864,
                    "nodeType": "ArrayTypeName",
                    "src": "718:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76867,
                  "mutability": "mutable",
                  "name": "strategy_",
                  "nameLocation": "765:9:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76876,
                  "src": "757:17:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 76866,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "757:7:337",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76870,
                  "mutability": "mutable",
                  "name": "subvaultNfts_",
                  "nameLocation": "801:13:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76876,
                  "src": "784:30:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76868,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "784:7:337",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 76869,
                    "nodeType": "ArrayTypeName",
                    "src": "784:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76873,
                  "mutability": "mutable",
                  "name": "helper_",
                  "nameLocation": "846:7:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76876,
                  "src": "824:29:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20RootVaultHelper_$75804",
                    "typeString": "contract IERC20RootVaultHelper"
                  },
                  "typeName": {
                    "id": 76872,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 76871,
                      "name": "IERC20RootVaultHelper",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 75804,
                      "src": "824:21:337"
                    },
                    "referencedDeclaration": 75804,
                    "src": "824:21:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20RootVaultHelper_$75804",
                      "typeString": "contract IERC20RootVaultHelper"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "686:173:337"
            },
            "returnParameters": {
              "id": 76875,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "868:0:337"
            },
            "scope": 76955,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76882,
            "nodeType": "FunctionDefinition",
            "src": "930:56:337",
            "nodes": [],
            "documentation": {
              "id": 76877,
              "nodeType": "StructuredDocumentation",
              "src": "875:50:337",
              "text": "@notice The timestamp of last charging of fees"
            },
            "functionSelector": "3da7463f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lastFeeCharge",
            "nameLocation": "939:13:337",
            "parameters": {
              "id": 76878,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "952:2:337"
            },
            "returnParameters": {
              "id": 76881,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76880,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 76882,
                  "src": "978:6:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 76879,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "978:6:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "977:8:337"
            },
            "scope": 76955,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76888,
            "nodeType": "FunctionDefinition",
            "src": "1067:73:337",
            "nodes": [],
            "documentation": {
              "id": 76883,
              "nodeType": "StructuredDocumentation",
              "src": "992:70:337",
              "text": "@notice The timestamp of last updating totalWithdrawnAmounts array"
            },
            "functionSelector": "407a31c0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalWithdrawnAmountsTimestamp",
            "nameLocation": "1076:30:337",
            "parameters": {
              "id": 76884,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1106:2:337"
            },
            "returnParameters": {
              "id": 76887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76886,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 76888,
                  "src": "1132:6:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 76885,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1132:6:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1131:8:337"
            },
            "scope": 76955,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76896,
            "nodeType": "FunctionDefinition",
            "src": "1287:79:337",
            "nodes": [],
            "documentation": {
              "id": 76889,
              "nodeType": "StructuredDocumentation",
              "src": "1146:136:337",
              "text": "@notice Returns value from totalWithdrawnAmounts array by _index\n @param _index The index at which the value will be returned"
            },
            "functionSelector": "151bb8d1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalWithdrawnAmounts",
            "nameLocation": "1296:21:337",
            "parameters": {
              "id": 76892,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76891,
                  "mutability": "mutable",
                  "name": "_index",
                  "nameLocation": "1326:6:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76896,
                  "src": "1318:14:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76890,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1318:7:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1317:16:337"
            },
            "returnParameters": {
              "id": 76895,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76894,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 76896,
                  "src": "1357:7:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76893,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1357:7:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1356:9:337"
            },
            "scope": 76955,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76902,
            "nodeType": "FunctionDefinition",
            "src": "1446:67:337",
            "nodes": [],
            "documentation": {
              "id": 76897,
              "nodeType": "StructuredDocumentation",
              "src": "1372:69:337",
              "text": "@notice LP parameter that controls the charge in performance fees"
            },
            "functionSelector": "24004a66",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lpPriceHighWaterMarkD18",
            "nameLocation": "1455:23:337",
            "parameters": {
              "id": 76898,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1478:2:337"
            },
            "returnParameters": {
              "id": 76901,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76900,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 76902,
                  "src": "1504:7:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76899,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1504:7:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1503:9:337"
            },
            "scope": 76955,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76909,
            "nodeType": "FunctionDefinition",
            "src": "1621:72:337",
            "nodes": [],
            "documentation": {
              "id": 76903,
              "nodeType": "StructuredDocumentation",
              "src": "1519:97:337",
              "text": "@notice List of addresses of depositors from which interaction with private vaults is allowed"
            },
            "functionSelector": "a09eb0e7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "depositorsAllowlist",
            "nameLocation": "1630:19:337",
            "parameters": {
              "id": 76904,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1649:2:337"
            },
            "returnParameters": {
              "id": 76908,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76907,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 76909,
                  "src": "1675:16:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76905,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1675:7:337",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 76906,
                    "nodeType": "ArrayTypeName",
                    "src": "1675:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1674:18:337"
            },
            "scope": 76955,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76916,
            "nodeType": "FunctionDefinition",
            "src": "1902:74:337",
            "nodes": [],
            "documentation": {
              "id": 76910,
              "nodeType": "StructuredDocumentation",
              "src": "1699:198:337",
              "text": "@notice Add new depositors in the depositorsAllowlist\n @param depositors Array of new depositors\n @dev The action can be done only by user with admins, owners or by approved rights"
            },
            "functionSelector": "91b7ab47",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addDepositorsToAllowlist",
            "nameLocation": "1911:24:337",
            "parameters": {
              "id": 76914,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76913,
                  "mutability": "mutable",
                  "name": "depositors",
                  "nameLocation": "1955:10:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76916,
                  "src": "1936:29:337",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76911,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1936:7:337",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 76912,
                    "nodeType": "ArrayTypeName",
                    "src": "1936:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1935:31:337"
            },
            "returnParameters": {
              "id": 76915,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1975:0:337"
            },
            "scope": 76955,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76923,
            "nodeType": "FunctionDefinition",
            "src": "2193:79:337",
            "nodes": [],
            "documentation": {
              "id": 76917,
              "nodeType": "StructuredDocumentation",
              "src": "1982:206:337",
              "text": "@notice Remove depositors from the depositorsAllowlist\n @param depositors Array of depositors for remove\n @dev The action can be done only by user with admins, owners or by approved rights"
            },
            "functionSelector": "e273d23e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeDepositorsFromAllowlist",
            "nameLocation": "2202:29:337",
            "parameters": {
              "id": 76921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76920,
                  "mutability": "mutable",
                  "name": "depositors",
                  "nameLocation": "2251:10:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76923,
                  "src": "2232:29:337",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76918,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2232:7:337",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 76919,
                    "nodeType": "ArrayTypeName",
                    "src": "2232:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2231:31:337"
            },
            "returnParameters": {
              "id": 76922,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2271:0:337"
            },
            "scope": 76955,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76937,
            "nodeType": "FunctionDefinition",
            "src": "2601:181:337",
            "nodes": [],
            "documentation": {
              "id": 76924,
              "nodeType": "StructuredDocumentation",
              "src": "2278:318:337",
              "text": "@notice The function of depositing the amount of tokens in exchange\n @param tokenAmounts Array of amounts of tokens for deposit\n @param minLpTokens Minimal value of LP tokens\n @param vaultOptions Options of vaults\n @return actualTokenAmounts Arrays of actual token amounts after deposit"
            },
            "functionSelector": "54a3f474",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nameLocation": "2610:7:337",
            "parameters": {
              "id": 76932,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76927,
                  "mutability": "mutable",
                  "name": "tokenAmounts",
                  "nameLocation": "2644:12:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76937,
                  "src": "2627:29:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76925,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2627:7:337",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 76926,
                    "nodeType": "ArrayTypeName",
                    "src": "2627:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76929,
                  "mutability": "mutable",
                  "name": "minLpTokens",
                  "nameLocation": "2674:11:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76937,
                  "src": "2666:19:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76928,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2666:7:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76931,
                  "mutability": "mutable",
                  "name": "vaultOptions",
                  "nameLocation": "2708:12:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76937,
                  "src": "2695:25:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 76930,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2695:5:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2617:109:337"
            },
            "returnParameters": {
              "id": 76936,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76935,
                  "mutability": "mutable",
                  "name": "actualTokenAmounts",
                  "nameLocation": "2762:18:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76937,
                  "src": "2745:35:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76933,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2745:7:337",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 76934,
                    "nodeType": "ArrayTypeName",
                    "src": "2745:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2744:37:337"
            },
            "scope": 76955,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 76954,
            "nodeType": "FunctionDefinition",
            "src": "3220:210:337",
            "nodes": [],
            "documentation": {
              "id": 76938,
              "nodeType": "StructuredDocumentation",
              "src": "2788:427:337",
              "text": "@notice The function of withdrawing the amount of tokens in exchange\n @param to Address to which the withdrawal will be sent\n @param lpTokenAmount LP token amount, that requested for withdraw\n @param minTokenAmounts Array of minmal remining wtoken amounts after withdrawal\n @param vaultsOptions Options of vaults\n @return actualTokenAmounts Arrays of actual token amounts after withdrawal"
            },
            "functionSelector": "82491fac",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "3229:8:337",
            "parameters": {
              "id": 76949,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76940,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "3255:2:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76954,
                  "src": "3247:10:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 76939,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3247:7:337",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76942,
                  "mutability": "mutable",
                  "name": "lpTokenAmount",
                  "nameLocation": "3275:13:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76954,
                  "src": "3267:21:337",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76941,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3267:7:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76945,
                  "mutability": "mutable",
                  "name": "minTokenAmounts",
                  "nameLocation": "3315:15:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76954,
                  "src": "3298:32:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76943,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3298:7:337",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 76944,
                    "nodeType": "ArrayTypeName",
                    "src": "3298:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76948,
                  "mutability": "mutable",
                  "name": "vaultsOptions",
                  "nameLocation": "3355:13:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76954,
                  "src": "3340:28:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76946,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "3340:5:337",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 76947,
                    "nodeType": "ArrayTypeName",
                    "src": "3340:7:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3237:137:337"
            },
            "returnParameters": {
              "id": 76953,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76952,
                  "mutability": "mutable",
                  "name": "actualTokenAmounts",
                  "nameLocation": "3410:18:337",
                  "nodeType": "VariableDeclaration",
                  "scope": 76954,
                  "src": "3393:35:337",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76950,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3393:7:337",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 76951,
                    "nodeType": "ArrayTypeName",
                    "src": "3393:9:337",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3392:37:337"
            },
            "scope": 76955,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 76856,
              "name": "IAggregateVault",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 76190,
              "src": "221:15:337"
            },
            "id": 76857,
            "nodeType": "InheritanceSpecifier",
            "src": "221:15:337"
          },
          {
            "baseName": {
              "id": 76858,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 45207,
              "src": "238:6:337"
            },
            "id": 76859,
            "nodeType": "InheritanceSpecifier",
            "src": "238:6:337"
          }
        ],
        "canonicalName": "IERC20RootVault",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          76955,
          45207,
          76190,
          78702,
          78599,
          48073
        ],
        "name": "IERC20RootVault",
        "nameLocation": "202:15:337",
        "scope": 76956,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 337
}