{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        }
      ],
      "name": "getInnerCumulatives",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "innerSecondsSpentPerLiquidity",
          "type": "uint160"
        },
        {
          "internalType": "uint32",
          "name": "innerSecondsSpent",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getInnerCumulatives(int24,int24)": "920c34e5"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"}],\"name\":\"getInnerCumulatives\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"innerSecondsSpentPerLiquidity\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"innerSecondsSpent\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Credit to Uniswap Labs under GPL-2.0-or-later license: https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\",\"kind\":\"dev\",\"methods\":{\"getInnerCumulatives(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"bottomTick\":\"The lower tick of the range\",\"topTick\":\"The upper tick of the range\"},\"returns\":{\"innerSecondsSpent\":\"The snapshot of the number of seconds during which the price was in this range\",\"innerSecondsSpentPerLiquidity\":\"The snapshot of seconds per liquidity for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getInnerCumulatives(int24,int24)\":{\"notice\":\"Returns a snapshot of seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol\":\"IAlgebraPoolDerivedState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol\":{\"keccak256\":\"0x3068b5e85207a209e841214738a2c79c5eebe1ba81ce5427f2d0598582fe7f32\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://961752a020e3e128bb49496dfac03ab6da8cad8675dc3947d7ed493a278bc9ed\",\"dweb:/ipfs/QmRu23SksgKD7G2TQsJBmhWJz1FJuuD78SAFGebYRPUvTQ\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getInnerCumulatives",
          "outputs": [
            {
              "internalType": "uint160",
              "name": "innerSecondsSpentPerLiquidity",
              "type": "uint160"
            },
            {
              "internalType": "uint32",
              "name": "innerSecondsSpent",
              "type": "uint32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getInnerCumulatives(int24,int24)": {
            "details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
            "params": {
              "bottomTick": "The lower tick of the range",
              "topTick": "The upper tick of the range"
            },
            "returns": {
              "innerSecondsSpent": "The snapshot of the number of seconds during which the price was in this range",
              "innerSecondsSpentPerLiquidity": "The snapshot of seconds per liquidity for the range"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getInnerCumulatives(int24,int24)": {
            "notice": "Returns a snapshot of seconds per liquidity and seconds inside a tick range"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol": "IAlgebraPoolDerivedState"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol": {
        "keccak256": "0x3068b5e85207a209e841214738a2c79c5eebe1ba81ce5427f2d0598582fe7f32",
        "urls": [
          "bzz-raw://961752a020e3e128bb49496dfac03ab6da8cad8675dc3947d7ed493a278bc9ed",
          "dweb:/ipfs/QmRu23SksgKD7G2TQsJBmhWJz1FJuuD78SAFGebYRPUvTQ"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolDerivedState.sol",
    "id": 55992,
    "exportedSymbols": {
      "IAlgebraPoolDerivedState": [
        55991
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:1294:86",
    "nodes": [
      {
        "id": 55977,
        "nodeType": "PragmaDirective",
        "src": "45:23:86",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 55991,
        "nodeType": "ContractDefinition",
        "src": "426:912:86",
        "nodes": [
          {
            "id": 55990,
            "nodeType": "FunctionDefinition",
            "src": "1164:172:86",
            "nodes": [],
            "documentation": {
              "id": 55979,
              "nodeType": "StructuredDocumentation",
              "src": "467:692:86",
              "text": "@notice Returns a snapshot of seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param bottomTick The lower tick of the range\n @param topTick The upper tick of the range\n @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\n @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range"
            },
            "functionSelector": "920c34e5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getInnerCumulatives",
            "nameLocation": "1173:19:86",
            "parameters": {
              "id": 55984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55981,
                  "mutability": "mutable",
                  "name": "bottomTick",
                  "nameLocation": "1208:10:86",
                  "nodeType": "VariableDeclaration",
                  "scope": 55990,
                  "src": "1202:16:86",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int24",
                    "typeString": "int24"
                  },
                  "typeName": {
                    "id": 55980,
                    "name": "int24",
                    "nodeType": "ElementaryTypeName",
                    "src": "1202:5:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int24",
                      "typeString": "int24"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55983,
                  "mutability": "mutable",
                  "name": "topTick",
                  "nameLocation": "1234:7:86",
                  "nodeType": "VariableDeclaration",
                  "scope": 55990,
                  "src": "1228:13:86",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int24",
                    "typeString": "int24"
                  },
                  "typeName": {
                    "id": 55982,
                    "name": "int24",
                    "nodeType": "ElementaryTypeName",
                    "src": "1228:5:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int24",
                      "typeString": "int24"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1192:55:86"
            },
            "returnParameters": {
              "id": 55989,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55986,
                  "mutability": "mutable",
                  "name": "innerSecondsSpentPerLiquidity",
                  "nameLocation": "1279:29:86",
                  "nodeType": "VariableDeclaration",
                  "scope": 55990,
                  "src": "1271:37:86",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint160",
                    "typeString": "uint160"
                  },
                  "typeName": {
                    "id": 55985,
                    "name": "uint160",
                    "nodeType": "ElementaryTypeName",
                    "src": "1271:7:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint160",
                      "typeString": "uint160"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55988,
                  "mutability": "mutable",
                  "name": "innerSecondsSpent",
                  "nameLocation": "1317:17:86",
                  "nodeType": "VariableDeclaration",
                  "scope": 55990,
                  "src": "1310:24:86",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 55987,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1310:6:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1270:65:86"
            },
            "scope": 55991,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IAlgebraPoolDerivedState",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 55978,
          "nodeType": "StructuredDocumentation",
          "src": "70:356:86",
          "text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs.\n @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          55991
        ],
        "name": "IAlgebraPoolDerivedState",
        "nameLocation": "436:24:86",
        "scope": 55992,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 86
}