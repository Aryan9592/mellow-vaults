{
  "abi": [
    {
      "inputs": [],
      "name": "communityVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataStorageOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidityPerTick",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "communityVault()": "53e97868",
    "dataStorageOperator()": "29047dfa",
    "factory()": "c45a0155",
    "maxLiquidityPerTick()": "70cf754a",
    "token0()": "0dfe1681",
    "token1()": "d21220a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"communityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataStorageOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Credit to Uniswap Labs under GPL-2.0-or-later license: https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\",\"kind\":\"dev\",\"methods\":{\"communityVault()\":{\"returns\":{\"_0\":\"The communityVault address\"}},\"dataStorageOperator()\":{\"returns\":{\"_0\":\"The operator address\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"communityVault()\":{\"notice\":\"The contract to which community fees are transferred\"},\"dataStorageOperator()\":{\"notice\":\"The contract that stores all the timepoints and can perform actions with them\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol\":\"IAlgebraPoolImmutables\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol\":{\"keccak256\":\"0x527bd2f402e3c6b01107e70bcb6d159937de74663a0d914aefee924672facc1d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bccbcf10e3726243f354853cfed495970731a292ff12be715fd75d8f726d48f\",\"dweb:/ipfs/QmQdh7AuAYt8uq72DmEHNgqHmz66AbkEdZXxevkgo13pdc\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "communityVault",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "dataStorageOperator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "factory",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "maxLiquidityPerTick",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token0",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token1",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "communityVault()": {
            "returns": {
              "_0": "The communityVault address"
            }
          },
          "dataStorageOperator()": {
            "returns": {
              "_0": "The operator address"
            }
          },
          "factory()": {
            "returns": {
              "_0": "The contract address"
            }
          },
          "maxLiquidityPerTick()": {
            "details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
            "returns": {
              "_0": "The max amount of liquidity per tick"
            }
          },
          "token0()": {
            "returns": {
              "_0": "The token contract address"
            }
          },
          "token1()": {
            "returns": {
              "_0": "The token contract address"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "communityVault()": {
            "notice": "The contract to which community fees are transferred"
          },
          "dataStorageOperator()": {
            "notice": "The contract that stores all the timepoints and can perform actions with them"
          },
          "factory()": {
            "notice": "The contract that deployed the pool, which must adhere to the IAlgebraFactory interface"
          },
          "maxLiquidityPerTick()": {
            "notice": "The maximum amount of position liquidity that can use any tick in the range"
          },
          "token0()": {
            "notice": "The first of the two tokens of the pool, sorted by address"
          },
          "token1()": {
            "notice": "The second of the two tokens of the pool, sorted by address"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol": "IAlgebraPoolImmutables"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol": {
        "keccak256": "0x527bd2f402e3c6b01107e70bcb6d159937de74663a0d914aefee924672facc1d",
        "urls": [
          "bzz-raw://4bccbcf10e3726243f354853cfed495970731a292ff12be715fd75d8f726d48f",
          "dweb:/ipfs/QmQdh7AuAYt8uq72DmEHNgqHmz66AbkEdZXxevkgo13pdc"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/algebrav2/pool/IAlgebraPoolImmutables.sol",
    "id": 56147,
    "exportedSymbols": {
      "IAlgebraPoolImmutables": [
        56146
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:1596:88",
    "nodes": [
      {
        "id": 56108,
        "nodeType": "PragmaDirective",
        "src": "45:23:88",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 56146,
        "nodeType": "ContractDefinition",
        "src": "245:1395:88",
        "nodes": [
          {
            "id": 56115,
            "nodeType": "FunctionDefinition",
            "src": "415:63:88",
            "nodes": [],
            "documentation": {
              "id": 56110,
              "nodeType": "StructuredDocumentation",
              "src": "284:126:88",
              "text": "@notice The contract that stores all the timepoints and can perform actions with them\n @return The operator address"
            },
            "functionSelector": "29047dfa",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "dataStorageOperator",
            "nameLocation": "424:19:88",
            "parameters": {
              "id": 56111,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "443:2:88"
            },
            "returnParameters": {
              "id": 56114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 56113,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 56115,
                  "src": "469:7:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 56112,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "469:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "468:9:88"
            },
            "scope": 56146,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 56121,
            "nodeType": "FunctionDefinition",
            "src": "625:51:88",
            "nodes": [],
            "documentation": {
              "id": 56116,
              "nodeType": "StructuredDocumentation",
              "src": "484:136:88",
              "text": "@notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\n @return The contract address"
            },
            "functionSelector": "c45a0155",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "factory",
            "nameLocation": "634:7:88",
            "parameters": {
              "id": 56117,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "641:2:88"
            },
            "returnParameters": {
              "id": 56120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 56119,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 56121,
                  "src": "667:7:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 56118,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "667:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "666:9:88"
            },
            "scope": 56146,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 56127,
            "nodeType": "FunctionDefinition",
            "src": "800:50:88",
            "nodes": [],
            "documentation": {
              "id": 56122,
              "nodeType": "StructuredDocumentation",
              "src": "682:113:88",
              "text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
            },
            "functionSelector": "0dfe1681",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "token0",
            "nameLocation": "809:6:88",
            "parameters": {
              "id": 56123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "815:2:88"
            },
            "returnParameters": {
              "id": 56126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 56125,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 56127,
                  "src": "841:7:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 56124,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "841:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "840:9:88"
            },
            "scope": 56146,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 56133,
            "nodeType": "FunctionDefinition",
            "src": "975:50:88",
            "nodes": [],
            "documentation": {
              "id": 56128,
              "nodeType": "StructuredDocumentation",
              "src": "856:114:88",
              "text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
            },
            "functionSelector": "d21220a7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "token1",
            "nameLocation": "984:6:88",
            "parameters": {
              "id": 56129,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "990:2:88"
            },
            "returnParameters": {
              "id": 56132,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 56131,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 56133,
                  "src": "1016:7:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 56130,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1016:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1015:9:88"
            },
            "scope": 56146,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 56139,
            "nodeType": "FunctionDefinition",
            "src": "1143:58:88",
            "nodes": [],
            "documentation": {
              "id": 56134,
              "nodeType": "StructuredDocumentation",
              "src": "1031:107:88",
              "text": "@notice The contract to which community fees are transferred\n @return The communityVault address"
            },
            "functionSelector": "53e97868",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "communityVault",
            "nameLocation": "1152:14:88",
            "parameters": {
              "id": 56135,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1166:2:88"
            },
            "returnParameters": {
              "id": 56138,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 56137,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 56139,
                  "src": "1192:7:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 56136,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1192:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1191:9:88"
            },
            "scope": 56146,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 56145,
            "nodeType": "FunctionDefinition",
            "src": "1575:63:88",
            "nodes": [],
            "documentation": {
              "id": 56140,
              "nodeType": "StructuredDocumentation",
              "src": "1207:363:88",
              "text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
            },
            "functionSelector": "70cf754a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "maxLiquidityPerTick",
            "nameLocation": "1584:19:88",
            "parameters": {
              "id": 56141,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1603:2:88"
            },
            "returnParameters": {
              "id": 56144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 56143,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 56145,
                  "src": "1629:7:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 56142,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1629:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1628:9:88"
            },
            "scope": 56146,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IAlgebraPoolImmutables",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 56109,
          "nodeType": "StructuredDocumentation",
          "src": "70:175:88",
          "text": "@title Pool state that never changes\n @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          56146
        ],
        "name": "IAlgebraPoolImmutables",
        "nameLocation": "255:22:88",
        "scope": 56147,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 88
}