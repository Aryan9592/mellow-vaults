{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "bottomTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "topTick",
          "type": "int24"
        }
      ],
      "name": "getInnerCumulatives",
      "outputs": [
        {
          "internalType": "int56",
          "name": "innerTickCumulative",
          "type": "int56"
        },
        {
          "internalType": "uint160",
          "name": "innerSecondsSpentPerLiquidity",
          "type": "uint160"
        },
        {
          "internalType": "uint32",
          "name": "innerSecondsSpent",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "secondsAgos",
          "type": "uint32[]"
        }
      ],
      "name": "getTimepoints",
      "outputs": [
        {
          "internalType": "int56[]",
          "name": "tickCumulatives",
          "type": "int56[]"
        },
        {
          "internalType": "uint160[]",
          "name": "secondsPerLiquidityCumulatives",
          "type": "uint160[]"
        },
        {
          "internalType": "uint112[]",
          "name": "volatilityCumulatives",
          "type": "uint112[]"
        },
        {
          "internalType": "uint256[]",
          "name": "volumePerAvgLiquiditys",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getInnerCumulatives(int24,int24)": "920c34e5",
    "getTimepoints(uint32[])": "9d3a5241"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"}],\"name\":\"getInnerCumulatives\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"innerTickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"innerSecondsSpentPerLiquidity\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"innerSecondsSpent\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"getTimepoints\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulatives\",\"type\":\"uint160[]\"},{\"internalType\":\"uint112[]\",\"name\":\"volatilityCumulatives\",\"type\":\"uint112[]\"},{\"internalType\":\"uint256[]\",\"name\":\"volumePerAvgLiquiditys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Credit to Uniswap Labs under GPL-2.0-or-later license: https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\",\"kind\":\"dev\",\"methods\":{\"getInnerCumulatives(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"bottomTick\":\"The lower tick of the range\",\"topTick\":\"The upper tick of the range\"},\"returns\":{\"innerSecondsSpent\":\"The snapshot of the number of seconds during which the price was in this range\",\"innerSecondsSpentPerLiquidity\":\"The snapshot of seconds per liquidity for the range\",\"innerTickCumulative\":\"The snapshot of the tick accumulator for the range\"}},\"getTimepoints(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulatives\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\",\"volatilityCumulatives\":\"Cumulative standard deviation as of each `secondsAgos`\",\"volumePerAvgLiquiditys\":\"Cumulative swap volume per liquidity as of each `secondsAgos`\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getInnerCumulatives(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"getTimepoints(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/quickswap/IAlgebraPoolDerivedState.sol\":\"IAlgebraPoolDerivedState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/quickswap/IAlgebraPoolDerivedState.sol\":{\"keccak256\":\"0xa75adbad960516b5c255b734caa01a970ff1ba27d7a7812e7cb80b95f09829c5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9fdb3c44733dddd52b82be55f816e1a8c2bb1c222dc80e373dc9b4783b19bb0\",\"dweb:/ipfs/QmbULE7ZEyYutnCGH9ezrfVc4LNqyptwSjBYPtkgsToQD1\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "bottomTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "topTick",
              "type": "int24"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getInnerCumulatives",
          "outputs": [
            {
              "internalType": "int56",
              "name": "innerTickCumulative",
              "type": "int56"
            },
            {
              "internalType": "uint160",
              "name": "innerSecondsSpentPerLiquidity",
              "type": "uint160"
            },
            {
              "internalType": "uint32",
              "name": "innerSecondsSpent",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32[]",
              "name": "secondsAgos",
              "type": "uint32[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTimepoints",
          "outputs": [
            {
              "internalType": "int56[]",
              "name": "tickCumulatives",
              "type": "int56[]"
            },
            {
              "internalType": "uint160[]",
              "name": "secondsPerLiquidityCumulatives",
              "type": "uint160[]"
            },
            {
              "internalType": "uint112[]",
              "name": "volatilityCumulatives",
              "type": "uint112[]"
            },
            {
              "internalType": "uint256[]",
              "name": "volumePerAvgLiquiditys",
              "type": "uint256[]"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getInnerCumulatives(int24,int24)": {
            "details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
            "params": {
              "bottomTick": "The lower tick of the range",
              "topTick": "The upper tick of the range"
            },
            "returns": {
              "innerSecondsSpent": "The snapshot of the number of seconds during which the price was in this range",
              "innerSecondsSpentPerLiquidity": "The snapshot of seconds per liquidity for the range",
              "innerTickCumulative": "The snapshot of the tick accumulator for the range"
            }
          },
          "getTimepoints(uint32[])": {
            "details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
            "params": {
              "secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
            },
            "returns": {
              "secondsPerLiquidityCumulatives": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
              "tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp",
              "volatilityCumulatives": "Cumulative standard deviation as of each `secondsAgos`",
              "volumePerAvgLiquiditys": "Cumulative swap volume per liquidity as of each `secondsAgos`"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getInnerCumulatives(int24,int24)": {
            "notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
          },
          "getTimepoints(uint32[])": {
            "notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/quickswap/IAlgebraPoolDerivedState.sol": "IAlgebraPoolDerivedState"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/quickswap/IAlgebraPoolDerivedState.sol": {
        "keccak256": "0xa75adbad960516b5c255b734caa01a970ff1ba27d7a7812e7cb80b95f09829c5",
        "urls": [
          "bzz-raw://f9fdb3c44733dddd52b82be55f816e1a8c2bb1c222dc80e373dc9b4783b19bb0",
          "dweb:/ipfs/QmbULE7ZEyYutnCGH9ezrfVc4LNqyptwSjBYPtkgsToQD1"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/quickswap/IAlgebraPoolDerivedState.sol",
    "id": 72328,
    "exportedSymbols": {
      "IAlgebraPoolDerivedState": [
        72327
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:3058:276",
    "nodes": [
      {
        "id": 72292,
        "nodeType": "PragmaDirective",
        "src": "45:23:276",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 72327,
        "nodeType": "ContractDefinition",
        "src": "429:2673:276",
        "nodes": [
          {
            "id": 72312,
            "nodeType": "FunctionDefinition",
            "src": "1714:321:276",
            "nodes": [],
            "documentation": {
              "id": 72294,
              "nodeType": "StructuredDocumentation",
              "src": "470:1239:276",
              "text": " @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\n from the current block timestamp\n @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\n @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`"
            },
            "functionSelector": "9d3a5241",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTimepoints",
            "nameLocation": "1723:13:276",
            "parameters": {
              "id": 72298,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72297,
                  "mutability": "mutable",
                  "name": "secondsAgos",
                  "nameLocation": "1755:11:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72312,
                  "src": "1737:29:276",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
                    "typeString": "uint32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 72295,
                      "name": "uint32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1737:6:276",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "id": 72296,
                    "nodeType": "ArrayTypeName",
                    "src": "1737:8:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                      "typeString": "uint32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1736:31:276"
            },
            "returnParameters": {
              "id": 72311,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72301,
                  "mutability": "mutable",
                  "name": "tickCumulatives",
                  "nameLocation": "1843:15:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72312,
                  "src": "1828:30:276",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
                    "typeString": "int56[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 72299,
                      "name": "int56",
                      "nodeType": "ElementaryTypeName",
                      "src": "1828:5:276",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int56",
                        "typeString": "int56"
                      }
                    },
                    "id": 72300,
                    "nodeType": "ArrayTypeName",
                    "src": "1828:7:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
                      "typeString": "int56[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72304,
                  "mutability": "mutable",
                  "name": "secondsPerLiquidityCumulatives",
                  "nameLocation": "1889:30:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72312,
                  "src": "1872:47:276",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
                    "typeString": "uint160[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 72302,
                      "name": "uint160",
                      "nodeType": "ElementaryTypeName",
                      "src": "1872:7:276",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint160",
                        "typeString": "uint160"
                      }
                    },
                    "id": 72303,
                    "nodeType": "ArrayTypeName",
                    "src": "1872:9:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
                      "typeString": "uint160[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72307,
                  "mutability": "mutable",
                  "name": "volatilityCumulatives",
                  "nameLocation": "1950:21:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72312,
                  "src": "1933:38:276",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint112_$dyn_memory_ptr",
                    "typeString": "uint112[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 72305,
                      "name": "uint112",
                      "nodeType": "ElementaryTypeName",
                      "src": "1933:7:276",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint112",
                        "typeString": "uint112"
                      }
                    },
                    "id": 72306,
                    "nodeType": "ArrayTypeName",
                    "src": "1933:9:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint112_$dyn_storage_ptr",
                      "typeString": "uint112[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72310,
                  "mutability": "mutable",
                  "name": "volumePerAvgLiquiditys",
                  "nameLocation": "2002:22:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72312,
                  "src": "1985:39:276",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 72308,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1985:7:276",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 72309,
                    "nodeType": "ArrayTypeName",
                    "src": "1985:9:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1814:220:276"
            },
            "scope": 72327,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72326,
            "nodeType": "FunctionDefinition",
            "src": "2853:247:276",
            "nodes": [],
            "documentation": {
              "id": 72313,
              "nodeType": "StructuredDocumentation",
              "src": "2041:807:276",
              "text": " @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param bottomTick The lower tick of the range\n @param topTick The upper tick of the range\n @return innerTickCumulative The snapshot of the tick accumulator for the range\n @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\n @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range"
            },
            "functionSelector": "920c34e5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getInnerCumulatives",
            "nameLocation": "2862:19:276",
            "parameters": {
              "id": 72318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72315,
                  "mutability": "mutable",
                  "name": "bottomTick",
                  "nameLocation": "2888:10:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72326,
                  "src": "2882:16:276",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int24",
                    "typeString": "int24"
                  },
                  "typeName": {
                    "id": 72314,
                    "name": "int24",
                    "nodeType": "ElementaryTypeName",
                    "src": "2882:5:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int24",
                      "typeString": "int24"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72317,
                  "mutability": "mutable",
                  "name": "topTick",
                  "nameLocation": "2906:7:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72326,
                  "src": "2900:13:276",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int24",
                    "typeString": "int24"
                  },
                  "typeName": {
                    "id": 72316,
                    "name": "int24",
                    "nodeType": "ElementaryTypeName",
                    "src": "2900:5:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int24",
                      "typeString": "int24"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2881:33:276"
            },
            "returnParameters": {
              "id": 72325,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72320,
                  "mutability": "mutable",
                  "name": "innerTickCumulative",
                  "nameLocation": "2981:19:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72326,
                  "src": "2975:25:276",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int56",
                    "typeString": "int56"
                  },
                  "typeName": {
                    "id": 72319,
                    "name": "int56",
                    "nodeType": "ElementaryTypeName",
                    "src": "2975:5:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int56",
                      "typeString": "int56"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72322,
                  "mutability": "mutable",
                  "name": "innerSecondsSpentPerLiquidity",
                  "nameLocation": "3022:29:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72326,
                  "src": "3014:37:276",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint160",
                    "typeString": "uint160"
                  },
                  "typeName": {
                    "id": 72321,
                    "name": "uint160",
                    "nodeType": "ElementaryTypeName",
                    "src": "3014:7:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint160",
                      "typeString": "uint160"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72324,
                  "mutability": "mutable",
                  "name": "innerSecondsSpent",
                  "nameLocation": "3072:17:276",
                  "nodeType": "VariableDeclaration",
                  "scope": 72326,
                  "src": "3065:24:276",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 72323,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3065:6:276",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2961:138:276"
            },
            "scope": 72327,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IAlgebraPoolDerivedState",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 72293,
          "nodeType": "StructuredDocumentation",
          "src": "70:358:276",
          "text": " @title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs.\n @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          72327
        ],
        "name": "IAlgebraPoolDerivedState",
        "nameLocation": "439:24:276",
        "scope": 72328,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 276
}