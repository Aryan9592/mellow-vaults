{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedGaugeType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "contract ILiquidityGaugeFactory",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "GaugeFactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedGaugeType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "GaugeTypeAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "addGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "addGaugeType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "getActionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorizerAdaptorEntrypoint",
      "outputs": [
        {
          "internalType": "contract IAuthorizerAdaptorEntrypoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "getFactoryForGaugeType",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGaugeController",
      "outputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getGaugeTypeAtIndex",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGaugeTypes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGaugeTypesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "isGaugeFromValidFactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "isValidGaugeType",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILiquidityGaugeFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "setGaugeFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addGauge(address,string)": "5bf71434",
    "addGaugeType(string)": "231856fa",
    "getActionId(bytes4)": "851c1bb3",
    "getAuthorizerAdaptorEntrypoint()": "7afcf0e6",
    "getFactoryForGaugeType(string)": "572cb6a5",
    "getGaugeController()": "58de9ade",
    "getGaugeTypeAtIndex(uint256)": "08ceb030",
    "getGaugeTypes()": "afcb1a86",
    "getGaugeTypesCount()": "96432aeb",
    "isGaugeFromValidFactory(address,string)": "a0ade33e",
    "isValidGaugeType(string)": "16e772bc",
    "setGaugeFactory(address,string)": "066edd7a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedGaugeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract ILiquidityGaugeFactory\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"GaugeFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedGaugeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"GaugeTypeAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"addGaugeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizerAdaptorEntrypoint\",\"outputs\":[{\"internalType\":\"contract IAuthorizerAdaptorEntrypoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"getFactoryForGaugeType\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGaugeController\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGaugeTypeAtIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGaugeTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGaugeTypesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"isGaugeFromValidFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"isValidGaugeType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityGaugeFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"setGaugeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addGauge(address,string)\":{\"details\":\"When adding gauges for L2 networks or sidechains, this must be called with the address of the *root* gauge which is deployed on Ethereum. It should *not* be called with the address of the child gauge which is deployed on the L2 / sidechain. If the gauge added is an Ethereum gauge, it cannot be a gauge for the 80BAL-20WETH pool.\"},\"addGaugeType(string)\":{\"params\":{\"gaugeType\":\"Name of the new gauge type.\"}},\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"setGaugeFactory(address,string)\":{\"details\":\"This function can either set a new factory or replace an existing one.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGauge(address,string)\":{\"notice\":\"Adds a new gauge to the GaugeController for the given `gaugeType` type.\"},\"addGaugeType(string)\":{\"notice\":\"Adds a new `gaugeType` corresponding to a new network, which allows setting a factory and adding gauges for the type later on.\"},\"getAuthorizerAdaptorEntrypoint()\":{\"notice\":\"Returns the address of the Authorizer adaptor entrypoint contract.\"},\"getFactoryForGaugeType(string)\":{\"notice\":\"Returns the factory for gauge type `gaugeType`.\"},\"getGaugeController()\":{\"notice\":\"Returns the address of the Gauge Controller\"},\"getGaugeTypeAtIndex(uint256)\":{\"notice\":\"Returns gauge type name registered at the given index.\"},\"getGaugeTypes()\":{\"notice\":\"Returns the list of gauge types.\"},\"getGaugeTypesCount()\":{\"notice\":\"Returns the number of gauge types.\"},\"isGaugeFromValidFactory(address,string)\":{\"notice\":\"Returns true if `gauge` has been deployed by the factory for the gauge type `gaugeType`. Note that if a gauge type's factory changes then this function will start returning false for previously valid gauges.\"},\"isValidGaugeType(string)\":{\"notice\":\"Returns true if the given gauge type is valid; false otherwise.\"},\"setGaugeFactory(address,string)\":{\"notice\":\"Sets `factory` as the allowlisted factory contract for gauges with type `gaugeType`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol\":\"IGaugeAdder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptor.sol\":{\"keccak256\":\"0x1a9bad00c0084984cd3364cfcdeaece137157816fe8078f706ed78adc803cad7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d69ccb7c506a7b56fe8f4e59ee10595d3e5cbb881e8215fdda879ec7bf34a5c6\",\"dweb:/ipfs/QmZc3HoxcdRivJ8xePXBxceAtvxo8LA7P8Rf3pjjED9e7y\"]},\"src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptorEntrypoint.sol\":{\"keccak256\":\"0xe2b137c6c84834d761ceb439caa7c7a614da23228b151ea14ed9d3bf794e8f16\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4686104e5ea47c949c48f3aeb1d930b1a8c8c956bc017c6d06f8db0b002888d1\",\"dweb:/ipfs/QmcfFPtgw5CnQA5fn7TTP1M45NEq1FPtJaA6D5Xh3QfLAB\"]},\"src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol\":{\"keccak256\":\"0x0c9bc1023d642e781ac95d2588ab6996bd5ad18ae59e80fac176b1528dbdd823\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a09d3c7c2e64aeee3a6bef19cc07c6c65c1ac39bd82ba57c80be868d89654cbc\",\"dweb:/ipfs/QmSGy6T7VPzeWJfKqQEpFgKgVnvSH6ziXAFoKDMRh5q7P8\"]},\"src/interfaces/external/balancer/liquidity-mining/IGaugeController.sol\":{\"keccak256\":\"0xe5fb4837f4dbe3d0a3a00ca489ebfa2b51cf4145a9a1b8c77c1ad7caeb9ad2e4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://120b30fc0e0aa38d49cb3679d2456847e25ed05c281834e414436f0a9abe4e90\",\"dweb:/ipfs/QmNr6PJJJj36BtaMnjxWEg7AbPZpXvzWm57V8YGJAVfcf3\"]},\"src/interfaces/external/balancer/liquidity-mining/ILiquidityGauge.sol\":{\"keccak256\":\"0xa22f0c0868adb9d06d097ecb0a8d8370a6e59d223ef1e07a58340191c402e9ea\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://558942e9f7ff6c6f2becffc28da21bf897e043ceea6bed95d2a362e0eceedbe6\",\"dweb:/ipfs/QmU51CezK36UmBpArAcBmXrDmC5ozDmTrconGfj8pr8NYL\"]},\"src/interfaces/external/balancer/liquidity-mining/ILiquidityGaugeFactory.sol\":{\"keccak256\":\"0xda0ac94f1b3f6025bfa0e4ddc446d372129042c5c7c22a43364db0c7b27cccf0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3e0c802001ffe995d8f592aa4c1e938e49a2be3c645262733a4e63f849514792\",\"dweb:/ipfs/QmQT2H8A69NRHqYFnnBYcnmW7nhkr9fppt6MQB4C4XTwwD\"]},\"src/interfaces/external/balancer/liquidity-mining/IRewardTokenDistributor.sol\":{\"keccak256\":\"0xd9476c8423eab4c40a3f4a25d343c7ab194985ef5ad2498758ae8cfd569dcd2a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4eedabb61c239ecd3e6f2b675cf176db87bbd2b8e54f6190f47001a1a455f875\",\"dweb:/ipfs/QmRsR9KiVJWBuQK3EBRfCVxdDZBTYmfK7CeBebdkeBX6HE\"]},\"src/interfaces/external/balancer/liquidity-mining/ISmartWalletChecker.sol\":{\"keccak256\":\"0x8f76f086f3d153b7542a027abdf7a5c5ca71acef1525d9a0a2219e561133c42c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://10e75e488da4be267b28819a0fad4507a42476f14136a8cf6c283bc2d14515d9\",\"dweb:/ipfs/QmfXQibu6k9zCT55DGWTTHaD4JkeTyu8Rnugfkx7GpknWk\"]},\"src/interfaces/external/balancer/liquidity-mining/IStakingLiquidityGauge.sol\":{\"keccak256\":\"0xa99cdc7d85b012b7d64eb26a4dafde52314bfe9162973eb66d0bd9241b342877\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bb5a8c580619a9cb730fe9d333d424db6ed9f5187ba7729beb0df474a64f6733\",\"dweb:/ipfs/QmboYxDELyqkNW7jjb8Ut5g7meDA1HcxsKsX5zmPNyFBPr\"]},\"src/interfaces/external/balancer/liquidity-mining/IVotingEscrow.sol\":{\"keccak256\":\"0xbf08c2800a22fb2f2b6bdfb6fc18aefb8a1fe302958a1053c6cc952b5e64b5e0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://41375a51dd8822d3c46047621dcad60e66e272af7f7d58b0dfd7712d40c30ed6\",\"dweb:/ipfs/QmbsaZkB5NEQJ1UtiWRja8LuLesyKaFVfq9g1L1HxSLC6g\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1\",\"dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3\",\"dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5\",\"dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z\"]},\"src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6\",\"dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6\"]},\"src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f\",\"dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U\"]},\"src/interfaces/external/balancer/vault/IAsset.sol\":{\"keccak256\":\"0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4\",\"dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn\"]},\"src/interfaces/external/balancer/vault/IAuthorizer.sol\":{\"keccak256\":\"0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1\",\"dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34\"]},\"src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039\",\"dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC\"]},\"src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a\",\"dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK\"]},\"src/interfaces/external/balancer/vault/IVault.sol\":{\"keccak256\":\"0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d\",\"dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "indexedGaugeType",
              "type": "string",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "contract ILiquidityGaugeFactory",
              "name": "gaugeFactory",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "GaugeFactorySet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "indexedGaugeType",
              "type": "string",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "GaugeTypeAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addGauge"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addGaugeType"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getActionId",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAuthorizerAdaptorEntrypoint",
          "outputs": [
            {
              "internalType": "contract IAuthorizerAdaptorEntrypoint",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getFactoryForGaugeType",
          "outputs": [
            {
              "internalType": "contract ILiquidityGaugeFactory",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGaugeController",
          "outputs": [
            {
              "internalType": "contract IGaugeController",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getGaugeTypeAtIndex",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGaugeTypes",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGaugeTypesCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isGaugeFromValidFactory",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidGaugeType",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract ILiquidityGaugeFactory",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setGaugeFactory"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addGauge(address,string)": {
            "details": "When adding gauges for L2 networks or sidechains, this must be called with the address of the *root* gauge which is deployed on Ethereum. It should *not* be called with the address of the child gauge which is deployed on the L2 / sidechain. If the gauge added is an Ethereum gauge, it cannot be a gauge for the 80BAL-20WETH pool."
          },
          "addGaugeType(string)": {
            "params": {
              "gaugeType": "Name of the new gauge type."
            }
          },
          "getActionId(bytes4)": {
            "details": "Returns the action identifier associated with the external function described by `selector`."
          },
          "setGaugeFactory(address,string)": {
            "details": "This function can either set a new factory or replace an existing one."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addGauge(address,string)": {
            "notice": "Adds a new gauge to the GaugeController for the given `gaugeType` type."
          },
          "addGaugeType(string)": {
            "notice": "Adds a new `gaugeType` corresponding to a new network, which allows setting a factory and adding gauges for the type later on."
          },
          "getAuthorizerAdaptorEntrypoint()": {
            "notice": "Returns the address of the Authorizer adaptor entrypoint contract."
          },
          "getFactoryForGaugeType(string)": {
            "notice": "Returns the factory for gauge type `gaugeType`."
          },
          "getGaugeController()": {
            "notice": "Returns the address of the Gauge Controller"
          },
          "getGaugeTypeAtIndex(uint256)": {
            "notice": "Returns gauge type name registered at the given index."
          },
          "getGaugeTypes()": {
            "notice": "Returns the list of gauge types."
          },
          "getGaugeTypesCount()": {
            "notice": "Returns the number of gauge types."
          },
          "isGaugeFromValidFactory(address,string)": {
            "notice": "Returns true if `gauge` has been deployed by the factory for the gauge type `gaugeType`. Note that if a gauge type's factory changes then this function will start returning false for previously valid gauges."
          },
          "isValidGaugeType(string)": {
            "notice": "Returns true if the given gauge type is valid; false otherwise."
          },
          "setGaugeFactory(address,string)": {
            "notice": "Sets `factory` as the allowlisted factory contract for gauges with type `gaugeType`."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol": "IGaugeAdder"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptor.sol": {
        "keccak256": "0x1a9bad00c0084984cd3364cfcdeaece137157816fe8078f706ed78adc803cad7",
        "urls": [
          "bzz-raw://d69ccb7c506a7b56fe8f4e59ee10595d3e5cbb881e8215fdda879ec7bf34a5c6",
          "dweb:/ipfs/QmZc3HoxcdRivJ8xePXBxceAtvxo8LA7P8Rf3pjjED9e7y"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptorEntrypoint.sol": {
        "keccak256": "0xe2b137c6c84834d761ceb439caa7c7a614da23228b151ea14ed9d3bf794e8f16",
        "urls": [
          "bzz-raw://4686104e5ea47c949c48f3aeb1d930b1a8c8c956bc017c6d06f8db0b002888d1",
          "dweb:/ipfs/QmcfFPtgw5CnQA5fn7TTP1M45NEq1FPtJaA6D5Xh3QfLAB"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol": {
        "keccak256": "0x0c9bc1023d642e781ac95d2588ab6996bd5ad18ae59e80fac176b1528dbdd823",
        "urls": [
          "bzz-raw://a09d3c7c2e64aeee3a6bef19cc07c6c65c1ac39bd82ba57c80be868d89654cbc",
          "dweb:/ipfs/QmSGy6T7VPzeWJfKqQEpFgKgVnvSH6ziXAFoKDMRh5q7P8"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IGaugeController.sol": {
        "keccak256": "0xe5fb4837f4dbe3d0a3a00ca489ebfa2b51cf4145a9a1b8c77c1ad7caeb9ad2e4",
        "urls": [
          "bzz-raw://120b30fc0e0aa38d49cb3679d2456847e25ed05c281834e414436f0a9abe4e90",
          "dweb:/ipfs/QmNr6PJJJj36BtaMnjxWEg7AbPZpXvzWm57V8YGJAVfcf3"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/ILiquidityGauge.sol": {
        "keccak256": "0xa22f0c0868adb9d06d097ecb0a8d8370a6e59d223ef1e07a58340191c402e9ea",
        "urls": [
          "bzz-raw://558942e9f7ff6c6f2becffc28da21bf897e043ceea6bed95d2a362e0eceedbe6",
          "dweb:/ipfs/QmU51CezK36UmBpArAcBmXrDmC5ozDmTrconGfj8pr8NYL"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/ILiquidityGaugeFactory.sol": {
        "keccak256": "0xda0ac94f1b3f6025bfa0e4ddc446d372129042c5c7c22a43364db0c7b27cccf0",
        "urls": [
          "bzz-raw://3e0c802001ffe995d8f592aa4c1e938e49a2be3c645262733a4e63f849514792",
          "dweb:/ipfs/QmQT2H8A69NRHqYFnnBYcnmW7nhkr9fppt6MQB4C4XTwwD"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IRewardTokenDistributor.sol": {
        "keccak256": "0xd9476c8423eab4c40a3f4a25d343c7ab194985ef5ad2498758ae8cfd569dcd2a",
        "urls": [
          "bzz-raw://4eedabb61c239ecd3e6f2b675cf176db87bbd2b8e54f6190f47001a1a455f875",
          "dweb:/ipfs/QmRsR9KiVJWBuQK3EBRfCVxdDZBTYmfK7CeBebdkeBX6HE"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/ISmartWalletChecker.sol": {
        "keccak256": "0x8f76f086f3d153b7542a027abdf7a5c5ca71acef1525d9a0a2219e561133c42c",
        "urls": [
          "bzz-raw://10e75e488da4be267b28819a0fad4507a42476f14136a8cf6c283bc2d14515d9",
          "dweb:/ipfs/QmfXQibu6k9zCT55DGWTTHaD4JkeTyu8Rnugfkx7GpknWk"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IStakingLiquidityGauge.sol": {
        "keccak256": "0xa99cdc7d85b012b7d64eb26a4dafde52314bfe9162973eb66d0bd9241b342877",
        "urls": [
          "bzz-raw://bb5a8c580619a9cb730fe9d333d424db6ed9f5187ba7729beb0df474a64f6733",
          "dweb:/ipfs/QmboYxDELyqkNW7jjb8Ut5g7meDA1HcxsKsX5zmPNyFBPr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IVotingEscrow.sol": {
        "keccak256": "0xbf08c2800a22fb2f2b6bdfb6fc18aefb8a1fe302958a1053c6cc952b5e64b5e0",
        "urls": [
          "bzz-raw://41375a51dd8822d3c46047621dcad60e66e272af7f7d58b0dfd7712d40c30ed6",
          "dweb:/ipfs/QmbsaZkB5NEQJ1UtiWRja8LuLesyKaFVfq9g1L1HxSLC6g"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol": {
        "keccak256": "0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842",
        "urls": [
          "bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1",
          "dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol": {
        "keccak256": "0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979",
        "urls": [
          "bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3",
          "dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol": {
        "keccak256": "0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c",
        "urls": [
          "bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5",
          "dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol": {
        "keccak256": "0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9",
        "urls": [
          "bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6",
          "dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol": {
        "keccak256": "0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835",
        "urls": [
          "bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f",
          "dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/balancer/vault/IAsset.sol": {
        "keccak256": "0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef",
        "urls": [
          "bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4",
          "dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IAuthorizer.sol": {
        "keccak256": "0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b",
        "urls": [
          "bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1",
          "dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol": {
        "keccak256": "0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43",
        "urls": [
          "bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039",
          "dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol": {
        "keccak256": "0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a",
        "urls": [
          "bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a",
          "dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IVault.sol": {
        "keccak256": "0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb",
        "urls": [
          "bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d",
          "dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol",
    "id": 57207,
    "exportedSymbols": {
      "IAsset": [
        61808
      ],
      "IAuthentication": [
        60077
      ],
      "IAuthorizer": [
        61823
      ],
      "IAuthorizerAdaptor": [
        56468
      ],
      "IAuthorizerAdaptorEntrypoint": [
        56482
      ],
      "IERC20": [
        60345
      ],
      "IFlashLoanRecipient": [
        62001
      ],
      "IGaugeAdder": [
        57206
      ],
      "IGaugeController": [
        57291
      ],
      "ILiquidityGauge": [
        57381
      ],
      "ILiquidityGaugeFactory": [
        57394
      ],
      "IProtocolFeesCollector": [
        62141
      ],
      "IRewardTokenDistributor": [
        57626
      ],
      "ISignaturesValidator": [
        60129
      ],
      "ISmartWalletChecker": [
        57680
      ],
      "IStakingLiquidityGauge": [
        57899
      ],
      "ITemporarilyPausable": [
        60148
      ],
      "IVault": [
        63277
      ],
      "IVotingEscrow": [
        58008
      ],
      "IWETH": [
        60253
      ]
    },
    "nodeType": "SourceUnit",
    "src": "688:3492:105",
    "nodes": [
      {
        "id": 57088,
        "nodeType": "PragmaDirective",
        "src": "688:23:105",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 57089,
        "nodeType": "PragmaDirective",
        "src": "712:33:105",
        "nodes": [],
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ]
      },
      {
        "id": 57090,
        "nodeType": "ImportDirective",
        "src": "747:44:105",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptorEntrypoint.sol",
        "file": "./IAuthorizerAdaptorEntrypoint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57207,
        "sourceUnit": 56483,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57091,
        "nodeType": "ImportDirective",
        "src": "792:32:105",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/liquidity-mining/IGaugeController.sol",
        "file": "./IGaugeController.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57207,
        "sourceUnit": 57292,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57092,
        "nodeType": "ImportDirective",
        "src": "825:31:105",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/liquidity-mining/ILiquidityGauge.sol",
        "file": "./ILiquidityGauge.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57207,
        "sourceUnit": 57382,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57093,
        "nodeType": "ImportDirective",
        "src": "857:38:105",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/liquidity-mining/ILiquidityGaugeFactory.sol",
        "file": "./ILiquidityGaugeFactory.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57207,
        "sourceUnit": 57395,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57094,
        "nodeType": "ImportDirective",
        "src": "896:38:105",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/liquidity-mining/IStakingLiquidityGauge.sol",
        "file": "./IStakingLiquidityGauge.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57207,
        "sourceUnit": 57900,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57206,
        "nodeType": "ContractDefinition",
        "src": "936:3243:105",
        "nodes": [
          {
            "id": 57105,
            "nodeType": "EnumDefinition",
            "src": "1055:173:105",
            "nodes": [],
            "canonicalName": "IGaugeAdder.GaugeType",
            "members": [
              {
                "id": 57097,
                "name": "LiquidityMiningCommittee",
                "nameLocation": "1080:24:105",
                "nodeType": "EnumValue",
                "src": "1080:24:105"
              },
              {
                "id": 57098,
                "name": "veBAL",
                "nameLocation": "1114:5:105",
                "nodeType": "EnumValue",
                "src": "1114:5:105"
              },
              {
                "id": 57099,
                "name": "Ethereum",
                "nameLocation": "1129:8:105",
                "nodeType": "EnumValue",
                "src": "1129:8:105"
              },
              {
                "id": 57100,
                "name": "Polygon",
                "nameLocation": "1147:7:105",
                "nodeType": "EnumValue",
                "src": "1147:7:105"
              },
              {
                "id": 57101,
                "name": "Arbitrum",
                "nameLocation": "1164:8:105",
                "nodeType": "EnumValue",
                "src": "1164:8:105"
              },
              {
                "id": 57102,
                "name": "Optimism",
                "nameLocation": "1182:8:105",
                "nodeType": "EnumValue",
                "src": "1182:8:105"
              },
              {
                "id": 57103,
                "name": "Gnosis",
                "nameLocation": "1200:6:105",
                "nodeType": "EnumValue",
                "src": "1200:6:105"
              },
              {
                "id": 57104,
                "name": "ZKSync",
                "nameLocation": "1216:6:105",
                "nodeType": "EnumValue",
                "src": "1216:6:105"
              }
            ],
            "name": "GaugeType",
            "nameLocation": "1060:9:105"
          },
          {
            "id": 57111,
            "nodeType": "EventDefinition",
            "src": "1344:72:105",
            "nodes": [],
            "anonymous": false,
            "name": "GaugeTypeAdded",
            "nameLocation": "1350:14:105",
            "parameters": {
              "id": 57110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57107,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "indexedGaugeType",
                  "nameLocation": "1380:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57111,
                  "src": "1365:31:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57106,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1365:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57109,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "1405:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57111,
                  "src": "1398:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57108,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1398:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1364:51:105"
            }
          },
          {
            "id": 57120,
            "nodeType": "EventDefinition",
            "src": "1421:110:105",
            "nodes": [],
            "anonymous": false,
            "name": "GaugeFactorySet",
            "nameLocation": "1427:15:105",
            "parameters": {
              "id": 57119,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57113,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "indexedGaugeType",
                  "nameLocation": "1458:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57120,
                  "src": "1443:31:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57112,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1443:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57115,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "1483:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57120,
                  "src": "1476:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57114,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1476:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57118,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gaugeFactory",
                  "nameLocation": "1517:12:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57120,
                  "src": "1494:35:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ILiquidityGaugeFactory_$57394",
                    "typeString": "contract ILiquidityGaugeFactory"
                  },
                  "typeName": {
                    "id": 57117,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57116,
                      "name": "ILiquidityGaugeFactory",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57394,
                      "src": "1494:22:105"
                    },
                    "referencedDeclaration": 57394,
                    "src": "1494:22:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ILiquidityGaugeFactory_$57394",
                      "typeString": "contract ILiquidityGaugeFactory"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1442:88:105"
            }
          },
          {
            "id": 57127,
            "nodeType": "FunctionDefinition",
            "src": "1635:95:105",
            "nodes": [],
            "documentation": {
              "id": 57121,
              "nodeType": "StructuredDocumentation",
              "src": "1537:93:105",
              "text": " @notice Returns the address of the Authorizer adaptor entrypoint contract."
            },
            "functionSelector": "7afcf0e6",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAuthorizerAdaptorEntrypoint",
            "nameLocation": "1644:30:105",
            "parameters": {
              "id": 57122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1674:2:105"
            },
            "returnParameters": {
              "id": 57126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57125,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57127,
                  "src": "1700:28:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAuthorizerAdaptorEntrypoint_$56482",
                    "typeString": "contract IAuthorizerAdaptorEntrypoint"
                  },
                  "typeName": {
                    "id": 57124,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57123,
                      "name": "IAuthorizerAdaptorEntrypoint",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 56482,
                      "src": "1700:28:105"
                    },
                    "referencedDeclaration": 56482,
                    "src": "1700:28:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAuthorizerAdaptorEntrypoint_$56482",
                      "typeString": "contract IAuthorizerAdaptorEntrypoint"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1699:30:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57134,
            "nodeType": "FunctionDefinition",
            "src": "1811:71:105",
            "nodes": [],
            "documentation": {
              "id": 57128,
              "nodeType": "StructuredDocumentation",
              "src": "1736:70:105",
              "text": " @notice Returns the address of the Gauge Controller"
            },
            "functionSelector": "58de9ade",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGaugeController",
            "nameLocation": "1820:18:105",
            "parameters": {
              "id": 57129,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1838:2:105"
            },
            "returnParameters": {
              "id": 57133,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57132,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57134,
                  "src": "1864:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IGaugeController_$57291",
                    "typeString": "contract IGaugeController"
                  },
                  "typeName": {
                    "id": 57131,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57130,
                      "name": "IGaugeController",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57291,
                      "src": "1864:16:105"
                    },
                    "referencedDeclaration": 57291,
                    "src": "1864:16:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IGaugeController_$57291",
                      "typeString": "contract IGaugeController"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1863:18:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57141,
            "nodeType": "FunctionDefinition",
            "src": "1952:65:105",
            "nodes": [],
            "documentation": {
              "id": 57135,
              "nodeType": "StructuredDocumentation",
              "src": "1888:59:105",
              "text": " @notice Returns the list of gauge types."
            },
            "functionSelector": "afcb1a86",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGaugeTypes",
            "nameLocation": "1961:13:105",
            "parameters": {
              "id": 57136,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1974:2:105"
            },
            "returnParameters": {
              "id": 57140,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57139,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57141,
                  "src": "2000:15:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57137,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "2000:6:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 57138,
                    "nodeType": "ArrayTypeName",
                    "src": "2000:8:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1999:17:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57149,
            "nodeType": "FunctionDefinition",
            "src": "2109:82:105",
            "nodes": [],
            "documentation": {
              "id": 57142,
              "nodeType": "StructuredDocumentation",
              "src": "2023:81:105",
              "text": " @notice Returns gauge type name registered at the given index."
            },
            "functionSelector": "08ceb030",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGaugeTypeAtIndex",
            "nameLocation": "2118:19:105",
            "parameters": {
              "id": 57145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57144,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "2146:5:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57149,
                  "src": "2138:13:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57143,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2138:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2137:15:105"
            },
            "returnParameters": {
              "id": 57148,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57147,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57149,
                  "src": "2176:13:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57146,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2176:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2175:15:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57155,
            "nodeType": "FunctionDefinition",
            "src": "2263:62:105",
            "nodes": [],
            "documentation": {
              "id": 57150,
              "nodeType": "StructuredDocumentation",
              "src": "2197:61:105",
              "text": " @notice Returns the number of gauge types."
            },
            "functionSelector": "96432aeb",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGaugeTypesCount",
            "nameLocation": "2272:18:105",
            "parameters": {
              "id": 57151,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2290:2:105"
            },
            "returnParameters": {
              "id": 57154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57153,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57155,
                  "src": "2316:7:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57152,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2316:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2315:9:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57163,
            "nodeType": "FunctionDefinition",
            "src": "2426:80:105",
            "nodes": [],
            "documentation": {
              "id": 57156,
              "nodeType": "StructuredDocumentation",
              "src": "2331:90:105",
              "text": " @notice Returns true if the given gauge type is valid; false otherwise."
            },
            "functionSelector": "16e772bc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isValidGaugeType",
            "nameLocation": "2435:16:105",
            "parameters": {
              "id": 57159,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57158,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "2466:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57163,
                  "src": "2452:23:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57157,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2452:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2451:25:105"
            },
            "returnParameters": {
              "id": 57162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57161,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57163,
                  "src": "2500:4:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 57160,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2500:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2499:6:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57172,
            "nodeType": "FunctionDefinition",
            "src": "2591:104:105",
            "nodes": [],
            "documentation": {
              "id": 57164,
              "nodeType": "StructuredDocumentation",
              "src": "2512:74:105",
              "text": " @notice Returns the factory for gauge type `gaugeType`."
            },
            "functionSelector": "572cb6a5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFactoryForGaugeType",
            "nameLocation": "2600:22:105",
            "parameters": {
              "id": 57167,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57166,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "2637:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57172,
                  "src": "2623:23:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57165,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2623:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2622:25:105"
            },
            "returnParameters": {
              "id": 57171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57170,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57172,
                  "src": "2671:22:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ILiquidityGaugeFactory_$57394",
                    "typeString": "contract ILiquidityGaugeFactory"
                  },
                  "typeName": {
                    "id": 57169,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57168,
                      "name": "ILiquidityGaugeFactory",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57394,
                      "src": "2671:22:105"
                    },
                    "referencedDeclaration": 57394,
                    "src": "2671:22:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ILiquidityGaugeFactory_$57394",
                      "typeString": "contract ILiquidityGaugeFactory"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2670:24:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57182,
            "nodeType": "FunctionDefinition",
            "src": "2954:102:105",
            "nodes": [],
            "documentation": {
              "id": 57173,
              "nodeType": "StructuredDocumentation",
              "src": "2701:248:105",
              "text": " @notice Returns true if `gauge` has been deployed by the factory for the gauge type `gaugeType`.\n Note that if a gauge type's factory changes then this function will start returning false for previously\n valid gauges."
            },
            "functionSelector": "a0ade33e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isGaugeFromValidFactory",
            "nameLocation": "2963:23:105",
            "parameters": {
              "id": 57178,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57175,
                  "mutability": "mutable",
                  "name": "gauge",
                  "nameLocation": "2995:5:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57182,
                  "src": "2987:13:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 57174,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2987:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57177,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "3016:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57182,
                  "src": "3002:23:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57176,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3002:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2986:40:105"
            },
            "returnParameters": {
              "id": 57181,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57180,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57182,
                  "src": "3050:4:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 57179,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3050:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3049:6:105"
            },
            "scope": 57206,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57188,
            "nodeType": "FunctionDefinition",
            "src": "3279:56:105",
            "nodes": [],
            "documentation": {
              "id": 57183,
              "nodeType": "StructuredDocumentation",
              "src": "3062:212:105",
              "text": " @notice Adds a new `gaugeType` corresponding to a new network, which allows setting a factory and adding gauges\n for the type later on.\n @param gaugeType Name of the new gauge type."
            },
            "functionSelector": "231856fa",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addGaugeType",
            "nameLocation": "3288:12:105",
            "parameters": {
              "id": 57186,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57185,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "3315:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57188,
                  "src": "3301:23:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57184,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3301:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3300:25:105"
            },
            "returnParameters": {
              "id": 57187,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3334:0:105"
            },
            "scope": 57206,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57196,
            "nodeType": "FunctionDefinition",
            "src": "3814:67:105",
            "nodes": [],
            "documentation": {
              "id": 57189,
              "nodeType": "StructuredDocumentation",
              "src": "3341:468:105",
              "text": " @notice Adds a new gauge to the GaugeController for the given `gaugeType` type.\n @dev When adding gauges for L2 networks or sidechains, this must be called with the address of the *root* gauge\n which is deployed on Ethereum. It should *not* be called with the address of the child gauge which is deployed on\n the L2 / sidechain.\n If the gauge added is an Ethereum gauge, it cannot be a gauge for the 80BAL-20WETH pool."
            },
            "functionSelector": "5bf71434",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addGauge",
            "nameLocation": "3823:8:105",
            "parameters": {
              "id": 57194,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57191,
                  "mutability": "mutable",
                  "name": "gauge",
                  "nameLocation": "3840:5:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57196,
                  "src": "3832:13:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 57190,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3832:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57193,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "3861:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57196,
                  "src": "3847:23:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57192,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3847:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3831:40:105"
            },
            "returnParameters": {
              "id": 57195,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3880:0:105"
            },
            "scope": 57206,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57205,
            "nodeType": "FunctionDefinition",
            "src": "4086:91:105",
            "nodes": [],
            "documentation": {
              "id": 57197,
              "nodeType": "StructuredDocumentation",
              "src": "3887:194:105",
              "text": " @notice Sets `factory` as the allowlisted factory contract for gauges with type `gaugeType`.\n @dev This function can either set a new factory or replace an existing one."
            },
            "functionSelector": "066edd7a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setGaugeFactory",
            "nameLocation": "4095:15:105",
            "parameters": {
              "id": 57203,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57200,
                  "mutability": "mutable",
                  "name": "factory",
                  "nameLocation": "4134:7:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57205,
                  "src": "4111:30:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ILiquidityGaugeFactory_$57394",
                    "typeString": "contract ILiquidityGaugeFactory"
                  },
                  "typeName": {
                    "id": 57199,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57198,
                      "name": "ILiquidityGaugeFactory",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57394,
                      "src": "4111:22:105"
                    },
                    "referencedDeclaration": 57394,
                    "src": "4111:22:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ILiquidityGaugeFactory_$57394",
                      "typeString": "contract ILiquidityGaugeFactory"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57202,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "4157:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 57205,
                  "src": "4143:23:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57201,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4143:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4110:57:105"
            },
            "returnParameters": {
              "id": 57204,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4176:0:105"
            },
            "scope": 57206,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 57095,
              "name": "IAuthentication",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 60077,
              "src": "961:15:105"
            },
            "id": 57096,
            "nodeType": "InheritanceSpecifier",
            "src": "961:15:105"
          }
        ],
        "canonicalName": "IGaugeAdder",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          57206,
          60077
        ],
        "name": "IGaugeAdder",
        "nameLocation": "946:11:105",
        "scope": 57207,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 105
}