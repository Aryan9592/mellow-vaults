{
  "abi": [
    {
      "inputs": [],
      "name": "updateProtocolFeePercentageCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "updateProtocolFeePercentageCache()": "0da0669c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"updateProtocolFeePercentageCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"updateProtocolFeePercentageCache()\":{\"details\":\"Can be called by anyone to update the cached fee percentages. Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of the pool during execution of a Vault hook. This is protected by a call to `ensureNotInVaultContext` in VaultReentrancyLib where overridden in `ProtocolFeeCache`, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updateProtocolFeePercentageCache()\":{\"notice\":\"Updates the cache to the latest value set by governance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/balancer/pool-utils/IProtocolFeeCache.sol\":\"IProtocolFeeCache\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/balancer/pool-utils/IProtocolFeeCache.sol\":{\"keccak256\":\"0xbed26e1193e679ca856a8edabaf2274fc1a7da59ff45daf50f49c085ae8f019f\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1b7d1f5a84fd0d10ead307219b2ac291c27183575151e718c8cbe11f7046688c\",\"dweb:/ipfs/QmTWgGtGbcyh41bwy7GzmiBzrP1EhVbGLWbrFffDXtJrHA\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateProtocolFeePercentageCache"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "updateProtocolFeePercentageCache()": {
            "details": "Can be called by anyone to update the cached fee percentages. Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of the pool during execution of a Vault hook. This is protected by a call to `ensureNotInVaultContext` in VaultReentrancyLib where overridden in `ProtocolFeeCache`, and so is safe to call on ManagedPool. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "updateProtocolFeePercentageCache()": {
            "notice": "Updates the cache to the latest value set by governance."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/balancer/pool-utils/IProtocolFeeCache.sol": "IProtocolFeeCache"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/balancer/pool-utils/IProtocolFeeCache.sol": {
        "keccak256": "0xbed26e1193e679ca856a8edabaf2274fc1a7da59ff45daf50f49c085ae8f019f",
        "urls": [
          "bzz-raw://1b7d1f5a84fd0d10ead307219b2ac291c27183575151e718c8cbe11f7046688c",
          "dweb:/ipfs/QmTWgGtGbcyh41bwy7GzmiBzrP1EhVbGLWbrFffDXtJrHA"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/balancer/pool-utils/IProtocolFeeCache.sol",
    "id": 58900,
    "exportedSymbols": {
      "IProtocolFeeCache": [
        58899
      ]
    },
    "nodeType": "SourceUnit",
    "src": "688:718:137",
    "nodes": [
      {
        "id": 58894,
        "nodeType": "PragmaDirective",
        "src": "688:23:137",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 58899,
        "nodeType": "ContractDefinition",
        "src": "713:692:137",
        "nodes": [
          {
            "id": 58898,
            "nodeType": "FunctionDefinition",
            "src": "1350:53:137",
            "nodes": [],
            "documentation": {
              "id": 58895,
              "nodeType": "StructuredDocumentation",
              "src": "747:598:137",
              "text": " @notice Updates the cache to the latest value set by governance.\n @dev Can be called by anyone to update the cached fee percentages.\n Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of\n the pool during execution of a Vault hook. This is protected by a call to `ensureNotInVaultContext` in\n VaultReentrancyLib where overridden in `ProtocolFeeCache`, and so is safe to call on ManagedPool.\n See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference."
            },
            "functionSelector": "0da0669c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateProtocolFeePercentageCache",
            "nameLocation": "1359:32:137",
            "parameters": {
              "id": 58896,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1391:2:137"
            },
            "returnParameters": {
              "id": 58897,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1402:0:137"
            },
            "scope": 58899,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IProtocolFeeCache",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          58899
        ],
        "name": "IProtocolFeeCache",
        "nameLocation": "723:17:137",
        "scope": 58900,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 137
}