{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IStakelessGauge",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedGaugeType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "GaugeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IStakelessGauge",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedGaugeType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "GaugeRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "contract IStakelessGauge[]",
          "name": "gauges",
          "type": "address[]"
        }
      ],
      "name": "addGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "contract IStakelessGauge[]",
          "name": "gauges",
          "type": "address[]"
        }
      ],
      "name": "addGaugesWithVerifiedType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minRelativeWeight",
          "type": "uint256"
        }
      ],
      "name": "checkpointGaugesAboveRelativeWeight",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minRelativeWeight",
          "type": "uint256"
        }
      ],
      "name": "checkpointGaugesOfTypeAboveRelativeWeight",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "gaugeTypes",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "gauges",
          "type": "address[]"
        }
      ],
      "name": "checkpointMultipleGauges",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "checkpointSingleGauge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGaugeAdder",
      "outputs": [
        {
          "internalType": "contract IGaugeAdder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getGaugeAtIndex",
      "outputs": [
        {
          "internalType": "contract IStakelessGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGaugeTypes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundedDownBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "getSingleBridgeCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minRelativeWeight",
          "type": "uint256"
        }
      ],
      "name": "getTotalBridgeCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "getTotalGauges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "contract IStakelessGauge",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "hasGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        }
      ],
      "name": "isValidGaugeType",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gaugeType",
          "type": "string"
        },
        {
          "internalType": "contract IStakelessGauge[]",
          "name": "gauges",
          "type": "address[]"
        }
      ],
      "name": "removeGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addGauges(string,address[])": "f7178b88",
    "addGaugesWithVerifiedType(string,address[])": "d8dba2ce",
    "checkpointGaugesAboveRelativeWeight(uint256)": "d14cfe3b",
    "checkpointGaugesOfTypeAboveRelativeWeight(string,uint256)": "db5d1225",
    "checkpointMultipleGauges(string[],address[])": "4a3a1e11",
    "checkpointSingleGauge(string,address)": "7d0a6616",
    "getGaugeAdder()": "7c1fef51",
    "getGaugeAtIndex(string,uint256)": "27cb2a3b",
    "getGaugeTypes()": "afcb1a86",
    "getRoundedDownBlockTimestamp()": "46583adf",
    "getSingleBridgeCost(string,address)": "2adbe5ac",
    "getTotalBridgeCost(uint256)": "27f79107",
    "getTotalGauges(string)": "4db34d2a",
    "hasGauge(string,address)": "c91be043",
    "isValidGaugeType(string)": "16e772bc",
    "removeGauges(string,address[])": "73ebd060"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IStakelessGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedGaugeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"GaugeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IStakelessGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedGaugeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"GaugeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"contract IStakelessGauge[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"addGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"contract IStakelessGauge[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"addGaugesWithVerifiedType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRelativeWeight\",\"type\":\"uint256\"}],\"name\":\"checkpointGaugesAboveRelativeWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minRelativeWeight\",\"type\":\"uint256\"}],\"name\":\"checkpointGaugesOfTypeAboveRelativeWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"gaugeTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"checkpointMultipleGauges\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"checkpointSingleGauge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGaugeAdder\",\"outputs\":[{\"internalType\":\"contract IGaugeAdder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGaugeAtIndex\",\"outputs\":[{\"internalType\":\"contract IStakelessGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGaugeTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundedDownBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"getSingleBridgeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRelativeWeight\",\"type\":\"uint256\"}],\"name\":\"getTotalBridgeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"getTotalGauges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"contract IStakelessGauge\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"hasGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"}],\"name\":\"isValidGaugeType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeType\",\"type\":\"string\"},{\"internalType\":\"contract IStakelessGauge[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"removeGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Supports gauge types registered in `GaugeAdder`. Gauges to be checkpointed need to be added to the controller beforehand.\",\"kind\":\"dev\",\"methods\":{\"addGauges(string,address[])\":{\"details\":\"Gauges added will be considered when performing checkpoints. The gauges to add should meet the following preconditions: - They must have been created in a valid `GaugeFactory`, according to `GaugeAdder#isGaugeFromValidFactory`. - They must exist in the `GaugeController`, according to `GaugeController#gauge_exists`. - They must not be killed. - They must not have been previously added to the checkpointer.\",\"params\":{\"gaugeType\":\"Type of the gauge.\",\"gauges\":\"Gauges to add.\"}},\"addGaugesWithVerifiedType(string,address[])\":{\"details\":\"Gauges added will be considered when performing checkpoints. The gauges to add should meet the following preconditions: - They must exist in the GaugeController, according to GaugeController#gauge_exists. - They must not be killed. - They must not have been previously added to the checkpointer. Unlike `addGauges`, this function can add gauges that were created by factories registered in a deprecated `GaugeAdder`, and therefore cannot be validated by the current `GaugeAdder`.\",\"params\":{\"gaugeType\":\"Type of the gauge.\",\"gauges\":\"Gauges to add.\"}},\"checkpointGaugesAboveRelativeWeight(uint256)\":{\"details\":\"Reverts if the ETH sent in the call is not enough to cover bridge costs.\",\"params\":{\"minRelativeWeight\":\"Threshold to filter out gauges below it.\"}},\"checkpointGaugesOfTypeAboveRelativeWeight(string,uint256)\":{\"details\":\"Reverts if the ETH sent in the call is not enough to cover bridge costs.\",\"params\":{\"gaugeType\":\"Type of the gauge.\",\"minRelativeWeight\":\"Threshold to filter out gauges below it.\"}},\"checkpointMultipleGauges(string[],address[])\":{\"params\":{\"gaugeTypes\":\"Types of the gauges to be checkpointed. If a single type is provided, it is applied to all of the gauges, otherwise the gauge types array should be equal in length to the gauges.\",\"gauges\":\"Addresses of the gauges to checkpoint.\"}},\"checkpointSingleGauge(string,address)\":{\"params\":{\"gauge\":\"Address of the gauge to checkpoint.\",\"gaugeType\":\"Type of the gauge.\"}},\"getGaugeAtIndex(string,uint256)\":{\"details\":\"Reverts if the index is greater than or equal to the amount of added gauges for the given type.\",\"params\":{\"gaugeType\":\"Type of the gauge.\",\"index\":\"- Index of the added gauge.\"}},\"getSingleBridgeCost(string,address)\":{\"details\":\"Reverts if the gauge was not added to the checkpointer beforehand.\",\"params\":{\"gauge\":\"Address of the gauge to check the bridge costs.\",\"gaugeType\":\"Type of the gauge.\"}},\"getTotalBridgeCost(uint256)\":{\"details\":\"A lower minimum relative weight might return higher costs, since more gauges could potentially be included in the checkpoint.\"},\"getTotalGauges(string)\":{\"params\":{\"gaugeType\":\"Type of the gauge.\"}},\"hasGauge(string,address)\":{\"params\":{\"gauge\":\"Gauge to check.\",\"gaugeType\":\"Type of the gauge.\"}},\"removeGauges(string,address[])\":{\"details\":\"Removed gauges will not be considered when performing checkpoints. To remove gauges: - They must be killed. - They must have been previously added to the checkpointer.\",\"params\":{\"gaugeType\":\"Type of the gauge.\",\"gauges\":\"Gauges to remove.\"}}},\"title\":\"Stakeless Gauge Checkpointer interface\",\"version\":1},\"userdoc\":{\"events\":{\"GaugeAdded(address,string,string)\":{\"notice\":\"Emitted when a gauge is added to the checkpointer.\"},\"GaugeRemoved(address,string,string)\":{\"notice\":\"Emitted when a gauge is removed from the checkpointer.\"}},\"kind\":\"user\",\"methods\":{\"addGauges(string,address[])\":{\"notice\":\"Adds an array of gauges from the given type.\"},\"addGaugesWithVerifiedType(string,address[])\":{\"notice\":\"Adds an array of gauges from the given type. This is a permissioned function.\"},\"checkpointGaugesAboveRelativeWeight(uint256)\":{\"notice\":\"Performs a checkpoint for all added gauges above the given relative weight threshold.\"},\"checkpointGaugesOfTypeAboveRelativeWeight(string,uint256)\":{\"notice\":\"Performs a checkpoint for all added gauges of a given type above the given relative weight threshold.\"},\"checkpointMultipleGauges(string[],address[])\":{\"notice\":\"Performs a checkpoint for a multiple added gauges of the given types. Reverts if the ETH sent in the call is not enough to cover bridge costs. Reverts if the gauges were not added to the checkpointer beforehand.\"},\"checkpointSingleGauge(string,address)\":{\"notice\":\"Performs a checkpoint for a single added gauge of a given type. Reverts if the ETH sent in the call is not enough to cover bridge costs. Reverts if the gauge was not added to the checkpointer beforehand.\"},\"getGaugeAdder()\":{\"notice\":\"Returns `GaugeAdder` contract.\"},\"getGaugeAtIndex(string,uint256)\":{\"notice\":\"Returns the gauge of a given type at the given index.\"},\"getGaugeTypes()\":{\"notice\":\"Returns gauge types available in the checkpointer.\"},\"getRoundedDownBlockTimestamp()\":{\"notice\":\"Returns the timestamp corresponding to the start of the previous week of the current block.\"},\"getSingleBridgeCost(string,address)\":{\"notice\":\"Returns the ETH cost to checkpoint a single given gauge.\"},\"getTotalBridgeCost(uint256)\":{\"notice\":\"Returns the ETH cost to checkpoint all gauges for a given minimum relative weight.\"},\"getTotalGauges(string)\":{\"notice\":\"Returns the amount of added gauges for a given type.\"},\"hasGauge(string,address)\":{\"notice\":\"Returns true if the given gauge was added for the given type; false otherwise.\"},\"isValidGaugeType(string)\":{\"notice\":\"Returns true if gauge type is valid; false otherwise.\"},\"removeGauges(string,address[])\":{\"notice\":\"Removes an array of gauges from the given type.\"}},\"notice\":\"Manages checkpoints for L2 and mainnet stakeless root gauges, allowing to perform mutiple checkpoints in a single call.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/balancer/liquidity-mining/IStakelessGaugeCheckpointer.sol\":\"IStakelessGaugeCheckpointer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptor.sol\":{\"keccak256\":\"0x1a9bad00c0084984cd3364cfcdeaece137157816fe8078f706ed78adc803cad7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d69ccb7c506a7b56fe8f4e59ee10595d3e5cbb881e8215fdda879ec7bf34a5c6\",\"dweb:/ipfs/QmZc3HoxcdRivJ8xePXBxceAtvxo8LA7P8Rf3pjjED9e7y\"]},\"src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptorEntrypoint.sol\":{\"keccak256\":\"0xe2b137c6c84834d761ceb439caa7c7a614da23228b151ea14ed9d3bf794e8f16\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4686104e5ea47c949c48f3aeb1d930b1a8c8c956bc017c6d06f8db0b002888d1\",\"dweb:/ipfs/QmcfFPtgw5CnQA5fn7TTP1M45NEq1FPtJaA6D5Xh3QfLAB\"]},\"src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol\":{\"keccak256\":\"0x0c9bc1023d642e781ac95d2588ab6996bd5ad18ae59e80fac176b1528dbdd823\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a09d3c7c2e64aeee3a6bef19cc07c6c65c1ac39bd82ba57c80be868d89654cbc\",\"dweb:/ipfs/QmSGy6T7VPzeWJfKqQEpFgKgVnvSH6ziXAFoKDMRh5q7P8\"]},\"src/interfaces/external/balancer/liquidity-mining/IGaugeController.sol\":{\"keccak256\":\"0xe5fb4837f4dbe3d0a3a00ca489ebfa2b51cf4145a9a1b8c77c1ad7caeb9ad2e4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://120b30fc0e0aa38d49cb3679d2456847e25ed05c281834e414436f0a9abe4e90\",\"dweb:/ipfs/QmNr6PJJJj36BtaMnjxWEg7AbPZpXvzWm57V8YGJAVfcf3\"]},\"src/interfaces/external/balancer/liquidity-mining/ILiquidityGauge.sol\":{\"keccak256\":\"0xa22f0c0868adb9d06d097ecb0a8d8370a6e59d223ef1e07a58340191c402e9ea\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://558942e9f7ff6c6f2becffc28da21bf897e043ceea6bed95d2a362e0eceedbe6\",\"dweb:/ipfs/QmU51CezK36UmBpArAcBmXrDmC5ozDmTrconGfj8pr8NYL\"]},\"src/interfaces/external/balancer/liquidity-mining/ILiquidityGaugeFactory.sol\":{\"keccak256\":\"0xda0ac94f1b3f6025bfa0e4ddc446d372129042c5c7c22a43364db0c7b27cccf0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3e0c802001ffe995d8f592aa4c1e938e49a2be3c645262733a4e63f849514792\",\"dweb:/ipfs/QmQT2H8A69NRHqYFnnBYcnmW7nhkr9fppt6MQB4C4XTwwD\"]},\"src/interfaces/external/balancer/liquidity-mining/IRewardTokenDistributor.sol\":{\"keccak256\":\"0xd9476c8423eab4c40a3f4a25d343c7ab194985ef5ad2498758ae8cfd569dcd2a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4eedabb61c239ecd3e6f2b675cf176db87bbd2b8e54f6190f47001a1a455f875\",\"dweb:/ipfs/QmRsR9KiVJWBuQK3EBRfCVxdDZBTYmfK7CeBebdkeBX6HE\"]},\"src/interfaces/external/balancer/liquidity-mining/ISmartWalletChecker.sol\":{\"keccak256\":\"0x8f76f086f3d153b7542a027abdf7a5c5ca71acef1525d9a0a2219e561133c42c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://10e75e488da4be267b28819a0fad4507a42476f14136a8cf6c283bc2d14515d9\",\"dweb:/ipfs/QmfXQibu6k9zCT55DGWTTHaD4JkeTyu8Rnugfkx7GpknWk\"]},\"src/interfaces/external/balancer/liquidity-mining/IStakelessGauge.sol\":{\"keccak256\":\"0x382c8887b34c0f6162dc04d087ba827ecd8d0b78663602fbd653c9b9c4a21abb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ba9bd6d5025721722dd374161b093f93c84db8ba8e0b54982866c6c79e518b3d\",\"dweb:/ipfs/QmXyQ1k5aKmA5a4FWj8b4c9GKaDFJJy6DffVgknN15uzqE\"]},\"src/interfaces/external/balancer/liquidity-mining/IStakelessGaugeCheckpointer.sol\":{\"keccak256\":\"0x50735556052de1dbb8fe97b7bd40174fe3ffb86278a439f6d7abb33330a970d7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7a066e9ed912543b4ed521e420a48aa45313a5c39dc9d3c99a6733727015d6ac\",\"dweb:/ipfs/QmSPGc9M9QfZgZ9FZKowGTRfKo2pPqJrBzxTWPxNEgJ4Hn\"]},\"src/interfaces/external/balancer/liquidity-mining/IStakingLiquidityGauge.sol\":{\"keccak256\":\"0xa99cdc7d85b012b7d64eb26a4dafde52314bfe9162973eb66d0bd9241b342877\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bb5a8c580619a9cb730fe9d333d424db6ed9f5187ba7729beb0df474a64f6733\",\"dweb:/ipfs/QmboYxDELyqkNW7jjb8Ut5g7meDA1HcxsKsX5zmPNyFBPr\"]},\"src/interfaces/external/balancer/liquidity-mining/IVotingEscrow.sol\":{\"keccak256\":\"0xbf08c2800a22fb2f2b6bdfb6fc18aefb8a1fe302958a1053c6cc952b5e64b5e0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://41375a51dd8822d3c46047621dcad60e66e272af7f7d58b0dfd7712d40c30ed6\",\"dweb:/ipfs/QmbsaZkB5NEQJ1UtiWRja8LuLesyKaFVfq9g1L1HxSLC6g\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1\",\"dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3\",\"dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5\",\"dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z\"]},\"src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6\",\"dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6\"]},\"src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f\",\"dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U\"]},\"src/interfaces/external/balancer/vault/IAsset.sol\":{\"keccak256\":\"0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4\",\"dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn\"]},\"src/interfaces/external/balancer/vault/IAuthorizer.sol\":{\"keccak256\":\"0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1\",\"dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34\"]},\"src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039\",\"dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC\"]},\"src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a\",\"dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK\"]},\"src/interfaces/external/balancer/vault/IVault.sol\":{\"keccak256\":\"0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d\",\"dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IStakelessGauge",
              "name": "gauge",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "indexedGaugeType",
              "type": "string",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "GaugeAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IStakelessGauge",
              "name": "gauge",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "indexedGaugeType",
              "type": "string",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "GaugeRemoved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "contract IStakelessGauge[]",
              "name": "gauges",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addGauges"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "contract IStakelessGauge[]",
              "name": "gauges",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addGaugesWithVerifiedType"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "minRelativeWeight",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "checkpointGaugesAboveRelativeWeight"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minRelativeWeight",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "checkpointGaugesOfTypeAboveRelativeWeight"
        },
        {
          "inputs": [
            {
              "internalType": "string[]",
              "name": "gaugeTypes",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "gauges",
              "type": "address[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "checkpointMultipleGauges"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "checkpointSingleGauge"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGaugeAdder",
          "outputs": [
            {
              "internalType": "contract IGaugeAdder",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getGaugeAtIndex",
          "outputs": [
            {
              "internalType": "contract IStakelessGauge",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGaugeTypes",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoundedDownBlockTimestamp",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSingleBridgeCost",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "minRelativeWeight",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalBridgeCost",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalGauges",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "contract IStakelessGauge",
              "name": "gauge",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasGauge",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidGaugeType",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "gaugeType",
              "type": "string"
            },
            {
              "internalType": "contract IStakelessGauge[]",
              "name": "gauges",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeGauges"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addGauges(string,address[])": {
            "details": "Gauges added will be considered when performing checkpoints. The gauges to add should meet the following preconditions: - They must have been created in a valid `GaugeFactory`, according to `GaugeAdder#isGaugeFromValidFactory`. - They must exist in the `GaugeController`, according to `GaugeController#gauge_exists`. - They must not be killed. - They must not have been previously added to the checkpointer.",
            "params": {
              "gaugeType": "Type of the gauge.",
              "gauges": "Gauges to add."
            }
          },
          "addGaugesWithVerifiedType(string,address[])": {
            "details": "Gauges added will be considered when performing checkpoints. The gauges to add should meet the following preconditions: - They must exist in the GaugeController, according to GaugeController#gauge_exists. - They must not be killed. - They must not have been previously added to the checkpointer. Unlike `addGauges`, this function can add gauges that were created by factories registered in a deprecated `GaugeAdder`, and therefore cannot be validated by the current `GaugeAdder`.",
            "params": {
              "gaugeType": "Type of the gauge.",
              "gauges": "Gauges to add."
            }
          },
          "checkpointGaugesAboveRelativeWeight(uint256)": {
            "details": "Reverts if the ETH sent in the call is not enough to cover bridge costs.",
            "params": {
              "minRelativeWeight": "Threshold to filter out gauges below it."
            }
          },
          "checkpointGaugesOfTypeAboveRelativeWeight(string,uint256)": {
            "details": "Reverts if the ETH sent in the call is not enough to cover bridge costs.",
            "params": {
              "gaugeType": "Type of the gauge.",
              "minRelativeWeight": "Threshold to filter out gauges below it."
            }
          },
          "checkpointMultipleGauges(string[],address[])": {
            "params": {
              "gaugeTypes": "Types of the gauges to be checkpointed. If a single type is provided, it is applied to all of the gauges, otherwise the gauge types array should be equal in length to the gauges.",
              "gauges": "Addresses of the gauges to checkpoint."
            }
          },
          "checkpointSingleGauge(string,address)": {
            "params": {
              "gauge": "Address of the gauge to checkpoint.",
              "gaugeType": "Type of the gauge."
            }
          },
          "getGaugeAtIndex(string,uint256)": {
            "details": "Reverts if the index is greater than or equal to the amount of added gauges for the given type.",
            "params": {
              "gaugeType": "Type of the gauge.",
              "index": "- Index of the added gauge."
            }
          },
          "getSingleBridgeCost(string,address)": {
            "details": "Reverts if the gauge was not added to the checkpointer beforehand.",
            "params": {
              "gauge": "Address of the gauge to check the bridge costs.",
              "gaugeType": "Type of the gauge."
            }
          },
          "getTotalBridgeCost(uint256)": {
            "details": "A lower minimum relative weight might return higher costs, since more gauges could potentially be included in the checkpoint."
          },
          "getTotalGauges(string)": {
            "params": {
              "gaugeType": "Type of the gauge."
            }
          },
          "hasGauge(string,address)": {
            "params": {
              "gauge": "Gauge to check.",
              "gaugeType": "Type of the gauge."
            }
          },
          "removeGauges(string,address[])": {
            "details": "Removed gauges will not be considered when performing checkpoints. To remove gauges: - They must be killed. - They must have been previously added to the checkpointer.",
            "params": {
              "gaugeType": "Type of the gauge.",
              "gauges": "Gauges to remove."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addGauges(string,address[])": {
            "notice": "Adds an array of gauges from the given type."
          },
          "addGaugesWithVerifiedType(string,address[])": {
            "notice": "Adds an array of gauges from the given type. This is a permissioned function."
          },
          "checkpointGaugesAboveRelativeWeight(uint256)": {
            "notice": "Performs a checkpoint for all added gauges above the given relative weight threshold."
          },
          "checkpointGaugesOfTypeAboveRelativeWeight(string,uint256)": {
            "notice": "Performs a checkpoint for all added gauges of a given type above the given relative weight threshold."
          },
          "checkpointMultipleGauges(string[],address[])": {
            "notice": "Performs a checkpoint for a multiple added gauges of the given types. Reverts if the ETH sent in the call is not enough to cover bridge costs. Reverts if the gauges were not added to the checkpointer beforehand."
          },
          "checkpointSingleGauge(string,address)": {
            "notice": "Performs a checkpoint for a single added gauge of a given type. Reverts if the ETH sent in the call is not enough to cover bridge costs. Reverts if the gauge was not added to the checkpointer beforehand."
          },
          "getGaugeAdder()": {
            "notice": "Returns `GaugeAdder` contract."
          },
          "getGaugeAtIndex(string,uint256)": {
            "notice": "Returns the gauge of a given type at the given index."
          },
          "getGaugeTypes()": {
            "notice": "Returns gauge types available in the checkpointer."
          },
          "getRoundedDownBlockTimestamp()": {
            "notice": "Returns the timestamp corresponding to the start of the previous week of the current block."
          },
          "getSingleBridgeCost(string,address)": {
            "notice": "Returns the ETH cost to checkpoint a single given gauge."
          },
          "getTotalBridgeCost(uint256)": {
            "notice": "Returns the ETH cost to checkpoint all gauges for a given minimum relative weight."
          },
          "getTotalGauges(string)": {
            "notice": "Returns the amount of added gauges for a given type."
          },
          "hasGauge(string,address)": {
            "notice": "Returns true if the given gauge was added for the given type; false otherwise."
          },
          "isValidGaugeType(string)": {
            "notice": "Returns true if gauge type is valid; false otherwise."
          },
          "removeGauges(string,address[])": {
            "notice": "Removes an array of gauges from the given type."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/balancer/liquidity-mining/IStakelessGaugeCheckpointer.sol": "IStakelessGaugeCheckpointer"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptor.sol": {
        "keccak256": "0x1a9bad00c0084984cd3364cfcdeaece137157816fe8078f706ed78adc803cad7",
        "urls": [
          "bzz-raw://d69ccb7c506a7b56fe8f4e59ee10595d3e5cbb881e8215fdda879ec7bf34a5c6",
          "dweb:/ipfs/QmZc3HoxcdRivJ8xePXBxceAtvxo8LA7P8Rf3pjjED9e7y"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IAuthorizerAdaptorEntrypoint.sol": {
        "keccak256": "0xe2b137c6c84834d761ceb439caa7c7a614da23228b151ea14ed9d3bf794e8f16",
        "urls": [
          "bzz-raw://4686104e5ea47c949c48f3aeb1d930b1a8c8c956bc017c6d06f8db0b002888d1",
          "dweb:/ipfs/QmcfFPtgw5CnQA5fn7TTP1M45NEq1FPtJaA6D5Xh3QfLAB"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol": {
        "keccak256": "0x0c9bc1023d642e781ac95d2588ab6996bd5ad18ae59e80fac176b1528dbdd823",
        "urls": [
          "bzz-raw://a09d3c7c2e64aeee3a6bef19cc07c6c65c1ac39bd82ba57c80be868d89654cbc",
          "dweb:/ipfs/QmSGy6T7VPzeWJfKqQEpFgKgVnvSH6ziXAFoKDMRh5q7P8"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IGaugeController.sol": {
        "keccak256": "0xe5fb4837f4dbe3d0a3a00ca489ebfa2b51cf4145a9a1b8c77c1ad7caeb9ad2e4",
        "urls": [
          "bzz-raw://120b30fc0e0aa38d49cb3679d2456847e25ed05c281834e414436f0a9abe4e90",
          "dweb:/ipfs/QmNr6PJJJj36BtaMnjxWEg7AbPZpXvzWm57V8YGJAVfcf3"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/ILiquidityGauge.sol": {
        "keccak256": "0xa22f0c0868adb9d06d097ecb0a8d8370a6e59d223ef1e07a58340191c402e9ea",
        "urls": [
          "bzz-raw://558942e9f7ff6c6f2becffc28da21bf897e043ceea6bed95d2a362e0eceedbe6",
          "dweb:/ipfs/QmU51CezK36UmBpArAcBmXrDmC5ozDmTrconGfj8pr8NYL"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/ILiquidityGaugeFactory.sol": {
        "keccak256": "0xda0ac94f1b3f6025bfa0e4ddc446d372129042c5c7c22a43364db0c7b27cccf0",
        "urls": [
          "bzz-raw://3e0c802001ffe995d8f592aa4c1e938e49a2be3c645262733a4e63f849514792",
          "dweb:/ipfs/QmQT2H8A69NRHqYFnnBYcnmW7nhkr9fppt6MQB4C4XTwwD"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IRewardTokenDistributor.sol": {
        "keccak256": "0xd9476c8423eab4c40a3f4a25d343c7ab194985ef5ad2498758ae8cfd569dcd2a",
        "urls": [
          "bzz-raw://4eedabb61c239ecd3e6f2b675cf176db87bbd2b8e54f6190f47001a1a455f875",
          "dweb:/ipfs/QmRsR9KiVJWBuQK3EBRfCVxdDZBTYmfK7CeBebdkeBX6HE"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/ISmartWalletChecker.sol": {
        "keccak256": "0x8f76f086f3d153b7542a027abdf7a5c5ca71acef1525d9a0a2219e561133c42c",
        "urls": [
          "bzz-raw://10e75e488da4be267b28819a0fad4507a42476f14136a8cf6c283bc2d14515d9",
          "dweb:/ipfs/QmfXQibu6k9zCT55DGWTTHaD4JkeTyu8Rnugfkx7GpknWk"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IStakelessGauge.sol": {
        "keccak256": "0x382c8887b34c0f6162dc04d087ba827ecd8d0b78663602fbd653c9b9c4a21abb",
        "urls": [
          "bzz-raw://ba9bd6d5025721722dd374161b093f93c84db8ba8e0b54982866c6c79e518b3d",
          "dweb:/ipfs/QmXyQ1k5aKmA5a4FWj8b4c9GKaDFJJy6DffVgknN15uzqE"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IStakelessGaugeCheckpointer.sol": {
        "keccak256": "0x50735556052de1dbb8fe97b7bd40174fe3ffb86278a439f6d7abb33330a970d7",
        "urls": [
          "bzz-raw://7a066e9ed912543b4ed521e420a48aa45313a5c39dc9d3c99a6733727015d6ac",
          "dweb:/ipfs/QmSPGc9M9QfZgZ9FZKowGTRfKo2pPqJrBzxTWPxNEgJ4Hn"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IStakingLiquidityGauge.sol": {
        "keccak256": "0xa99cdc7d85b012b7d64eb26a4dafde52314bfe9162973eb66d0bd9241b342877",
        "urls": [
          "bzz-raw://bb5a8c580619a9cb730fe9d333d424db6ed9f5187ba7729beb0df474a64f6733",
          "dweb:/ipfs/QmboYxDELyqkNW7jjb8Ut5g7meDA1HcxsKsX5zmPNyFBPr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/liquidity-mining/IVotingEscrow.sol": {
        "keccak256": "0xbf08c2800a22fb2f2b6bdfb6fc18aefb8a1fe302958a1053c6cc952b5e64b5e0",
        "urls": [
          "bzz-raw://41375a51dd8822d3c46047621dcad60e66e272af7f7d58b0dfd7712d40c30ed6",
          "dweb:/ipfs/QmbsaZkB5NEQJ1UtiWRja8LuLesyKaFVfq9g1L1HxSLC6g"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol": {
        "keccak256": "0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842",
        "urls": [
          "bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1",
          "dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol": {
        "keccak256": "0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979",
        "urls": [
          "bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3",
          "dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol": {
        "keccak256": "0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c",
        "urls": [
          "bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5",
          "dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol": {
        "keccak256": "0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9",
        "urls": [
          "bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6",
          "dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol": {
        "keccak256": "0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835",
        "urls": [
          "bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f",
          "dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/balancer/vault/IAsset.sol": {
        "keccak256": "0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef",
        "urls": [
          "bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4",
          "dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IAuthorizer.sol": {
        "keccak256": "0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b",
        "urls": [
          "bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1",
          "dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol": {
        "keccak256": "0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43",
        "urls": [
          "bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039",
          "dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol": {
        "keccak256": "0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a",
        "urls": [
          "bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a",
          "dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IVault.sol": {
        "keccak256": "0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb",
        "urls": [
          "bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d",
          "dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/balancer/liquidity-mining/IStakelessGaugeCheckpointer.sol",
    "id": 57862,
    "exportedSymbols": {
      "IAsset": [
        61808
      ],
      "IAuthentication": [
        60077
      ],
      "IAuthorizer": [
        61823
      ],
      "IAuthorizerAdaptor": [
        56468
      ],
      "IAuthorizerAdaptorEntrypoint": [
        56482
      ],
      "IERC20": [
        60345
      ],
      "IFlashLoanRecipient": [
        62001
      ],
      "IGaugeAdder": [
        57206
      ],
      "IGaugeController": [
        57291
      ],
      "ILiquidityGauge": [
        57381
      ],
      "ILiquidityGaugeFactory": [
        57394
      ],
      "IProtocolFeesCollector": [
        62141
      ],
      "IRewardTokenDistributor": [
        57626
      ],
      "ISignaturesValidator": [
        60129
      ],
      "ISmartWalletChecker": [
        57680
      ],
      "IStakelessGauge": [
        57696
      ],
      "IStakelessGaugeCheckpointer": [
        57861
      ],
      "IStakingLiquidityGauge": [
        57899
      ],
      "ITemporarilyPausable": [
        60148
      ],
      "IVault": [
        63277
      ],
      "IVotingEscrow": [
        58008
      ],
      "IWETH": [
        60253
      ]
    },
    "nodeType": "SourceUnit",
    "src": "688:7185:120",
    "nodes": [
      {
        "id": 57698,
        "nodeType": "PragmaDirective",
        "src": "688:23:120",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 57699,
        "nodeType": "PragmaDirective",
        "src": "712:33:120",
        "nodes": [],
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ]
      },
      {
        "id": 57700,
        "nodeType": "ImportDirective",
        "src": "747:27:120",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/liquidity-mining/IGaugeAdder.sol",
        "file": "./IGaugeAdder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57862,
        "sourceUnit": 57207,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57701,
        "nodeType": "ImportDirective",
        "src": "775:31:120",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/liquidity-mining/IStakelessGauge.sol",
        "file": "./IStakelessGauge.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57862,
        "sourceUnit": 57697,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57861,
        "nodeType": "ContractDefinition",
        "src": "1132:6740:120",
        "nodes": [
          {
            "id": 57712,
            "nodeType": "EventDefinition",
            "src": "1368:99:120",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 57703,
              "nodeType": "StructuredDocumentation",
              "src": "1286:77:120",
              "text": " @notice Emitted when a gauge is added to the checkpointer."
            },
            "name": "GaugeAdded",
            "nameLocation": "1374:10:120",
            "parameters": {
              "id": 57711,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57706,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "gauge",
                  "nameLocation": "1409:5:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57712,
                  "src": "1385:29:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                    "typeString": "contract IStakelessGauge"
                  },
                  "typeName": {
                    "id": 57705,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57704,
                      "name": "IStakelessGauge",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57696,
                      "src": "1385:15:120"
                    },
                    "referencedDeclaration": 57696,
                    "src": "1385:15:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                      "typeString": "contract IStakelessGauge"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57708,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "indexedGaugeType",
                  "nameLocation": "1431:16:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57712,
                  "src": "1416:31:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57707,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1416:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57710,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "1456:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57712,
                  "src": "1449:16:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57709,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1449:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1384:82:120"
            }
          },
          {
            "id": 57722,
            "nodeType": "EventDefinition",
            "src": "1559:101:120",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 57713,
              "nodeType": "StructuredDocumentation",
              "src": "1473:81:120",
              "text": " @notice Emitted when a gauge is removed from the checkpointer."
            },
            "name": "GaugeRemoved",
            "nameLocation": "1565:12:120",
            "parameters": {
              "id": 57721,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57716,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "gauge",
                  "nameLocation": "1602:5:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57722,
                  "src": "1578:29:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                    "typeString": "contract IStakelessGauge"
                  },
                  "typeName": {
                    "id": 57715,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57714,
                      "name": "IStakelessGauge",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57696,
                      "src": "1578:15:120"
                    },
                    "referencedDeclaration": 57696,
                    "src": "1578:15:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                      "typeString": "contract IStakelessGauge"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57718,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "indexedGaugeType",
                  "nameLocation": "1624:16:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57722,
                  "src": "1609:31:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57717,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1609:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57720,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "1649:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57722,
                  "src": "1642:16:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57719,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1642:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1577:82:120"
            }
          },
          {
            "id": 57729,
            "nodeType": "FunctionDefinition",
            "src": "1728:61:120",
            "nodes": [],
            "documentation": {
              "id": 57723,
              "nodeType": "StructuredDocumentation",
              "src": "1666:57:120",
              "text": " @notice Returns `GaugeAdder` contract."
            },
            "functionSelector": "7c1fef51",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGaugeAdder",
            "nameLocation": "1737:13:120",
            "parameters": {
              "id": 57724,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1750:2:120"
            },
            "returnParameters": {
              "id": 57728,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57727,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57729,
                  "src": "1776:11:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IGaugeAdder_$57206",
                    "typeString": "contract IGaugeAdder"
                  },
                  "typeName": {
                    "id": 57726,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57725,
                      "name": "IGaugeAdder",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57206,
                      "src": "1776:11:120"
                    },
                    "referencedDeclaration": 57206,
                    "src": "1776:11:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IGaugeAdder_$57206",
                      "typeString": "contract IGaugeAdder"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1775:13:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57736,
            "nodeType": "FunctionDefinition",
            "src": "1877:65:120",
            "nodes": [],
            "documentation": {
              "id": 57730,
              "nodeType": "StructuredDocumentation",
              "src": "1795:77:120",
              "text": " @notice Returns gauge types available in the checkpointer."
            },
            "functionSelector": "afcb1a86",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGaugeTypes",
            "nameLocation": "1886:13:120",
            "parameters": {
              "id": 57731,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1899:2:120"
            },
            "returnParameters": {
              "id": 57735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57734,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57736,
                  "src": "1925:15:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57732,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "1925:6:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 57733,
                    "nodeType": "ArrayTypeName",
                    "src": "1925:8:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1924:17:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57746,
            "nodeType": "FunctionDefinition",
            "src": "2670:104:120",
            "nodes": [],
            "documentation": {
              "id": 57737,
              "nodeType": "StructuredDocumentation",
              "src": "1948:717:120",
              "text": " @notice Adds an array of gauges from the given type. This is a permissioned function.\n @dev Gauges added will be considered when performing checkpoints.\n The gauges to add should meet the following preconditions:\n - They must exist in the GaugeController, according to GaugeController#gauge_exists.\n - They must not be killed.\n - They must not have been previously added to the checkpointer.\n Unlike `addGauges`, this function can add gauges that were created by factories registered in a deprecated\n `GaugeAdder`, and therefore cannot be validated by the current `GaugeAdder`.\n @param gaugeType Type of the gauge.\n @param gauges Gauges to add."
            },
            "functionSelector": "d8dba2ce",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addGaugesWithVerifiedType",
            "nameLocation": "2679:25:120",
            "parameters": {
              "id": 57744,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57739,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "2719:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57746,
                  "src": "2705:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57738,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2705:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57743,
                  "mutability": "mutable",
                  "name": "gauges",
                  "nameLocation": "2757:6:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57746,
                  "src": "2730:33:120",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IStakelessGauge_$57696_$dyn_calldata_ptr",
                    "typeString": "contract IStakelessGauge[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57741,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 57740,
                        "name": "IStakelessGauge",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 57696,
                        "src": "2730:15:120"
                      },
                      "referencedDeclaration": 57696,
                      "src": "2730:15:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                        "typeString": "contract IStakelessGauge"
                      }
                    },
                    "id": 57742,
                    "nodeType": "ArrayTypeName",
                    "src": "2730:17:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IStakelessGauge_$57696_$dyn_storage_ptr",
                      "typeString": "contract IStakelessGauge[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2704:60:120"
            },
            "returnParameters": {
              "id": 57745,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2773:0:120"
            },
            "scope": 57861,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57756,
            "nodeType": "FunctionDefinition",
            "src": "3390:88:120",
            "nodes": [],
            "documentation": {
              "id": 57747,
              "nodeType": "StructuredDocumentation",
              "src": "2780:605:120",
              "text": " @notice Adds an array of gauges from the given type.\n @dev Gauges added will be considered when performing checkpoints.\n The gauges to add should meet the following preconditions:\n - They must have been created in a valid `GaugeFactory`, according to `GaugeAdder#isGaugeFromValidFactory`.\n - They must exist in the `GaugeController`, according to `GaugeController#gauge_exists`.\n - They must not be killed.\n - They must not have been previously added to the checkpointer.\n @param gaugeType Type of the gauge.\n @param gauges Gauges to add."
            },
            "functionSelector": "f7178b88",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addGauges",
            "nameLocation": "3399:9:120",
            "parameters": {
              "id": 57754,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57749,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "3423:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57756,
                  "src": "3409:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57748,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3409:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57753,
                  "mutability": "mutable",
                  "name": "gauges",
                  "nameLocation": "3461:6:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57756,
                  "src": "3434:33:120",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IStakelessGauge_$57696_$dyn_calldata_ptr",
                    "typeString": "contract IStakelessGauge[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57751,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 57750,
                        "name": "IStakelessGauge",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 57696,
                        "src": "3434:15:120"
                      },
                      "referencedDeclaration": 57696,
                      "src": "3434:15:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                        "typeString": "contract IStakelessGauge"
                      }
                    },
                    "id": 57752,
                    "nodeType": "ArrayTypeName",
                    "src": "3434:17:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IStakelessGauge_$57696_$dyn_storage_ptr",
                      "typeString": "contract IStakelessGauge[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3408:60:120"
            },
            "returnParameters": {
              "id": 57755,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3477:0:120"
            },
            "scope": 57861,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57766,
            "nodeType": "FunctionDefinition",
            "src": "3839:91:120",
            "nodes": [],
            "documentation": {
              "id": 57757,
              "nodeType": "StructuredDocumentation",
              "src": "3484:350:120",
              "text": " @notice Removes an array of gauges from the given type.\n @dev Removed gauges will not be considered when performing checkpoints. To remove gauges:\n - They must be killed.\n - They must have been previously added to the checkpointer.\n @param gaugeType Type of the gauge.\n @param gauges Gauges to remove."
            },
            "functionSelector": "73ebd060",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeGauges",
            "nameLocation": "3848:12:120",
            "parameters": {
              "id": 57764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57759,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "3875:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57766,
                  "src": "3861:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57758,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3861:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57763,
                  "mutability": "mutable",
                  "name": "gauges",
                  "nameLocation": "3913:6:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57766,
                  "src": "3886:33:120",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IStakelessGauge_$57696_$dyn_calldata_ptr",
                    "typeString": "contract IStakelessGauge[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57761,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 57760,
                        "name": "IStakelessGauge",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 57696,
                        "src": "3886:15:120"
                      },
                      "referencedDeclaration": 57696,
                      "src": "3886:15:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                        "typeString": "contract IStakelessGauge"
                      }
                    },
                    "id": 57762,
                    "nodeType": "ArrayTypeName",
                    "src": "3886:17:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IStakelessGauge_$57696_$dyn_storage_ptr",
                      "typeString": "contract IStakelessGauge[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3860:60:120"
            },
            "returnParameters": {
              "id": 57765,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3929:0:120"
            },
            "scope": 57861,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57777,
            "nodeType": "FunctionDefinition",
            "src": "4125:95:120",
            "nodes": [],
            "documentation": {
              "id": 57767,
              "nodeType": "StructuredDocumentation",
              "src": "3936:184:120",
              "text": " @notice Returns true if the given gauge was added for the given type; false otherwise.\n @param gaugeType Type of the gauge.\n @param gauge Gauge to check."
            },
            "functionSelector": "c91be043",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "hasGauge",
            "nameLocation": "4134:8:120",
            "parameters": {
              "id": 57773,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57769,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "4157:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57777,
                  "src": "4143:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57768,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4143:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57772,
                  "mutability": "mutable",
                  "name": "gauge",
                  "nameLocation": "4184:5:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57777,
                  "src": "4168:21:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                    "typeString": "contract IStakelessGauge"
                  },
                  "typeName": {
                    "id": 57771,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57770,
                      "name": "IStakelessGauge",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57696,
                      "src": "4168:15:120"
                    },
                    "referencedDeclaration": 57696,
                    "src": "4168:15:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                      "typeString": "contract IStakelessGauge"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4142:48:120"
            },
            "returnParameters": {
              "id": 57776,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57775,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57777,
                  "src": "4214:4:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 57774,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4214:4:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4213:6:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57785,
            "nodeType": "FunctionDefinition",
            "src": "4353:81:120",
            "nodes": [],
            "documentation": {
              "id": 57778,
              "nodeType": "StructuredDocumentation",
              "src": "4226:122:120",
              "text": " @notice Returns the amount of added gauges for a given type.\n @param gaugeType Type of the gauge."
            },
            "functionSelector": "4db34d2a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTotalGauges",
            "nameLocation": "4362:14:120",
            "parameters": {
              "id": 57781,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57780,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "4391:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57785,
                  "src": "4377:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57779,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4377:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4376:25:120"
            },
            "returnParameters": {
              "id": 57784,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57783,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57785,
                  "src": "4425:7:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57782,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4425:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4424:9:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57796,
            "nodeType": "FunctionDefinition",
            "src": "4724:105:120",
            "nodes": [],
            "documentation": {
              "id": 57786,
              "nodeType": "StructuredDocumentation",
              "src": "4440:279:120",
              "text": " @notice Returns the gauge of a given type at the given index.\n @dev Reverts if the index is greater than or equal to the amount of added gauges for the given type.\n @param gaugeType Type of the gauge.\n @param index - Index of the added gauge."
            },
            "functionSelector": "27cb2a3b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGaugeAtIndex",
            "nameLocation": "4733:15:120",
            "parameters": {
              "id": 57791,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57788,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "4763:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57796,
                  "src": "4749:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57787,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4749:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57790,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "4782:5:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57796,
                  "src": "4774:13:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57789,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4774:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4748:40:120"
            },
            "returnParameters": {
              "id": 57795,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57794,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57796,
                  "src": "4812:15:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                    "typeString": "contract IStakelessGauge"
                  },
                  "typeName": {
                    "id": 57793,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57792,
                      "name": "IStakelessGauge",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57696,
                      "src": "4812:15:120"
                    },
                    "referencedDeclaration": 57696,
                    "src": "4812:15:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakelessGauge_$57696",
                      "typeString": "contract IStakelessGauge"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4811:17:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57802,
            "nodeType": "FunctionDefinition",
            "src": "4958:72:120",
            "nodes": [],
            "documentation": {
              "id": 57797,
              "nodeType": "StructuredDocumentation",
              "src": "4835:118:120",
              "text": " @notice Returns the timestamp corresponding to the start of the previous week of the current block."
            },
            "functionSelector": "46583adf",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRoundedDownBlockTimestamp",
            "nameLocation": "4967:28:120",
            "parameters": {
              "id": 57798,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4995:2:120"
            },
            "returnParameters": {
              "id": 57801,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57800,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57802,
                  "src": "5021:7:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57799,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5021:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5020:9:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57808,
            "nodeType": "FunctionDefinition",
            "src": "5311:89:120",
            "nodes": [],
            "documentation": {
              "id": 57803,
              "nodeType": "StructuredDocumentation",
              "src": "5036:270:120",
              "text": " @notice Performs a checkpoint for all added gauges above the given relative weight threshold.\n @dev Reverts if the ETH sent in the call is not enough to cover bridge costs.\n @param minRelativeWeight Threshold to filter out gauges below it."
            },
            "functionSelector": "d14cfe3b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "checkpointGaugesAboveRelativeWeight",
            "nameLocation": "5320:35:120",
            "parameters": {
              "id": 57806,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57805,
                  "mutability": "mutable",
                  "name": "minRelativeWeight",
                  "nameLocation": "5364:17:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57808,
                  "src": "5356:25:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57804,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5356:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5355:27:120"
            },
            "returnParameters": {
              "id": 57807,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5399:0:120"
            },
            "scope": 57861,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57816,
            "nodeType": "FunctionDefinition",
            "src": "5740:142:120",
            "nodes": [],
            "documentation": {
              "id": 57809,
              "nodeType": "StructuredDocumentation",
              "src": "5406:329:120",
              "text": " @notice Performs a checkpoint for all added gauges of a given type above the given relative weight threshold.\n @dev Reverts if the ETH sent in the call is not enough to cover bridge costs.\n @param gaugeType Type of the gauge.\n @param minRelativeWeight Threshold to filter out gauges below it."
            },
            "functionSelector": "db5d1225",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "checkpointGaugesOfTypeAboveRelativeWeight",
            "nameLocation": "5749:41:120",
            "parameters": {
              "id": 57814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57811,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "5814:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57816,
                  "src": "5800:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57810,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5800:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57813,
                  "mutability": "mutable",
                  "name": "minRelativeWeight",
                  "nameLocation": "5841:17:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57816,
                  "src": "5833:25:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57812,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5833:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5790:74:120"
            },
            "returnParameters": {
              "id": 57815,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5881:0:120"
            },
            "scope": 57861,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57824,
            "nodeType": "FunctionDefinition",
            "src": "6236:88:120",
            "nodes": [],
            "documentation": {
              "id": 57817,
              "nodeType": "StructuredDocumentation",
              "src": "5888:343:120",
              "text": " @notice Performs a checkpoint for a single added gauge of a given type.\n Reverts if the ETH sent in the call is not enough to cover bridge costs.\n Reverts if the gauge was not added to the checkpointer beforehand.\n @param gaugeType Type of the gauge.\n @param gauge Address of the gauge to checkpoint."
            },
            "functionSelector": "7d0a6616",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "checkpointSingleGauge",
            "nameLocation": "6245:21:120",
            "parameters": {
              "id": 57822,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57819,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "6281:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57824,
                  "src": "6267:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57818,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6267:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57821,
                  "mutability": "mutable",
                  "name": "gauge",
                  "nameLocation": "6300:5:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57824,
                  "src": "6292:13:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 57820,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6292:7:120",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6266:40:120"
            },
            "returnParameters": {
              "id": 57823,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6323:0:120"
            },
            "scope": 57861,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57834,
            "nodeType": "FunctionDefinition",
            "src": "6858:104:120",
            "nodes": [],
            "documentation": {
              "id": 57825,
              "nodeType": "StructuredDocumentation",
              "src": "6330:523:120",
              "text": " @notice Performs a checkpoint for a multiple added gauges of the given types.\n Reverts if the ETH sent in the call is not enough to cover bridge costs.\n Reverts if the gauges were not added to the checkpointer beforehand.\n @param gaugeTypes Types of the gauges to be checkpointed. If a single type is provided, it is applied to all of\n the gauges, otherwise the gauge types array should be equal in length to the gauges.\n @param gauges Addresses of the gauges to checkpoint."
            },
            "functionSelector": "4a3a1e11",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "checkpointMultipleGauges",
            "nameLocation": "6867:24:120",
            "parameters": {
              "id": 57832,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57828,
                  "mutability": "mutable",
                  "name": "gaugeTypes",
                  "nameLocation": "6908:10:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57834,
                  "src": "6892:26:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57826,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "6892:6:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 57827,
                    "nodeType": "ArrayTypeName",
                    "src": "6892:8:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57831,
                  "mutability": "mutable",
                  "name": "gauges",
                  "nameLocation": "6937:6:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57834,
                  "src": "6920:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57829,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "6920:7:120",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 57830,
                    "nodeType": "ArrayTypeName",
                    "src": "6920:9:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6891:53:120"
            },
            "returnParameters": {
              "id": 57833,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6961:0:120"
            },
            "scope": 57861,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57844,
            "nodeType": "FunctionDefinition",
            "src": "7246:101:120",
            "nodes": [],
            "documentation": {
              "id": 57835,
              "nodeType": "StructuredDocumentation",
              "src": "6968:273:120",
              "text": " @notice Returns the ETH cost to checkpoint a single given gauge.\n @dev Reverts if the gauge was not added to the checkpointer beforehand.\n @param gaugeType Type of the gauge.\n @param gauge Address of the gauge to check the bridge costs."
            },
            "functionSelector": "2adbe5ac",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSingleBridgeCost",
            "nameLocation": "7255:19:120",
            "parameters": {
              "id": 57840,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57837,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "7289:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57844,
                  "src": "7275:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57836,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7275:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57839,
                  "mutability": "mutable",
                  "name": "gauge",
                  "nameLocation": "7308:5:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57844,
                  "src": "7300:13:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 57838,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7300:7:120",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7274:40:120"
            },
            "returnParameters": {
              "id": 57843,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57842,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57844,
                  "src": "7338:7:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57841,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7338:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7337:9:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57852,
            "nodeType": "FunctionDefinition",
            "src": "7612:87:120",
            "nodes": [],
            "documentation": {
              "id": 57845,
              "nodeType": "StructuredDocumentation",
              "src": "7353:254:120",
              "text": " @notice Returns the ETH cost to checkpoint all gauges for a given minimum relative weight.\n @dev A lower minimum relative weight might return higher costs, since more gauges could potentially be included\n in the checkpoint."
            },
            "functionSelector": "27f79107",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTotalBridgeCost",
            "nameLocation": "7621:18:120",
            "parameters": {
              "id": 57848,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57847,
                  "mutability": "mutable",
                  "name": "minRelativeWeight",
                  "nameLocation": "7648:17:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57852,
                  "src": "7640:25:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57846,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7640:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7639:27:120"
            },
            "returnParameters": {
              "id": 57851,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57850,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57852,
                  "src": "7690:7:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57849,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7690:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7689:9:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57860,
            "nodeType": "FunctionDefinition",
            "src": "7790:80:120",
            "nodes": [],
            "documentation": {
              "id": 57853,
              "nodeType": "StructuredDocumentation",
              "src": "7705:80:120",
              "text": " @notice Returns true if gauge type is valid; false otherwise."
            },
            "functionSelector": "16e772bc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isValidGaugeType",
            "nameLocation": "7799:16:120",
            "parameters": {
              "id": 57856,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57855,
                  "mutability": "mutable",
                  "name": "gaugeType",
                  "nameLocation": "7830:9:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 57860,
                  "src": "7816:23:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57854,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7816:6:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7815:25:120"
            },
            "returnParameters": {
              "id": 57859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57858,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57860,
                  "src": "7864:4:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 57857,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7864:4:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7863:6:120"
            },
            "scope": 57861,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IStakelessGaugeCheckpointer",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 57702,
          "nodeType": "StructuredDocumentation",
          "src": "808:323:120",
          "text": " @title Stakeless Gauge Checkpointer interface\n @notice Manages checkpoints for L2 and mainnet stakeless root gauges, allowing to perform mutiple checkpoints in a\n single call.\n @dev Supports gauge types registered in `GaugeAdder`.\n Gauges to be checkpointed need to be added to the controller beforehand."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          57861
        ],
        "name": "IStakelessGaugeCheckpointer",
        "nameLocation": "1142:27:120",
        "scope": 57862,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 120
}