{
  "abi": [
    {
      "inputs": [],
      "name": "adjustPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexOutputToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditFacade",
      "outputs": [
        {
          "internalType": "contract ICreditFacade",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditManager",
      "outputs": [
        {
          "internalType": "contract ICreditManagerV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "externalCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetsOnCreditAccountValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentAllAssetsValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimableRewardsValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreditAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMerkleProof",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "vaultTokens_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "helper_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isVaultToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginalFactorD9",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCall[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openCreditAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentPrimaryTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "openCreditAccountInManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryIndex",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "pull",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullExistentials",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "push",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "reclaimTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "merkleIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "merkleTotalAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof_",
          "type": "bytes32[]"
        }
      ],
      "name": "setMerkleParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter.ExactOutputParams",
          "name": "uniParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "transferAndPush",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "minTokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marginalFactorD_",
          "type": "uint256"
        }
      ],
      "name": "updateTargetMarginalFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultGovernance",
      "outputs": [
        {
          "internalType": "contract IVaultGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "adjustPosition()": "67f34f49",
    "convexOutputToken()": "6b3cff53",
    "creditFacade()": "2f7a1881",
    "creditManager()": "c12c21c0",
    "depositToken()": "c89039c5",
    "externalCall(address,bytes4,bytes)": "2e2f4cc2",
    "getAllAssetsOnCreditAccountValue()": "636a411d",
    "getClaimableRewardsValue()": "ce1f65e4",
    "getCreditAccount()": "43b8865d",
    "getMerkleProof()": "1aa2829a",
    "initialize(uint256,address[],address)": "52af719f",
    "initialized()": "158ef93e",
    "isValidSignature(bytes32,bytes)": "1626ba7e",
    "isVaultToken(address)": "338c4ccb",
    "marginalFactorD9()": "f4b9b143",
    "merkleIndex()": "49288e39",
    "merkleTotalAmount()": "d37c4707",
    "multicall((address,bytes)[])": "caa5c23f",
    "nft()": "47ccca02",
    "openCreditAccount()": "5aba4b24",
    "openCreditAccountInManager(uint256,uint16)": "0fae7ae7",
    "poolId()": "3e0dc34e",
    "primaryIndex()": "ea8d87a3",
    "primaryToken()": "91ac094c",
    "pull(address,address[],uint256[],bytes)": "2062d754",
    "pullExistentials()": "d2c219b0",
    "push(address[],uint256[],bytes)": "566ca6b4",
    "reclaimTokens(address[])": "05e1c942",
    "setMerkleParameters(uint256,uint256,bytes32[])": "d769e433",
    "supportsInterface(bytes4)": "01ffc9a7",
    "swap(address,(bytes,address,uint256,uint256,uint256),address,uint256)": "f7283796",
    "transferAndPush(address,address[],uint256[],bytes)": "27a35e5a",
    "tvl()": "e5328e06",
    "updateTargetMarginalFactor(uint256)": "85c3c33e",
    "vaultGovernance()": "fe255a5e",
    "vaultTokens()": "69722233"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"adjustPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexOutputToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditFacade\",\"outputs\":[{\"internalType\":\"contract ICreditFacade\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract ICreditManagerV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"externalCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetsOnCreditAccountValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentAllAssetsValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableRewardsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"vaultTokens_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"helper_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isVaultToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginalFactorD9\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCreditAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrimaryTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"openCreditAccountInManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"pull\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullExistentials\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"push\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"reclaimTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merkleIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merkleTotalAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof_\",\"type\":\"bytes32[]\"}],\"name\":\"setMerkleParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"uniParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"transferAndPush\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marginalFactorD_\",\"type\":\"uint256\"}],\"name\":\"updateTargetMarginalFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultGovernance\",\"outputs\":[{\"internalType\":\"contract IVaultGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"externalCall(address,bytes4,bytes)\":{\"details\":\"Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. Since this method allows sending arbitrary transactions, the destinations of the calls are whitelisted by Protocol Governance.\",\"params\":{\"data\":\"Abi encoded parameters to `to::selector`\",\"selector\":\"Selector of the call\",\"to\":\"Address of the reward pool\"},\"returns\":{\"result\":\"Result of execution of the call\"}},\"initialize(uint256,address[],address)\":{\"details\":\"Can only be initialized by vault governance\",\"params\":{\"helper_\":\"address of helper\",\"nft_\":\"NFT of the vault in the VaultRegistry\",\"vaultTokens_\":\"ERC20 tokens that will be managed by this Vault\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided hash MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls\",\"params\":{\"_hash\":\"Hash of the data to be signed\",\"_signature\":\"Signature byte array associated with _hash\"},\"returns\":{\"magicValue\":\"0x1626ba7e if valid, 0xffffffff otherwise\"}},\"isVaultToken(address)\":{\"params\":{\"token\":\"Address of the token to check\"},\"returns\":{\"_0\":\"`true` if this token is managed by Vault\"}},\"pull(address,address[],uint256[],bytes)\":{\"details\":\"Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. When called by vault owner this method just pulls the tokens from the protocol to the `to` address When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault) When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left. Thus any vault other than zero vault cannot have any tokens on it Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\",\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"to\":\"Address to receive the tokens\",\"tokenAmounts\":\"Amounts of tokens to pull\",\"tokens\":\"Tokens to pull\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\"}},\"push(address[],uint256[],bytes)\":{\"details\":\"Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\",\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"tokenAmounts\":\"Amounts of tokens to push\",\"tokens\":\"Tokens to push\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually invested. It could be less than tokenAmounts (but not higher)\"}},\"reclaimTokens(address[])\":{\"details\":\"Cannot be called from zero vault.\",\"params\":{\"tokens\":\"Tokens to claim\"},\"returns\":{\"actualTokenAmounts\":\"Amounts reclaimed\"}},\"setMerkleParameters(uint256,uint256,bytes32[])\":{\"params\":{\"merkleIndex_\":\"Required index\",\"merkleProof_\":\"Proof in Merkle tree\",\"merkleTotalAmount_\":\"Total amount of NFTs we have in Gearbox Degen Contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferAndPush(address,address[],uint256[],bytes)\":{\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"tokenAmounts\":\"Amounts of tokens to push\",\"tokens\":\"Tokens to push\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually invested. It could be less than tokenAmounts (but not higher)\"}},\"tvl()\":{\"details\":\"Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\",\"returns\":{\"maxTokenAmounts\":\"Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\",\"minTokenAmounts\":\"Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\"}},\"updateTargetMarginalFactor(uint256)\":{\"params\":{\"marginalFactorD_\":\"New marginalFactorD9\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adjustPosition()\":{\"notice\":\"Adjust a position (takes more debt or repays some, depending on the past performance) to achieve the required marginalFactorD9\"},\"convexOutputToken()\":{\"notice\":\"The address of the convex token we receive after staking Convex LPs\"},\"creditFacade()\":{\"notice\":\"Reference to the Gearbox creditFacade contract for the primary token of this vault.\"},\"creditManager()\":{\"notice\":\"Reference to the Gearbox creditManager contract for the primary token of this vault.\"},\"depositToken()\":{\"notice\":\"Deposit token of the vault, deposits/withdawals are made in this token (might be the same or different with primaryToken)\"},\"externalCall(address,bytes4,bytes)\":{\"notice\":\"Execute one of whitelisted calls.\"},\"getAllAssetsOnCreditAccountValue()\":{\"notice\":\"Returns value of all assets located on the vault, including taken with leverage (nominated in primary tokens)\"},\"getClaimableRewardsValue()\":{\"notice\":\"Returns value of rewards (CRV, CVX) we can obtain from Convex (nominated in primary tokens)\"},\"getCreditAccount()\":{\"notice\":\"Returns an address of the credit account connected to the address of the vault\"},\"getMerkleProof()\":{\"notice\":\"Proof used for claiming in Gearbox V2 Degen contract\"},\"initialize(uint256,address[],address)\":{\"notice\":\"Initialized a new contract.\"},\"initialized()\":{\"notice\":\"Checks if the vault is initialized\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Verifies offchain signature.\"},\"isVaultToken(address)\":{\"notice\":\"Checks if a token is vault token\"},\"marginalFactorD9()\":{\"notice\":\"The leverage factor of the vault, multiplied by 10^9 For a vault with X usd of collateral and marginal factor T >= 1, total assets (collateral + debt) should be equal to X * T\"},\"merkleIndex()\":{\"notice\":\"Index used for claiming in Gearbox V2 Degen contract\"},\"merkleTotalAmount()\":{\"notice\":\"NFTs amount used for claiming in Gearbox V2 Degen contract\"},\"multicall((address,bytes)[])\":{\"notice\":\"A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault Can be successfully called only by the helper\"},\"nft()\":{\"notice\":\"VaultRegistry NFT for this vault\"},\"openCreditAccount()\":{\"notice\":\"Opens a new credit account on the address of the vault\"},\"openCreditAccountInManager(uint256,uint16)\":{\"notice\":\"A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault Can be successfully called only by the helper\"},\"poolId()\":{\"notice\":\"The index of the curve pool the vault invests into\"},\"primaryIndex()\":{\"notice\":\"The index of the primary token in the used curve pool\"},\"primaryToken()\":{\"notice\":\"Primary token of the vault, for this token a credit account is opened in Gearbox.\"},\"pull(address,address[],uint256[],bytes)\":{\"notice\":\"Pulls tokens from the underlying protocol to the `to` address.\"},\"pullExistentials()\":{\"notice\":\"Existential amounts for each token\"},\"push(address[],uint256[],bytes)\":{\"notice\":\"Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from the contract balance and convert it to yUSDC.\"},\"reclaimTokens(address[])\":{\"notice\":\"Claim ERC20 tokens from vault balance to zero vault.\"},\"setMerkleParameters(uint256,uint256,bytes32[])\":{\"notice\":\"Sets merkle tree parameters for claiming Gearbox V2 Degen NFT (can be successfully called only by an admin or a strategist)\"},\"swap(address,(bytes,address,uint256,uint256,uint256),address,uint256)\":{\"notice\":\"A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault Can be successfully called only by the helper\"},\"transferAndPush(address,address[],uint256[],bytes)\":{\"notice\":\"The same as `push` method above but transfers tokens to vault balance prior to calling push. After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\"},\"tvl()\":{\"notice\":\"Total value locked for this contract.\"},\"updateTargetMarginalFactor(uint256)\":{\"notice\":\"Updates marginalFactorD9 (can be successfully called only by an admin or a strategist)\"},\"vaultGovernance()\":{\"notice\":\"Address of the Vault Governance for this contract.\"},\"vaultTokens()\":{\"notice\":\"ERC20 tokens under Vault management.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/vaults/IGearboxVault.sol\":\"IGearboxVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276\",\"dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"src/interfaces/IProtocolGovernance.sol\":{\"keccak256\":\"0x56c5ffe3c7a0414fbe269fb65d5181c41c0937f2d854b35ac11d11d143b4025e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3c06dabc1ab8741d81f8f941230bb19d66c4a32707a984e2e48952f6d86a281\",\"dweb:/ipfs/Qmb47fn3Wpe38NyJ5f4Gzbthd6HimRBNDVU82JWwsyR36b\"]},\"src/interfaces/IUnitPricesGovernance.sol\":{\"keccak256\":\"0x9fc3abc68aeebff7927937d8a3ebe876a26550c95da8941b7a123583c6812081\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a323e55a7dd91bbe02329783c6fa447b3dfec8aa963f10a7bcd4aee986d7ca87\",\"dweb:/ipfs/QmRShHKXzDsxUDbSzhRQTZmagzYeP2Q7KAx1t4SVomn6Gk\"]},\"src/interfaces/IVaultRegistry.sol\":{\"keccak256\":\"0xbbff9405f05886e694fbb4ed6a39a85f05cd05ee28a8b689c62be86230b9be55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b9c10d208a2533045f2d00fccfdec42f20ac4a608e850e663be05075eeb3b50\",\"dweb:/ipfs/QmRFPZZVBdYvTLEW5zLjHzivVKH4Ug9mJKom5yq18cVij1\"]},\"src/interfaces/external/erc/IERC1271.sol\":{\"keccak256\":\"0x9f1bfb74bae3843c5ca1fc666cd9d7cef51a97b713b03d9de1023c7e3ba22d36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9053f788f8a2e5ba615a9f3069de68526f6784f60925e6aac9639fa167ee2779\",\"dweb:/ipfs/Qmc5Te45rStvUcDbArTk7jrqNoWuYTJJP4XiBK8PSYDDDd\"]},\"src/interfaces/external/gearbox/ICreditFacade.sol\":{\"keccak256\":\"0x9c61f736793e3244ce9978bbc812160960103ca24f99d543fc8f70d7a983a98a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21034e103c20a08a00cc60da4b9a1d627859c834d717324a160dbc971aacbe6f\",\"dweb:/ipfs/QmRDfCFYuNzpbfFrEnVtUFqPiSd1JCazjrvbpwB9PYgyFs\"]},\"src/interfaces/external/gearbox/IUniswapV3Adapter.sol\":{\"keccak256\":\"0xf5bed84431a948929c38d3c17c410f866f0fc36b9f968e92b3974b1253b18d65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fae7cc9b19b0067914bfe080d64fdfaf4c637fbc8babff8dd476cb148f34060\",\"dweb:/ipfs/Qmay7YWYoX7iKnRWvyrERQVt3hqF8m8Q4gnSReHeyKAVYr\"]},\"src/interfaces/external/gearbox/helpers/IAdapter.sol\":{\"keccak256\":\"0xa80b0d1b8178f75309aea48304c46522a5aeeeeb7a91013b0482da01b06e4cfb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://097e49823c8445dd1eb8dfe20daf276d29ddea97ee38d941b18bb08e6c634510\",\"dweb:/ipfs/QmedmvL5vT63JvYnSRUNC1iNhL6Wf9v8w1Jtvu2FZKRMDC\"]},\"src/interfaces/external/gearbox/helpers/ICreditManagerV2.sol\":{\"keccak256\":\"0xf9aefda5462194b70878870317f741dde46e2f8df6d851d7bca463040d7bfba6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e3d1a6bde67ed1194a2fbe8e872a5aa0c5bec5aa9cb0cd70ee904d8be666851\",\"dweb:/ipfs/QmTqPiMMh9vkc5o4ytXQUUsKHZComobm3cveRwqJCKKSFU\"]},\"src/interfaces/external/gearbox/helpers/IPriceOracle.sol\":{\"keccak256\":\"0x604d96744b07bdfb25e68b01d1831d4437c48c41072053040bdeaaf047faecf4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1121a26d6e9c2ed1927a97c47ab636f01b694401f72f5e54ea4d9ecb33d94d9f\",\"dweb:/ipfs/QmUtVdWDQUfZXgXDVM4oGdmUMtj8fJWMNBCjg8njv65krP\"]},\"src/interfaces/external/gearbox/helpers/IVersion.sol\":{\"keccak256\":\"0x4ca08c37d06931a13902066f6476b1de63d831e5898f09da0cc3b3de6d168aa6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://179e1d106bb9b5e0928e1b3a79c0e6dc7ded68946434a6d0640f0ef7f78b481a\",\"dweb:/ipfs/QmVqvWpeCq9qF5utQ7xUXGAxuFagd5JCyQi7KWX5iQ98ug\"]},\"src/interfaces/external/gearbox/helpers/libraries/Balances.sol\":{\"keccak256\":\"0x59ebf267b837e81326dc9613b8ad632de5f084b2fd0c7f38373a75056c41bcdb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7af98c0c46f1a477ee8053b24ee18062e2df17f17f6bc0b63dd5929acfec6e2\",\"dweb:/ipfs/QmQaEWKAzS5dd3J76z4EXYP8GkkuwAdP16xzW6SCexiYHV\"]},\"src/interfaces/external/gearbox/helpers/libraries/MultiCall.sol\":{\"keccak256\":\"0x9ce2d25a8f8d138de0f3bd228d65bbc2ba097684c41e0ed891dff7a8b10d6b11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08bd8ae0877e0746c75f79893191c8181efeed49e7aad94b6d1fc3a0fa24e743\",\"dweb:/ipfs/QmWQmCphY5WfGvuC2bnjTnd15drhHqHGfE47PdwBeJzG3v\"]},\"src/interfaces/external/gearbox/helpers/uniswap/IUniswapV3.sol\":{\"keccak256\":\"0x88bf9b754e4b399e580c233af70353c8b42488628bfb73b4ebd52083710513c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b525bf637bec7e5983e4214ed3d5e71fdca419d501261e54663305e5f8791a7e\",\"dweb:/ipfs/QmcUyqXCVVPsNfobeFiKpbj1n5enQ1EdjSL1a2KvK2ouK2\"]},\"src/interfaces/utils/IDefaultAccessControl.sol\":{\"keccak256\":\"0xf746069a0607df88bbe40abd9d0ce377eac023a06315072a902f0a1995514d60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cef1e775b3ef0bdfab1871c54b6a7ba056e2baaef6f12a5ad5041ed500700add\",\"dweb:/ipfs/QmRKQoRR5FzupKKJb8pTQHzBf3A9hWnk4JrPSQ31s7zLtu\"]},\"src/interfaces/vaults/IGearboxVault.sol\":{\"keccak256\":\"0x444805f9ef0d12f76909c43b411cd154610eca501b7f3f88d2b4f3effc95612c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ecb81eb99a5d16aa7eaaba79cd2e58f5ba82f09dcf04de00fff7b30ba02783f4\",\"dweb:/ipfs/QmezfiEqSGdQkUVzhWeKup6EsF7xkcvv9hXKhaWVcGZFnP\"]},\"src/interfaces/vaults/IIntegrationVault.sol\":{\"keccak256\":\"0x63ce1a5b16b87b88693680d338279fdf1281f7a093ca8da6f915bb3cb9530c5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2deaa9cd44b8e508e21f79e59acbe80d2b20d30e3ab7b07131f5513424709d1d\",\"dweb:/ipfs/QmUcfqcUPhuTt41TsvybCY9RDiMUVgp3seGTvmFYSXtjMy\"]},\"src/interfaces/vaults/IVault.sol\":{\"keccak256\":\"0x8f5a025c2b61e9840b4a67321610de985f4e478f5368cbcd9737c525cf582c43\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6d397f0ddaa34fa8248c7624f72f31f8c8b66ee30965f8bbc3f434e2f3696b1\",\"dweb:/ipfs/QmcTfSgQLGJFmpx6ozKYKNXQp6tPNgswg2m9ttSZyoDQiw\"]},\"src/interfaces/vaults/IVaultGovernance.sol\":{\"keccak256\":\"0xb0295982be8e1730fb111e034f1ab4db0b8013674408a4ab851d978856387813\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://120ed22cf68dd88aad37700e42cd775637184c636f0fde6b068a5ddb8bfce375\",\"dweb:/ipfs/QmfA9CVkP5MMkXsuDFj86o8pRMtLEjeidmwWe43Henaxwu\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "adjustPosition"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "convexOutputToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "creditFacade",
          "outputs": [
            {
              "internalType": "contract ICreditFacade",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "creditManager",
          "outputs": [
            {
              "internalType": "contract ICreditManagerV2",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "depositToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "externalCall",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "result",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAllAssetsOnCreditAccountValue",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "currentAllAssetsValue",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getClaimableRewardsValue",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getCreditAccount",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getMerkleProof",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nft_",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "vaultTokens_",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "helper_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "initialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "_signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidSignature",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "magicValue",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isVaultToken",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "marginalFactorD9",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "merkleIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "merkleTotalAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MultiCall[]",
              "name": "calls",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nft",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "openCreditAccount"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "currentPrimaryTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "referralCode",
              "type": "uint16"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "openCreditAccountInManager"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "poolId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "primaryIndex",
          "outputs": [
            {
              "internalType": "int128",
              "name": "",
              "type": "int128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "primaryToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pull",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pullExistentials",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "push",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimTokens",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "merkleIndex_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "merkleTotalAmount_",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof_",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMerkleParameters"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract ISwapRouter",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "struct ISwapRouter.ExactOutputParams",
              "name": "uniParams",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes",
                  "name": "path",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInMaximum",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swap"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAndPush",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "actualTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tvl",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "minTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxTokenAmounts",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "marginalFactorD_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateTargetMarginalFactor"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultGovernance",
          "outputs": [
            {
              "internalType": "contract IVaultGovernance",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vaultTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "externalCall(address,bytes4,bytes)": {
            "details": "Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. Since this method allows sending arbitrary transactions, the destinations of the calls are whitelisted by Protocol Governance.",
            "params": {
              "data": "Abi encoded parameters to `to::selector`",
              "selector": "Selector of the call",
              "to": "Address of the reward pool"
            },
            "returns": {
              "result": "Result of execution of the call"
            }
          },
          "initialize(uint256,address[],address)": {
            "details": "Can only be initialized by vault governance",
            "params": {
              "helper_": "address of helper",
              "nft_": "NFT of the vault in the VaultRegistry",
              "vaultTokens_": "ERC20 tokens that will be managed by this Vault"
            }
          },
          "isValidSignature(bytes32,bytes)": {
            "details": "Should return whether the signature provided is valid for the provided hash MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls",
            "params": {
              "_hash": "Hash of the data to be signed",
              "_signature": "Signature byte array associated with _hash"
            },
            "returns": {
              "magicValue": "0x1626ba7e if valid, 0xffffffff otherwise"
            }
          },
          "isVaultToken(address)": {
            "params": {
              "token": "Address of the token to check"
            },
            "returns": {
              "_0": "`true` if this token is managed by Vault"
            }
          },
          "pull(address,address[],uint256[],bytes)": {
            "details": "Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. When called by vault owner this method just pulls the tokens from the protocol to the `to` address When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault) When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left. Thus any vault other than zero vault cannot have any tokens on it Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.",
            "params": {
              "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
              "to": "Address to receive the tokens",
              "tokenAmounts": "Amounts of tokens to pull",
              "tokens": "Tokens to pull"
            },
            "returns": {
              "actualTokenAmounts": "The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)"
            }
          },
          "push(address[],uint256[],bytes)": {
            "details": "Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.",
            "params": {
              "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
              "tokenAmounts": "Amounts of tokens to push",
              "tokens": "Tokens to push"
            },
            "returns": {
              "actualTokenAmounts": "The amounts actually invested. It could be less than tokenAmounts (but not higher)"
            }
          },
          "reclaimTokens(address[])": {
            "details": "Cannot be called from zero vault.",
            "params": {
              "tokens": "Tokens to claim"
            },
            "returns": {
              "actualTokenAmounts": "Amounts reclaimed"
            }
          },
          "setMerkleParameters(uint256,uint256,bytes32[])": {
            "params": {
              "merkleIndex_": "Required index",
              "merkleProof_": "Proof in Merkle tree",
              "merkleTotalAmount_": "Total amount of NFTs we have in Gearbox Degen Contract"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "transferAndPush(address,address[],uint256[],bytes)": {
            "params": {
              "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
              "tokenAmounts": "Amounts of tokens to push",
              "tokens": "Tokens to push"
            },
            "returns": {
              "actualTokenAmounts": "The amounts actually invested. It could be less than tokenAmounts (but not higher)"
            }
          },
          "tvl()": {
            "details": "Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not",
            "returns": {
              "maxTokenAmounts": "Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)",
              "minTokenAmounts": "Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)"
            }
          },
          "updateTargetMarginalFactor(uint256)": {
            "params": {
              "marginalFactorD_": "New marginalFactorD9"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "adjustPosition()": {
            "notice": "Adjust a position (takes more debt or repays some, depending on the past performance) to achieve the required marginalFactorD9"
          },
          "convexOutputToken()": {
            "notice": "The address of the convex token we receive after staking Convex LPs"
          },
          "creditFacade()": {
            "notice": "Reference to the Gearbox creditFacade contract for the primary token of this vault."
          },
          "creditManager()": {
            "notice": "Reference to the Gearbox creditManager contract for the primary token of this vault."
          },
          "depositToken()": {
            "notice": "Deposit token of the vault, deposits/withdawals are made in this token (might be the same or different with primaryToken)"
          },
          "externalCall(address,bytes4,bytes)": {
            "notice": "Execute one of whitelisted calls."
          },
          "getAllAssetsOnCreditAccountValue()": {
            "notice": "Returns value of all assets located on the vault, including taken with leverage (nominated in primary tokens)"
          },
          "getClaimableRewardsValue()": {
            "notice": "Returns value of rewards (CRV, CVX) we can obtain from Convex (nominated in primary tokens)"
          },
          "getCreditAccount()": {
            "notice": "Returns an address of the credit account connected to the address of the vault"
          },
          "getMerkleProof()": {
            "notice": "Proof used for claiming in Gearbox V2 Degen contract"
          },
          "initialize(uint256,address[],address)": {
            "notice": "Initialized a new contract."
          },
          "initialized()": {
            "notice": "Checks if the vault is initialized"
          },
          "isValidSignature(bytes32,bytes)": {
            "notice": "Verifies offchain signature."
          },
          "isVaultToken(address)": {
            "notice": "Checks if a token is vault token"
          },
          "marginalFactorD9()": {
            "notice": "The leverage factor of the vault, multiplied by 10^9 For a vault with X usd of collateral and marginal factor T >= 1, total assets (collateral + debt) should be equal to X * T"
          },
          "merkleIndex()": {
            "notice": "Index used for claiming in Gearbox V2 Degen contract"
          },
          "merkleTotalAmount()": {
            "notice": "NFTs amount used for claiming in Gearbox V2 Degen contract"
          },
          "multicall((address,bytes)[])": {
            "notice": "A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault Can be successfully called only by the helper"
          },
          "nft()": {
            "notice": "VaultRegistry NFT for this vault"
          },
          "openCreditAccount()": {
            "notice": "Opens a new credit account on the address of the vault"
          },
          "openCreditAccountInManager(uint256,uint16)": {
            "notice": "A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault Can be successfully called only by the helper"
          },
          "poolId()": {
            "notice": "The index of the curve pool the vault invests into"
          },
          "primaryIndex()": {
            "notice": "The index of the primary token in the used curve pool"
          },
          "primaryToken()": {
            "notice": "Primary token of the vault, for this token a credit account is opened in Gearbox."
          },
          "pull(address,address[],uint256[],bytes)": {
            "notice": "Pulls tokens from the underlying protocol to the `to` address."
          },
          "pullExistentials()": {
            "notice": "Existential amounts for each token"
          },
          "push(address[],uint256[],bytes)": {
            "notice": "Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from the contract balance and convert it to yUSDC."
          },
          "reclaimTokens(address[])": {
            "notice": "Claim ERC20 tokens from vault balance to zero vault."
          },
          "setMerkleParameters(uint256,uint256,bytes32[])": {
            "notice": "Sets merkle tree parameters for claiming Gearbox V2 Degen NFT (can be successfully called only by an admin or a strategist)"
          },
          "swap(address,(bytes,address,uint256,uint256,uint256),address,uint256)": {
            "notice": "A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault Can be successfully called only by the helper"
          },
          "transferAndPush(address,address[],uint256[],bytes)": {
            "notice": "The same as `push` method above but transfers tokens to vault balance prior to calling push. After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full)."
          },
          "tvl()": {
            "notice": "Total value locked for this contract."
          },
          "updateTargetMarginalFactor(uint256)": {
            "notice": "Updates marginalFactorD9 (can be successfully called only by an admin or a strategist)"
          },
          "vaultGovernance()": {
            "notice": "Address of the Vault Governance for this contract."
          },
          "vaultTokens()": {
            "notice": "ERC20 tokens under Vault management."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/vaults/IGearboxVault.sol": "IGearboxVault"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
        "urls": [
          "bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a",
          "dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "keccak256": "0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676",
        "urls": [
          "bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276",
          "dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [
          "bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
          "dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "src/interfaces/IProtocolGovernance.sol": {
        "keccak256": "0x56c5ffe3c7a0414fbe269fb65d5181c41c0937f2d854b35ac11d11d143b4025e",
        "urls": [
          "bzz-raw://c3c06dabc1ab8741d81f8f941230bb19d66c4a32707a984e2e48952f6d86a281",
          "dweb:/ipfs/Qmb47fn3Wpe38NyJ5f4Gzbthd6HimRBNDVU82JWwsyR36b"
        ],
        "license": "MIT"
      },
      "src/interfaces/IUnitPricesGovernance.sol": {
        "keccak256": "0x9fc3abc68aeebff7927937d8a3ebe876a26550c95da8941b7a123583c6812081",
        "urls": [
          "bzz-raw://a323e55a7dd91bbe02329783c6fa447b3dfec8aa963f10a7bcd4aee986d7ca87",
          "dweb:/ipfs/QmRShHKXzDsxUDbSzhRQTZmagzYeP2Q7KAx1t4SVomn6Gk"
        ],
        "license": "MIT"
      },
      "src/interfaces/IVaultRegistry.sol": {
        "keccak256": "0xbbff9405f05886e694fbb4ed6a39a85f05cd05ee28a8b689c62be86230b9be55",
        "urls": [
          "bzz-raw://1b9c10d208a2533045f2d00fccfdec42f20ac4a608e850e663be05075eeb3b50",
          "dweb:/ipfs/QmRFPZZVBdYvTLEW5zLjHzivVKH4Ug9mJKom5yq18cVij1"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/erc/IERC1271.sol": {
        "keccak256": "0x9f1bfb74bae3843c5ca1fc666cd9d7cef51a97b713b03d9de1023c7e3ba22d36",
        "urls": [
          "bzz-raw://9053f788f8a2e5ba615a9f3069de68526f6784f60925e6aac9639fa167ee2779",
          "dweb:/ipfs/Qmc5Te45rStvUcDbArTk7jrqNoWuYTJJP4XiBK8PSYDDDd"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/ICreditFacade.sol": {
        "keccak256": "0x9c61f736793e3244ce9978bbc812160960103ca24f99d543fc8f70d7a983a98a",
        "urls": [
          "bzz-raw://21034e103c20a08a00cc60da4b9a1d627859c834d717324a160dbc971aacbe6f",
          "dweb:/ipfs/QmRDfCFYuNzpbfFrEnVtUFqPiSd1JCazjrvbpwB9PYgyFs"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/IUniswapV3Adapter.sol": {
        "keccak256": "0xf5bed84431a948929c38d3c17c410f866f0fc36b9f968e92b3974b1253b18d65",
        "urls": [
          "bzz-raw://2fae7cc9b19b0067914bfe080d64fdfaf4c637fbc8babff8dd476cb148f34060",
          "dweb:/ipfs/Qmay7YWYoX7iKnRWvyrERQVt3hqF8m8Q4gnSReHeyKAVYr"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/helpers/IAdapter.sol": {
        "keccak256": "0xa80b0d1b8178f75309aea48304c46522a5aeeeeb7a91013b0482da01b06e4cfb",
        "urls": [
          "bzz-raw://097e49823c8445dd1eb8dfe20daf276d29ddea97ee38d941b18bb08e6c634510",
          "dweb:/ipfs/QmedmvL5vT63JvYnSRUNC1iNhL6Wf9v8w1Jtvu2FZKRMDC"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/helpers/ICreditManagerV2.sol": {
        "keccak256": "0xf9aefda5462194b70878870317f741dde46e2f8df6d851d7bca463040d7bfba6",
        "urls": [
          "bzz-raw://8e3d1a6bde67ed1194a2fbe8e872a5aa0c5bec5aa9cb0cd70ee904d8be666851",
          "dweb:/ipfs/QmTqPiMMh9vkc5o4ytXQUUsKHZComobm3cveRwqJCKKSFU"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/helpers/IPriceOracle.sol": {
        "keccak256": "0x604d96744b07bdfb25e68b01d1831d4437c48c41072053040bdeaaf047faecf4",
        "urls": [
          "bzz-raw://1121a26d6e9c2ed1927a97c47ab636f01b694401f72f5e54ea4d9ecb33d94d9f",
          "dweb:/ipfs/QmUtVdWDQUfZXgXDVM4oGdmUMtj8fJWMNBCjg8njv65krP"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/helpers/IVersion.sol": {
        "keccak256": "0x4ca08c37d06931a13902066f6476b1de63d831e5898f09da0cc3b3de6d168aa6",
        "urls": [
          "bzz-raw://179e1d106bb9b5e0928e1b3a79c0e6dc7ded68946434a6d0640f0ef7f78b481a",
          "dweb:/ipfs/QmVqvWpeCq9qF5utQ7xUXGAxuFagd5JCyQi7KWX5iQ98ug"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/helpers/libraries/Balances.sol": {
        "keccak256": "0x59ebf267b837e81326dc9613b8ad632de5f084b2fd0c7f38373a75056c41bcdb",
        "urls": [
          "bzz-raw://c7af98c0c46f1a477ee8053b24ee18062e2df17f17f6bc0b63dd5929acfec6e2",
          "dweb:/ipfs/QmQaEWKAzS5dd3J76z4EXYP8GkkuwAdP16xzW6SCexiYHV"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/helpers/libraries/MultiCall.sol": {
        "keccak256": "0x9ce2d25a8f8d138de0f3bd228d65bbc2ba097684c41e0ed891dff7a8b10d6b11",
        "urls": [
          "bzz-raw://08bd8ae0877e0746c75f79893191c8181efeed49e7aad94b6d1fc3a0fa24e743",
          "dweb:/ipfs/QmWQmCphY5WfGvuC2bnjTnd15drhHqHGfE47PdwBeJzG3v"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/gearbox/helpers/uniswap/IUniswapV3.sol": {
        "keccak256": "0x88bf9b754e4b399e580c233af70353c8b42488628bfb73b4ebd52083710513c5",
        "urls": [
          "bzz-raw://b525bf637bec7e5983e4214ed3d5e71fdca419d501261e54663305e5f8791a7e",
          "dweb:/ipfs/QmcUyqXCVVPsNfobeFiKpbj1n5enQ1EdjSL1a2KvK2ouK2"
        ],
        "license": "MIT"
      },
      "src/interfaces/utils/IDefaultAccessControl.sol": {
        "keccak256": "0xf746069a0607df88bbe40abd9d0ce377eac023a06315072a902f0a1995514d60",
        "urls": [
          "bzz-raw://cef1e775b3ef0bdfab1871c54b6a7ba056e2baaef6f12a5ad5041ed500700add",
          "dweb:/ipfs/QmRKQoRR5FzupKKJb8pTQHzBf3A9hWnk4JrPSQ31s7zLtu"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IGearboxVault.sol": {
        "keccak256": "0x444805f9ef0d12f76909c43b411cd154610eca501b7f3f88d2b4f3effc95612c",
        "urls": [
          "bzz-raw://ecb81eb99a5d16aa7eaaba79cd2e58f5ba82f09dcf04de00fff7b30ba02783f4",
          "dweb:/ipfs/QmezfiEqSGdQkUVzhWeKup6EsF7xkcvv9hXKhaWVcGZFnP"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IIntegrationVault.sol": {
        "keccak256": "0x63ce1a5b16b87b88693680d338279fdf1281f7a093ca8da6f915bb3cb9530c5e",
        "urls": [
          "bzz-raw://2deaa9cd44b8e508e21f79e59acbe80d2b20d30e3ab7b07131f5513424709d1d",
          "dweb:/ipfs/QmUcfqcUPhuTt41TsvybCY9RDiMUVgp3seGTvmFYSXtjMy"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IVault.sol": {
        "keccak256": "0x8f5a025c2b61e9840b4a67321610de985f4e478f5368cbcd9737c525cf582c43",
        "urls": [
          "bzz-raw://a6d397f0ddaa34fa8248c7624f72f31f8c8b66ee30965f8bbc3f434e2f3696b1",
          "dweb:/ipfs/QmcTfSgQLGJFmpx6ozKYKNXQp6tPNgswg2m9ttSZyoDQiw"
        ],
        "license": "MIT"
      },
      "src/interfaces/vaults/IVaultGovernance.sol": {
        "keccak256": "0xb0295982be8e1730fb111e034f1ab4db0b8013674408a4ab851d978856387813",
        "urls": [
          "bzz-raw://120ed22cf68dd88aad37700e42cd775637184c636f0fde6b068a5ddb8bfce375",
          "dweb:/ipfs/QmfA9CVkP5MMkXsuDFj86o8pRMtLEjeidmwWe43Henaxwu"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/vaults/IGearboxVault.sol",
    "id": 77556,
    "exportedSymbols": {
      "Balance": [
        65989
      ],
      "IAccessControl": [
        43366
      ],
      "IAccessControlEnumerable": [
        43391
      ],
      "IAdapter": [
        64788
      ],
      "ICreditFacade": [
        64488
      ],
      "ICreditFacadeEvents": [
        64218
      ],
      "ICreditFacadeExceptions": [
        64274
      ],
      "ICreditFacadeExtended": [
        64116
      ],
      "ICreditManagerV2": [
        65201
      ],
      "ICreditManagerV2Exceptions": [
        64852
      ],
      "IDefaultAccessControl": [
        75786
      ],
      "IERC1271": [
        64026
      ],
      "IERC165": [
        48073
      ],
      "IERC721": [
        46687
      ],
      "IGearboxVault": [
        77555
      ],
      "IIntegrationVault": [
        77767
      ],
      "IProtocolGovernance": [
        52868
      ],
      "ISwapRouter": [
        66699
      ],
      "IUniswapV3Adapter": [
        64680
      ],
      "IUniswapV3AdapterExceptions": [
        64635
      ],
      "IUnitPricesGovernance": [
        52921
      ],
      "IVault": [
        78599
      ],
      "IVaultGovernance": [
        78668
      ],
      "IVaultRegistry": [
        53012
      ],
      "IVersion": [
        65465
      ],
      "MultiCall": [
        66256
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:4791:342",
    "nodes": [
      {
        "id": 77396,
        "nodeType": "PragmaDirective",
        "src": "32:23:342",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 77397,
        "nodeType": "ImportDirective",
        "src": "57:33:342",
        "nodes": [],
        "absolutePath": "src/interfaces/vaults/IIntegrationVault.sol",
        "file": "./IIntegrationVault.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77556,
        "sourceUnit": 77768,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77398,
        "nodeType": "ImportDirective",
        "src": "91:47:342",
        "nodes": [],
        "absolutePath": "src/interfaces/external/gearbox/ICreditFacade.sol",
        "file": "../external/gearbox/ICreditFacade.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77556,
        "sourceUnit": 64489,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77399,
        "nodeType": "ImportDirective",
        "src": "139:51:342",
        "nodes": [],
        "absolutePath": "src/interfaces/external/gearbox/IUniswapV3Adapter.sol",
        "file": "../external/gearbox/IUniswapV3Adapter.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 77556,
        "sourceUnit": 64681,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 77555,
        "nodeType": "ContractDefinition",
        "src": "192:4630:342",
        "nodes": [
          {
            "id": 77408,
            "nodeType": "FunctionDefinition",
            "src": "343:62:342",
            "nodes": [],
            "documentation": {
              "id": 77402,
              "nodeType": "StructuredDocumentation",
              "src": "243:95:342",
              "text": "@notice Reference to the Gearbox creditFacade contract for the primary token of this vault."
            },
            "functionSelector": "2f7a1881",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "creditFacade",
            "nameLocation": "352:12:342",
            "parameters": {
              "id": 77403,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "364:2:342"
            },
            "returnParameters": {
              "id": 77407,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77406,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77408,
                  "src": "390:13:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ICreditFacade_$64488",
                    "typeString": "contract ICreditFacade"
                  },
                  "typeName": {
                    "id": 77405,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77404,
                      "name": "ICreditFacade",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 64488,
                      "src": "390:13:342"
                    },
                    "referencedDeclaration": 64488,
                    "src": "390:13:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICreditFacade_$64488",
                      "typeString": "contract ICreditFacade"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "389:15:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77415,
            "nodeType": "FunctionDefinition",
            "src": "512:66:342",
            "nodes": [],
            "documentation": {
              "id": 77409,
              "nodeType": "StructuredDocumentation",
              "src": "411:96:342",
              "text": "@notice Reference to the Gearbox creditManager contract for the primary token of this vault."
            },
            "functionSelector": "c12c21c0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "creditManager",
            "nameLocation": "521:13:342",
            "parameters": {
              "id": 77410,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "534:2:342"
            },
            "returnParameters": {
              "id": 77414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77413,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77415,
                  "src": "560:16:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ICreditManagerV2_$65201",
                    "typeString": "contract ICreditManagerV2"
                  },
                  "typeName": {
                    "id": 77412,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77411,
                      "name": "ICreditManagerV2",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 65201,
                      "src": "560:16:342"
                    },
                    "referencedDeclaration": 65201,
                    "src": "560:16:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICreditManagerV2_$65201",
                      "typeString": "contract ICreditManagerV2"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "559:18:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77421,
            "nodeType": "FunctionDefinition",
            "src": "682:56:342",
            "nodes": [],
            "documentation": {
              "id": 77416,
              "nodeType": "StructuredDocumentation",
              "src": "584:93:342",
              "text": "@notice Primary token of the vault, for this token a credit account is opened in Gearbox."
            },
            "functionSelector": "91ac094c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "primaryToken",
            "nameLocation": "691:12:342",
            "parameters": {
              "id": 77417,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "703:2:342"
            },
            "returnParameters": {
              "id": 77420,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77419,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77421,
                  "src": "729:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 77418,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "729:7:342",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "728:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77427,
            "nodeType": "FunctionDefinition",
            "src": "882:56:342",
            "nodes": [],
            "documentation": {
              "id": 77422,
              "nodeType": "StructuredDocumentation",
              "src": "744:133:342",
              "text": "@notice Deposit token of the vault, deposits/withdawals are made in this token (might be the same or different with primaryToken)"
            },
            "functionSelector": "c89039c5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "depositToken",
            "nameLocation": "891:12:342",
            "parameters": {
              "id": 77423,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "903:2:342"
            },
            "returnParameters": {
              "id": 77426,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77425,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77427,
                  "src": "929:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 77424,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "929:7:342",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "928:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77433,
            "nodeType": "FunctionDefinition",
            "src": "1144:60:342",
            "nodes": [],
            "documentation": {
              "id": 77428,
              "nodeType": "StructuredDocumentation",
              "src": "944:195:342",
              "text": "@notice The leverage factor of the vault, multiplied by 10^9\n For a vault with X usd of collateral and marginal factor T >= 1, total assets (collateral + debt) should be equal to X * T"
            },
            "functionSelector": "f4b9b143",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "marginalFactorD9",
            "nameLocation": "1153:16:342",
            "parameters": {
              "id": 77429,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1169:2:342"
            },
            "returnParameters": {
              "id": 77432,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77431,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77433,
                  "src": "1195:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77430,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1195:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1194:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77439,
            "nodeType": "FunctionDefinition",
            "src": "1279:55:342",
            "nodes": [],
            "documentation": {
              "id": 77434,
              "nodeType": "StructuredDocumentation",
              "src": "1210:64:342",
              "text": "@notice Index used for claiming in Gearbox V2 Degen contract"
            },
            "functionSelector": "49288e39",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "merkleIndex",
            "nameLocation": "1288:11:342",
            "parameters": {
              "id": 77435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1299:2:342"
            },
            "returnParameters": {
              "id": 77438,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77437,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77439,
                  "src": "1325:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77436,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1325:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1324:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77445,
            "nodeType": "FunctionDefinition",
            "src": "1415:61:342",
            "nodes": [],
            "documentation": {
              "id": 77440,
              "nodeType": "StructuredDocumentation",
              "src": "1340:70:342",
              "text": "@notice NFTs amount used for claiming in Gearbox V2 Degen contract"
            },
            "functionSelector": "d37c4707",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "merkleTotalAmount",
            "nameLocation": "1424:17:342",
            "parameters": {
              "id": 77441,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1441:2:342"
            },
            "returnParameters": {
              "id": 77444,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77443,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77445,
                  "src": "1467:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77442,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1467:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1466:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77452,
            "nodeType": "FunctionDefinition",
            "src": "1551:67:342",
            "nodes": [],
            "documentation": {
              "id": 77446,
              "nodeType": "StructuredDocumentation",
              "src": "1482:64:342",
              "text": "@notice Proof used for claiming in Gearbox V2 Degen contract"
            },
            "functionSelector": "1aa2829a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMerkleProof",
            "nameLocation": "1560:14:342",
            "parameters": {
              "id": 77447,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1574:2:342"
            },
            "returnParameters": {
              "id": 77451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77450,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77452,
                  "src": "1600:16:342",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 77448,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1600:7:342",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 77449,
                    "nodeType": "ArrayTypeName",
                    "src": "1600:9:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1599:18:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77458,
            "nodeType": "FunctionDefinition",
            "src": "1691:50:342",
            "nodes": [],
            "documentation": {
              "id": 77453,
              "nodeType": "StructuredDocumentation",
              "src": "1624:62:342",
              "text": "@notice The index of the curve pool the vault invests into"
            },
            "functionSelector": "3e0dc34e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "poolId",
            "nameLocation": "1700:6:342",
            "parameters": {
              "id": 77454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1706:2:342"
            },
            "returnParameters": {
              "id": 77457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77456,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77458,
                  "src": "1732:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77455,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1732:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1731:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77464,
            "nodeType": "FunctionDefinition",
            "src": "1817:55:342",
            "nodes": [],
            "documentation": {
              "id": 77459,
              "nodeType": "StructuredDocumentation",
              "src": "1747:65:342",
              "text": "@notice The index of the primary token in the used curve pool"
            },
            "functionSelector": "ea8d87a3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "primaryIndex",
            "nameLocation": "1826:12:342",
            "parameters": {
              "id": 77460,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1838:2:342"
            },
            "returnParameters": {
              "id": 77463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77462,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77464,
                  "src": "1864:6:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int128",
                    "typeString": "int128"
                  },
                  "typeName": {
                    "id": 77461,
                    "name": "int128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1864:6:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int128",
                      "typeString": "int128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1863:8:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77470,
            "nodeType": "FunctionDefinition",
            "src": "1962:61:342",
            "nodes": [],
            "documentation": {
              "id": 77465,
              "nodeType": "StructuredDocumentation",
              "src": "1878:79:342",
              "text": "@notice The address of the convex token we receive after staking Convex LPs"
            },
            "functionSelector": "6b3cff53",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "convexOutputToken",
            "nameLocation": "1971:17:342",
            "parameters": {
              "id": 77466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1988:2:342"
            },
            "returnParameters": {
              "id": 77469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77468,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77470,
                  "src": "2014:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 77467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2014:7:342",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2013:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77481,
            "nodeType": "FunctionDefinition",
            "src": "2305:91:342",
            "nodes": [],
            "documentation": {
              "id": 77471,
              "nodeType": "StructuredDocumentation",
              "src": "2029:271:342",
              "text": "@notice Initialized a new contract.\n @dev Can only be initialized by vault governance\n @param nft_ NFT of the vault in the VaultRegistry\n @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n @param helper_ address of helper"
            },
            "functionSelector": "52af719f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "2314:10:342",
            "parameters": {
              "id": 77479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77473,
                  "mutability": "mutable",
                  "name": "nft_",
                  "nameLocation": "2333:4:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77481,
                  "src": "2325:12:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77472,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2325:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77476,
                  "mutability": "mutable",
                  "name": "vaultTokens_",
                  "nameLocation": "2356:12:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77481,
                  "src": "2339:29:342",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 77474,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2339:7:342",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 77475,
                    "nodeType": "ArrayTypeName",
                    "src": "2339:9:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77478,
                  "mutability": "mutable",
                  "name": "helper_",
                  "nameLocation": "2378:7:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77481,
                  "src": "2370:15:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 77477,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2370:7:342",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2324:62:342"
            },
            "returnParameters": {
              "id": 77480,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2395:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77487,
            "nodeType": "FunctionDefinition",
            "src": "2558:71:342",
            "nodes": [],
            "documentation": {
              "id": 77482,
              "nodeType": "StructuredDocumentation",
              "src": "2402:151:342",
              "text": "@notice Updates marginalFactorD9 (can be successfully called only by an admin or a strategist)\n @param marginalFactorD_ New marginalFactorD9"
            },
            "functionSelector": "85c3c33e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateTargetMarginalFactor",
            "nameLocation": "2567:26:342",
            "parameters": {
              "id": 77485,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77484,
                  "mutability": "mutable",
                  "name": "marginalFactorD_",
                  "nameLocation": "2602:16:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77487,
                  "src": "2594:24:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2594:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2593:26:342"
            },
            "returnParameters": {
              "id": 77486,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2628:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77498,
            "nodeType": "FunctionDefinition",
            "src": "2956:149:342",
            "nodes": [],
            "documentation": {
              "id": 77488,
              "nodeType": "StructuredDocumentation",
              "src": "2635:316:342",
              "text": "@notice Sets merkle tree parameters for claiming Gearbox V2 Degen NFT (can be successfully called only by an admin or a strategist)\n @param merkleIndex_ Required index\n @param merkleTotalAmount_ Total amount of NFTs we have in Gearbox Degen Contract\n @param merkleProof_ Proof in Merkle tree"
            },
            "functionSelector": "d769e433",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMerkleParameters",
            "nameLocation": "2965:19:342",
            "parameters": {
              "id": 77496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77490,
                  "mutability": "mutable",
                  "name": "merkleIndex_",
                  "nameLocation": "3002:12:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77498,
                  "src": "2994:20:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2994:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77492,
                  "mutability": "mutable",
                  "name": "merkleTotalAmount_",
                  "nameLocation": "3032:18:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77498,
                  "src": "3024:26:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77491,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3024:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77495,
                  "mutability": "mutable",
                  "name": "merkleProof_",
                  "nameLocation": "3077:12:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77498,
                  "src": "3060:29:342",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 77493,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "3060:7:342",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 77494,
                    "nodeType": "ArrayTypeName",
                    "src": "3060:9:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2984:111:342"
            },
            "returnParameters": {
              "id": 77497,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3104:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77502,
            "nodeType": "FunctionDefinition",
            "src": "3254:35:342",
            "nodes": [],
            "documentation": {
              "id": 77499,
              "nodeType": "StructuredDocumentation",
              "src": "3111:138:342",
              "text": "@notice Adjust a position (takes more debt or repays some, depending on the past performance) to achieve the required marginalFactorD9"
            },
            "functionSelector": "67f34f49",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "adjustPosition",
            "nameLocation": "3263:14:342",
            "parameters": {
              "id": 77500,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3277:2:342"
            },
            "returnParameters": {
              "id": 77501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3288:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77506,
            "nodeType": "FunctionDefinition",
            "src": "3366:38:342",
            "nodes": [],
            "documentation": {
              "id": 77503,
              "nodeType": "StructuredDocumentation",
              "src": "3295:66:342",
              "text": "@notice Opens a new credit account on the address of the vault"
            },
            "functionSelector": "5aba4b24",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "openCreditAccount",
            "nameLocation": "3375:17:342",
            "parameters": {
              "id": 77504,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3392:2:342"
            },
            "returnParameters": {
              "id": 77505,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3403:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77514,
            "nodeType": "FunctionDefinition",
            "src": "3580:101:342",
            "nodes": [],
            "documentation": {
              "id": 77507,
              "nodeType": "StructuredDocumentation",
              "src": "3410:165:342",
              "text": "@notice A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault\n Can be successfully called only by the helper"
            },
            "functionSelector": "0fae7ae7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "openCreditAccountInManager",
            "nameLocation": "3589:26:342",
            "parameters": {
              "id": 77512,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77509,
                  "mutability": "mutable",
                  "name": "currentPrimaryTokenAmount",
                  "nameLocation": "3624:25:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77514,
                  "src": "3616:33:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77508,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3616:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77511,
                  "mutability": "mutable",
                  "name": "referralCode",
                  "nameLocation": "3658:12:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77514,
                  "src": "3651:19:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 77510,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "3651:6:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3615:56:342"
            },
            "returnParameters": {
              "id": 77513,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3680:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77520,
            "nodeType": "FunctionDefinition",
            "src": "3782:60:342",
            "nodes": [],
            "documentation": {
              "id": 77515,
              "nodeType": "StructuredDocumentation",
              "src": "3687:90:342",
              "text": "@notice Returns an address of the credit account connected to the address of the vault"
            },
            "functionSelector": "43b8865d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCreditAccount",
            "nameLocation": "3791:16:342",
            "parameters": {
              "id": 77516,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3807:2:342"
            },
            "returnParameters": {
              "id": 77519,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77518,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77520,
                  "src": "3833:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 77517,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3833:7:342",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3832:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77526,
            "nodeType": "FunctionDefinition",
            "src": "3974:98:342",
            "nodes": [],
            "documentation": {
              "id": 77521,
              "nodeType": "StructuredDocumentation",
              "src": "3848:121:342",
              "text": "@notice Returns value of all assets located on the vault, including taken with leverage (nominated in primary tokens)"
            },
            "functionSelector": "636a411d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAllAssetsOnCreditAccountValue",
            "nameLocation": "3983:32:342",
            "parameters": {
              "id": 77522,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4015:2:342"
            },
            "returnParameters": {
              "id": 77525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77524,
                  "mutability": "mutable",
                  "name": "currentAllAssetsValue",
                  "nameLocation": "4049:21:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77526,
                  "src": "4041:29:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77523,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4041:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4040:31:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77532,
            "nodeType": "FunctionDefinition",
            "src": "4186:68:342",
            "nodes": [],
            "documentation": {
              "id": 77527,
              "nodeType": "StructuredDocumentation",
              "src": "4078:103:342",
              "text": "@notice Returns value of rewards (CRV, CVX) we can obtain from Convex (nominated in primary tokens)"
            },
            "functionSelector": "ce1f65e4",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getClaimableRewardsValue",
            "nameLocation": "4195:24:342",
            "parameters": {
              "id": 77528,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4219:2:342"
            },
            "returnParameters": {
              "id": 77531,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77530,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 77532,
                  "src": "4245:7:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77529,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4245:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4244:9:342"
            },
            "scope": 77555,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77540,
            "nodeType": "FunctionDefinition",
            "src": "4430:54:342",
            "nodes": [],
            "documentation": {
              "id": 77533,
              "nodeType": "StructuredDocumentation",
              "src": "4260:165:342",
              "text": "@notice A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault\n Can be successfully called only by the helper"
            },
            "functionSelector": "caa5c23f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "multicall",
            "nameLocation": "4439:9:342",
            "parameters": {
              "id": 77538,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77537,
                  "mutability": "mutable",
                  "name": "calls",
                  "nameLocation": "4468:5:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77540,
                  "src": "4449:24:342",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_MultiCall_$66256_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct MultiCall[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 77535,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 77534,
                        "name": "MultiCall",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 66256,
                        "src": "4449:9:342"
                      },
                      "referencedDeclaration": 66256,
                      "src": "4449:9:342",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MultiCall_$66256_storage_ptr",
                        "typeString": "struct MultiCall"
                      }
                    },
                    "id": 77536,
                    "nodeType": "ArrayTypeName",
                    "src": "4449:11:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_MultiCall_$66256_storage_$dyn_storage_ptr",
                      "typeString": "struct MultiCall[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4448:26:342"
            },
            "returnParameters": {
              "id": 77539,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4483:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 77554,
            "nodeType": "FunctionDefinition",
            "src": "4660:160:342",
            "nodes": [],
            "documentation": {
              "id": 77541,
              "nodeType": "StructuredDocumentation",
              "src": "4490:165:342",
              "text": "@notice A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault\n Can be successfully called only by the helper"
            },
            "functionSelector": "f7283796",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "swap",
            "nameLocation": "4669:4:342",
            "parameters": {
              "id": 77552,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77544,
                  "mutability": "mutable",
                  "name": "router",
                  "nameLocation": "4695:6:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77554,
                  "src": "4683:18:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISwapRouter_$66699",
                    "typeString": "contract ISwapRouter"
                  },
                  "typeName": {
                    "id": 77543,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77542,
                      "name": "ISwapRouter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66699,
                      "src": "4683:11:342"
                    },
                    "referencedDeclaration": 66699,
                    "src": "4683:11:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISwapRouter_$66699",
                      "typeString": "contract ISwapRouter"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77547,
                  "mutability": "mutable",
                  "name": "uniParams",
                  "nameLocation": "4748:9:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77554,
                  "src": "4711:46:342",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ExactOutputParams_$66690_memory_ptr",
                    "typeString": "struct ISwapRouter.ExactOutputParams"
                  },
                  "typeName": {
                    "id": 77546,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 77545,
                      "name": "ISwapRouter.ExactOutputParams",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66690,
                      "src": "4711:29:342"
                    },
                    "referencedDeclaration": 66690,
                    "src": "4711:29:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ExactOutputParams_$66690_storage_ptr",
                      "typeString": "struct ISwapRouter.ExactOutputParams"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77549,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "4775:5:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77554,
                  "src": "4767:13:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 77548,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4767:7:342",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 77551,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4798:6:342",
                  "nodeType": "VariableDeclaration",
                  "scope": 77554,
                  "src": "4790:14:342",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77550,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4790:7:342",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4673:137:342"
            },
            "returnParameters": {
              "id": 77553,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4819:0:342"
            },
            "scope": 77555,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 77400,
              "name": "IIntegrationVault",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 77767,
              "src": "219:17:342"
            },
            "id": 77401,
            "nodeType": "InheritanceSpecifier",
            "src": "219:17:342"
          }
        ],
        "canonicalName": "IGearboxVault",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          77555,
          77767,
          64026,
          78599,
          48073
        ],
        "name": "IGearboxVault",
        "nameLocation": "202:13:342",
        "scope": 77556,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 342
}