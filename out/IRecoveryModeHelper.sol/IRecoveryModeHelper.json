{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "calcComposableRecoveryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bptAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "calcComposableRecoveryAmountsOut(bytes32,bytes,uint256)": "2787a287",
    "getVault()": "8d928af8"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"calcComposableRecoveryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcComposableRecoveryAmountsOut(bytes32,bytes,uint256)\":{\"details\":\"Computes a Recovery Mode Exit BPT and token amounts for a Pool. Only 'cash' balances are considered, to avoid scenarios where the last LPs to attempt to exit the Pool cannot do it because only 'managed' balance remains. The Pool is assumed to be a Composable Pool that uses ComposablePoolLib, meaning BPT will be its first token. It is also assumed that there is no 'managed' balance for BPT. WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation via reentrancy. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference. To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant function before calling `calcComposableRecoveryAmountsOut`. That will make the transaction revert in an unsafe context. (See `VaultReentrancyLib.ensureNotInVaultContext`).\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getVault()\":{\"notice\":\"Returns the Balancer Vault\"}},\"notice\":\"Interface for an auxiliary contract that computes Recovery Mode exits, removing logic from the core Pool contract that would otherwise take up a lot of bytecode size at the cost of some slight gas overhead. Since Recovery Mode exits are expected to be highly infrequent (and ideally never occur), this tradeoff makes sense.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/external/balancer/pool-utils/IRecoveryModeHelper.sol\":\"IRecoveryModeHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/external/balancer/pool-utils/IRecoveryModeHelper.sol\":{\"keccak256\":\"0x736dbea9f0200b2e6c716f2c7b81781eaa2c221628aa80e9036598c3b9873852\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://42213d84d79d06ee973fe5b3452d2d3bba10ea44a259a0ea5fc81ab49abac257\",\"dweb:/ipfs/QmUfzjPMwX3SYnhvoKZnKL9asDmgAttiZKuc5XV1RQx1yb\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1\",\"dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3\",\"dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo\"]},\"src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5\",\"dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z\"]},\"src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6\",\"dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6\"]},\"src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f\",\"dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U\"]},\"src/interfaces/external/balancer/vault/IAsset.sol\":{\"keccak256\":\"0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4\",\"dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn\"]},\"src/interfaces/external/balancer/vault/IAuthorizer.sol\":{\"keccak256\":\"0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1\",\"dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34\"]},\"src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039\",\"dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC\"]},\"src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a\",\"dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK\"]},\"src/interfaces/external/balancer/vault/IVault.sol\":{\"keccak256\":\"0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d\",\"dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.9+commit.e5eed63a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calcComposableRecoveryAmountsOut",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "bptAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsOut",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getVault",
          "outputs": [
            {
              "internalType": "contract IVault",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "calcComposableRecoveryAmountsOut(bytes32,bytes,uint256)": {
            "details": "Computes a Recovery Mode Exit BPT and token amounts for a Pool. Only 'cash' balances are considered, to avoid scenarios where the last LPs to attempt to exit the Pool cannot do it because only 'managed' balance remains. The Pool is assumed to be a Composable Pool that uses ComposablePoolLib, meaning BPT will be its first token. It is also assumed that there is no 'managed' balance for BPT. WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation via reentrancy. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference. To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant function before calling `calcComposableRecoveryAmountsOut`. That will make the transaction revert in an unsafe context. (See `VaultReentrancyLib.ensureNotInVaultContext`)."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getVault()": {
            "notice": "Returns the Balancer Vault"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/external/balancer/pool-utils/IRecoveryModeHelper.sol": "IRecoveryModeHelper"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/external/balancer/pool-utils/IRecoveryModeHelper.sol": {
        "keccak256": "0x736dbea9f0200b2e6c716f2c7b81781eaa2c221628aa80e9036598c3b9873852",
        "urls": [
          "bzz-raw://42213d84d79d06ee973fe5b3452d2d3bba10ea44a259a0ea5fc81ab49abac257",
          "dweb:/ipfs/QmUfzjPMwX3SYnhvoKZnKL9asDmgAttiZKuc5XV1RQx1yb"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/IAuthentication.sol": {
        "keccak256": "0x8032fd6d7f660d9536d252897336462bb932d1e91bd3b87c087be017a35dc842",
        "urls": [
          "bzz-raw://3724cffd85daa36371999e0e9ea56617df12fd7f2cc5c123139705766e3b89a1",
          "dweb:/ipfs/QmaM2wHuKrpKcc8mRhdYmXqPVAimHjGK1xubPWXKafiKYa"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ISignaturesValidator.sol": {
        "keccak256": "0x52bd09272e9ec2cff838df757e8b690ff4ca3f4f07e9edd9b711e31e474dd979",
        "urls": [
          "bzz-raw://92ae86c99ce4b92fc666a4c6053bc5ae2932d07b23471647cae7c541c68071b3",
          "dweb:/ipfs/QmeKHMVTVLfG5MKQ7ewM7uwB41WEXkDKhkkL3qCd7mokFo"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/helpers/ITemporarilyPausable.sol": {
        "keccak256": "0xf952ad04a5d4e8523212315e19b8d874e13ceadb7dbc1f5025510da1e153405c",
        "urls": [
          "bzz-raw://81d7e364e8c7a76879f9be650559d3de53879918ab721372931d0e51daa464b5",
          "dweb:/ipfs/QmNyXjvxr3cXzVeBaPrApS9fdjufyN6dXtjGy746xxtj2z"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/misc/IWETH.sol": {
        "keccak256": "0x90278f677649701309ab0902f5bca2fd0d9603e5ce7193b15cf05a7c5582c3b9",
        "urls": [
          "bzz-raw://991dce71671de9fb0f5fafda69994705e358a5cb235bc3acf961dbc9895b6dd6",
          "dweb:/ipfs/QmP7479cjgvMa2DjXNSB6gvHZ2WibU4TGb3DTjqw6UuFb6"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/solidity-utils/openzeppelin/IERC20.sol": {
        "keccak256": "0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835",
        "urls": [
          "bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f",
          "dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/balancer/vault/IAsset.sol": {
        "keccak256": "0x746354db670eb3b94179963b522c4deb0b9854483ab293e3025689749923ebef",
        "urls": [
          "bzz-raw://bcd5a7e0519f94c25f4e3b568b8c0446b2240bd3808c56c3b498a6fed459b2e4",
          "dweb:/ipfs/QmRXvcCy9oKhwPMr8QQ74pg9jormcgq3GHmLSGTDhUWAsn"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IAuthorizer.sol": {
        "keccak256": "0x4adfebbc478ab323d0679386ef8e2384f5205eb280f72757c151eca62ea4f91b",
        "urls": [
          "bzz-raw://49a34c9ad9cb559931b465cea2d570ab015751c6dbc4a52eab8c36b5b949eec1",
          "dweb:/ipfs/QmUiUSZz8gjANUcTqaPCfNkUp3gpjt8Qq2z4UWuQWhaK34"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IFlashLoanRecipient.sol": {
        "keccak256": "0xef16377e5ee7ac8151fe8abc3f7b8f0a420008ae1c1336f3cbaea5e171403a43",
        "urls": [
          "bzz-raw://ca460a387ce27682beecc1f93a07c7ef6139504f2d4e2fce715abe82b6d2b039",
          "dweb:/ipfs/QmS8QgcAqhtHepcf8LYGToutbhsUXaTE7UNLQQi4fBJsUC"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IProtocolFeesCollector.sol": {
        "keccak256": "0xa42e8b311517ce70dd7f2af6b497603a81c3dd678961a5ffd8a2968eff6b7b5a",
        "urls": [
          "bzz-raw://9a11ea954c234e348896cec60165624d71e9fe7b44d7341d74e3bdc7790f2b6a",
          "dweb:/ipfs/QmNq1f6yAeJawBKpMmfNyoQ84nZquQ78YtT3tt3dMBtyCK"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/external/balancer/vault/IVault.sol": {
        "keccak256": "0x08d254ba643e02507305b570f794a75b5439d2ae799f761d26d3a2fd77f6d2fb",
        "urls": [
          "bzz-raw://2de3bcdb5d5805a44e2c643bc76bc14858825b2b018049f89962c8bc532ac24d",
          "dweb:/ipfs/QmfWZGKRChzwe97R8nqShjKdRX5k8Tp9HKwr7UAq9rCg1m"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/external/balancer/pool-utils/IRecoveryModeHelper.sol",
    "id": 58972,
    "exportedSymbols": {
      "IAsset": [
        61808
      ],
      "IAuthentication": [
        60077
      ],
      "IAuthorizer": [
        61823
      ],
      "IERC20": [
        60345
      ],
      "IFlashLoanRecipient": [
        62001
      ],
      "IProtocolFeesCollector": [
        62141
      ],
      "IRecoveryModeHelper": [
        58971
      ],
      "ISignaturesValidator": [
        60129
      ],
      "ITemporarilyPausable": [
        60148
      ],
      "IVault": [
        63277
      ],
      "IWETH": [
        60253
      ]
    },
    "nodeType": "SourceUnit",
    "src": "688:1770:141",
    "nodes": [
      {
        "id": 58946,
        "nodeType": "PragmaDirective",
        "src": "688:23:141",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 58947,
        "nodeType": "ImportDirective",
        "src": "713:29:141",
        "nodes": [],
        "absolutePath": "src/interfaces/external/balancer/vault/IVault.sol",
        "file": "../vault/IVault.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58972,
        "sourceUnit": 63278,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 58971,
        "nodeType": "ContractDefinition",
        "src": "1085:1372:141",
        "nodes": [
          {
            "id": 58955,
            "nodeType": "FunctionDefinition",
            "src": "1179:51:141",
            "nodes": [],
            "documentation": {
              "id": 58949,
              "nodeType": "StructuredDocumentation",
              "src": "1121:53:141",
              "text": " @notice Returns the Balancer Vault"
            },
            "functionSelector": "8d928af8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getVault",
            "nameLocation": "1188:8:141",
            "parameters": {
              "id": 58950,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1196:2:141"
            },
            "returnParameters": {
              "id": 58954,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58953,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58955,
                  "src": "1222:6:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IVault_$63277",
                    "typeString": "contract IVault"
                  },
                  "typeName": {
                    "id": 58952,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58951,
                      "name": "IVault",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 63277,
                      "src": "1222:6:141"
                    },
                    "referencedDeclaration": 63277,
                    "src": "1222:6:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IVault_$63277",
                      "typeString": "contract IVault"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1221:8:141"
            },
            "scope": 58971,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58970,
            "nodeType": "FunctionDefinition",
            "src": "2250:205:141",
            "nodes": [],
            "documentation": {
              "id": 58956,
              "nodeType": "StructuredDocumentation",
              "src": "1236:1009:141",
              "text": " @dev Computes a Recovery Mode Exit BPT and token amounts for a Pool. Only 'cash' balances are considered, to\n avoid scenarios where the last LPs to attempt to exit the Pool cannot do it because only 'managed' balance\n remains.\n The Pool is assumed to be a Composable Pool that uses ComposablePoolLib, meaning BPT will be its first token. It\n is also assumed that there is no 'managed' balance for BPT.\n WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation\n via reentrancy. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\n To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant\n function before calling `calcComposableRecoveryAmountsOut`. That will make the transaction revert in an unsafe\n context.\n (See `VaultReentrancyLib.ensureNotInVaultContext`)."
            },
            "functionSelector": "2787a287",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calcComposableRecoveryAmountsOut",
            "nameLocation": "2259:32:141",
            "parameters": {
              "id": 58963,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58958,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "2309:6:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 58970,
                  "src": "2301:14:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 58957,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2301:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58960,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "2338:8:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 58970,
                  "src": "2325:21:141",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58959,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2325:5:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58962,
                  "mutability": "mutable",
                  "name": "totalSupply",
                  "nameLocation": "2364:11:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 58970,
                  "src": "2356:19:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58961,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2356:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2291:90:141"
            },
            "returnParameters": {
              "id": 58969,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58965,
                  "mutability": "mutable",
                  "name": "bptAmountIn",
                  "nameLocation": "2413:11:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 58970,
                  "src": "2405:19:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58964,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2405:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58968,
                  "mutability": "mutable",
                  "name": "amountsOut",
                  "nameLocation": "2443:10:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 58970,
                  "src": "2426:27:141",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58966,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2426:7:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 58967,
                    "nodeType": "ArrayTypeName",
                    "src": "2426:9:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2404:50:141"
            },
            "scope": 58971,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRecoveryModeHelper",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 58948,
          "nodeType": "StructuredDocumentation",
          "src": "744:340:141",
          "text": " Interface for an auxiliary contract that computes Recovery Mode exits, removing logic from the core Pool contract\n that would otherwise take up a lot of bytecode size at the cost of some slight gas overhead. Since Recovery Mode\n exits are expected to be highly infrequent (and ideally never occur), this tradeoff makes sense."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          58971
        ],
        "name": "IRecoveryModeHelper",
        "nameLocation": "1095:19:141",
        "scope": 58972,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 141
}