{
  "address": "0x85BCf17Ffb74D6410e6B5babf4Ea5D5E1eAF9F74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "CreateCell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitPendingMaxTokensPerCell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitPendingPermissionless",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cellTokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "createCell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "delegated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isManagedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "managedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensPerCell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMaxTokensPerCell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingPermissionless",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permissionless",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pendingMaxTokensPerCell",
          "type": "uint256"
        }
      ],
      "name": "setPendingMaxTokensPerCell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pendingPermissionless",
          "type": "bool"
        }
      ],
      "name": "setPendingPermissionless",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniNfts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b4740855a40d6a95fd67d068556944154d7f86d7239d91ad1c4a34e805ba80a",
  "receipt": {
    "to": null,
    "from": "0x638F16FB633747d140e1Ed6219dB783e52a2207B",
    "contractAddress": "0x85BCf17Ffb74D6410e6B5babf4Ea5D5E1eAF9F74",
    "transactionIndex": 110,
    "gasUsed": "4572922",
    "logsBloom": "0x00000004000000000800000000000000080000000040000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000020000400000000000000800000000000000000000000000000000000000000000000001000040040000000000000000000000000000000000000000000008000000000000000000000000000000000000000000001000000000000000000000000200000040000000000000000000000000020100000000000020000000000000000000020000000000000000000000000000000000000010000000",
    "blockHash": "0x28476349e1c4d81c3f57f7220c3e742e7c10bc1e464fd0eef9cf0c87b4e0a51e",
    "transactionHash": "0x9b4740855a40d6a95fd67d068556944154d7f86d7239d91ad1c4a34e805ba80a",
    "logs": [
      {
        "transactionIndex": 110,
        "blockNumber": 13268320,
        "transactionHash": "0x9b4740855a40d6a95fd67d068556944154d7f86d7239d91ad1c4a34e805ba80a",
        "address": "0x85BCf17Ffb74D6410e6B5babf4Ea5D5E1eAF9F74",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a",
          "0x000000000000000000000000638f16fb633747d140e1ed6219db783e52a2207b",
          "0x000000000000000000000000638f16fb633747d140e1ed6219db783e52a2207b"
        ],
        "data": "0x",
        "logIndex": 160,
        "blockHash": "0x28476349e1c4d81c3f57f7220c3e742e7c10bc1e464fd0eef9cf0c87b4e0a51e"
      },
      {
        "transactionIndex": 110,
        "blockNumber": 13268320,
        "transactionHash": "0x9b4740855a40d6a95fd67d068556944154d7f86d7239d91ad1c4a34e805ba80a",
        "address": "0x85BCf17Ffb74D6410e6B5babf4Ea5D5E1eAF9F74",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a"
        ],
        "data": "0x",
        "logIndex": 161,
        "blockHash": "0x28476349e1c4d81c3f57f7220c3e742e7c10bc1e464fd0eef9cf0c87b4e0a51e"
      },
      {
        "transactionIndex": 110,
        "blockNumber": 13268320,
        "transactionHash": "0x9b4740855a40d6a95fd67d068556944154d7f86d7239d91ad1c4a34e805ba80a",
        "address": "0x85BCf17Ffb74D6410e6B5babf4Ea5D5E1eAF9F74",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb2ca199e5d628271269f73708112899272988324e125fafee9627694e71b1d25",
          "0x000000000000000000000000638f16fb633747d140e1ed6219db783e52a2207b",
          "0x000000000000000000000000638f16fb633747d140e1ed6219db783e52a2207b"
        ],
        "data": "0x",
        "logIndex": 162,
        "blockHash": "0x28476349e1c4d81c3f57f7220c3e742e7c10bc1e464fd0eef9cf0c87b4e0a51e"
      },
      {
        "transactionIndex": 110,
        "blockNumber": 13268320,
        "transactionHash": "0x9b4740855a40d6a95fd67d068556944154d7f86d7239d91ad1c4a34e805ba80a",
        "address": "0x85BCf17Ffb74D6410e6B5babf4Ea5D5E1eAF9F74",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xb2ca199e5d628271269f73708112899272988324e125fafee9627694e71b1d25",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a"
        ],
        "data": "0x",
        "logIndex": 163,
        "blockHash": "0x28476349e1c4d81c3f57f7220c3e742e7c10bc1e464fd0eef9cf0c87b4e0a51e"
      }
    ],
    "blockNumber": 13268320,
    "cumulativeGasUsed": "14231338",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
    "Mellow UniV3 Cells V1",
    "MUCV1"
  ],
  "solcInputHash": "9b07e89da684cda4361265849d68a216",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"CreateCell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitPendingMaxTokensPerCell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitPendingPermissionless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cellTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"createCell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"delegated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isManagedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"managedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerCell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMaxTokensPerCell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPermissionless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingMaxTokensPerCell\",\"type\":\"uint256\"}],\"name\":\"setPendingMaxTokensPerCell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pendingPermissionless\",\"type\":\"bool\"}],\"name\":\"setPendingPermissionless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createCell(address[],bytes)\":{\"notice\":\"-------------------  PUBLIC, MUTATING, GOVERNANCE OR PERMISSIONLESS  -------------------\"},\"delegated(uint256)\":{\"notice\":\"-------------------  PUBLIC, VIEW  -------------------\"},\"deposit(uint256,address[],uint256[])\":{\"notice\":\"-------------------  PUBLIC, MUTATING, NFT_OWNER  -------------------\"},\"managedTokens(uint256)\":{\"notice\":\"-------------------  PUBLIC, VIEW  -------------------\"},\"setPendingPermissionless(bool)\":{\"notice\":\"-------------------  PUBLIC, MUTATING, GOVERNANCE  -------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniV3Cells.sol\":\"UniV3Cells\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x33ba8a175bb81046a02b02e8d5eb4cabc87e1875f4a74bbc6f11c51db5e40d8c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/Cells.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./access/GovernanceAccessControl.sol\\\";\\nimport \\\"./interfaces/ICells.sol\\\";\\nimport \\\"./libraries/Array.sol\\\";\\n\\ncontract Cells is ICells, GovernanceAccessControl, ERC721 {\\n    bool public permissionless = false;\\n    bool public pendingPermissionless;\\n    uint256 public maxTokensPerCell = 10;\\n    uint256 public pendingMaxTokensPerCell;\\n    mapping(uint256 => address[]) private _managedTokens;\\n    mapping(uint256 => mapping(address => bool)) private _managedTokensIndex;\\n    uint256 private _topCellNft = 1;\\n\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {}\\n\\n    /// -------------------  PUBLIC, VIEW  -------------------\\n\\n    function managedTokens(uint256 nft) public view override returns (address[] memory) {\\n        return _managedTokens[nft];\\n    }\\n\\n    function isManagedToken(uint256 nft, address token) public view override returns (bool) {\\n        return _managedTokensIndex[nft][token];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, IERC165, AccessControlEnumerable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(ICells).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// -------------------  PUBLIC, MUTATING, GOVERNANCE  -------------------\\n\\n    function setPendingPermissionless(bool _pendingPermissionless) external {\\n        require(_isGovernanceOrDelegate(), \\\"PGD\\\");\\n        pendingPermissionless = _pendingPermissionless;\\n    }\\n\\n    function commitPendingPermissionless() external {\\n        require(_isGovernanceOrDelegate(), \\\"PGD\\\");\\n        permissionless = pendingPermissionless;\\n        pendingPermissionless = false;\\n    }\\n\\n    function setPendingMaxTokensPerCell(uint256 _pendingMaxTokensPerCell) external {\\n        require(_isGovernanceOrDelegate(), \\\"PGD\\\");\\n        pendingMaxTokensPerCell = _pendingMaxTokensPerCell;\\n    }\\n\\n    function commitPendingMaxTokensPerCell() external {\\n        require(_isGovernanceOrDelegate(), \\\"PGD\\\");\\n        maxTokensPerCell = pendingMaxTokensPerCell;\\n        pendingMaxTokensPerCell = 0;\\n    }\\n\\n    /// -------------------  PUBLIC, MUTATING, GOVERNANCE OR PERMISSIONLESS  -------------------\\n    function createCell(address[] memory cellTokens, bytes memory params) external override returns (uint256) {\\n        require(permissionless || _isGovernanceOrDelegate(), \\\"PGD\\\");\\n        require(cellTokens.length <= maxTokensPerCell, \\\"MT\\\");\\n        require(Array.isSortedAndUnique(cellTokens), \\\"SAU\\\");\\n        uint256 nft = _mintCellNft(cellTokens, params);\\n        _managedTokens[nft] = cellTokens;\\n        for (uint256 i = 0; i < cellTokens.length; i++) {\\n            _managedTokensIndex[nft][cellTokens[i]] = true;\\n        }\\n        emit ICells.CreateCell(_msgSender(), nft, params);\\n        return nft;\\n    }\\n\\n    /// -------------------  PRIVATE, MUTATING  -------------------\\n\\n    function _mintCellNft(address[] memory, bytes memory) internal virtual returns (uint256) {\\n        uint256 nft = _topCellNft;\\n        _topCellNft += 1;\\n        _safeMint(_msgSender(), nft);\\n        return nft;\\n    }\\n}\\n\",\"keccak256\":\"0x18b72db5661706fdc954ab7237f962fbe5e480709744c026639b08dc885c01a8\",\"license\":\"MIT\"},\"contracts/UniV3Cells.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ITokenCells.sol\\\";\\nimport \\\"./libraries/Array.sol\\\";\\nimport \\\"./libraries/external/LiquidityAmounts.sol\\\";\\nimport \\\"./libraries/external/TickMath.sol\\\";\\nimport \\\"./Cells.sol\\\";\\nimport \\\"./interfaces/external/univ3/IUniswapV3PoolState.sol\\\";\\nimport \\\"./interfaces/external/univ3/IUniswapV3Factory.sol\\\";\\nimport \\\"./interfaces/external/univ3/INonfungiblePositionManager.sol\\\";\\n\\ncontract UniV3Cells is IDelegatedCells, Cells {\\n    using SafeERC20 for IERC20;\\n    INonfungiblePositionManager public immutable positionManager;\\n    mapping(uint256 => uint256) public uniNfts;\\n\\n    constructor(\\n        INonfungiblePositionManager _positionManager,\\n        string memory name,\\n        string memory symbol\\n    ) Cells(name, symbol) {\\n        positionManager = _positionManager;\\n    }\\n\\n    /// -------------------  PUBLIC, VIEW  -------------------\\n\\n    function delegated(uint256 nft)\\n        public\\n        view\\n        override\\n        returns (address[] memory tokens, uint256[] memory tokenAmounts)\\n    {\\n        uint256 uniNft = uniNfts[nft];\\n        require(uniNft > 0, \\\"UNFT0\\\");\\n        (\\n            ,\\n            ,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            ,\\n            ,\\n            ,\\n\\n        ) = positionManager.positions(uniNft);\\n        IUniswapV3PoolState pool = IUniswapV3PoolState(IUniswapV3Factory(positionManager.factory()).getPool(token0, token1, fee));\\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\\n        uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\\n        uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n            sqrtPriceX96,\\n            sqrtPriceAX96,\\n            sqrtPriceBX96,\\n            liquidity\\n        );\\n        tokenAmounts = new uint256[](2);\\n        tokens = new address[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n        tokenAmounts[0] = amount0;\\n        tokenAmounts[1] = amount1;\\n    }\\n\\n    /// -------------------  PUBLIC, MUTATING, NFT_OWNER  -------------------\\n\\n    function deposit(\\n        uint256 nft,\\n        address[] calldata tokens,\\n        uint256[] calldata tokenAmounts\\n    ) external override returns (uint256[] memory actualTokenAmounts) {\\n        require(_isApprovedOrOwner(_msgSender(), nft), \\\"IO\\\");\\n        require(Array.isSortedAndUnique(tokens), \\\"SAU\\\");\\n        require(tokens.length == tokenAmounts.length, \\\"L\\\");\\n        uint256 uniNft = uniNfts[nft];\\n        require(uniNft > 0, \\\"UNFT0\\\");\\n        (, , address token0, address token1, , , , , , , , ) = positionManager.positions(uniNft);\\n        address[] memory pTokens = new address[](2);\\n        pTokens[0] = token0;\\n        pTokens[1] = token1;\\n        uint256[] memory pTokenAmounts = Array.projectTokenAmounts(pTokens, tokens, tokenAmounts);\\n        for (uint256 i = 0; i < pTokenAmounts.length; i++) {\\n            IERC20(pTokens[i]).safeTransferFrom(_msgSender(), address(this), pTokenAmounts[i]);\\n            _allowTokenIfNecessary(pTokens[i]);\\n        }\\n\\n        (\\n            ,\\n            uint256 amount0,\\n            uint256 amount1\\n        ) = positionManager.increaseLiquidity(\\n            INonfungiblePositionManager.IncreaseLiquidityParams({\\n                tokenId: uniNft,\\n                amount0Desired: pTokenAmounts[0],\\n                amount1Desired: pTokenAmounts[1],\\n                // TODO: allow for variable params\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                deadline: block.timestamp + 600\\n            })\\n        );\\n        actualTokenAmounts = new uint256[](2);\\n        actualTokenAmounts[0] = amount0;\\n        actualTokenAmounts[1] = amount1;\\n        for (uint256 i = 0; i < pTokens.length; i++) {\\n            if (actualTokenAmounts[i] < pTokenAmounts[i]) {\\n                IERC20(pTokens[i]).safeTransfer(_msgSender(), pTokenAmounts[i] - actualTokenAmounts[i]);\\n            } \\n        }\\n        emit Deposit(nft, tokens, actualTokenAmounts);\\n    }\\n\\n    function withdraw(\\n        uint256 nft,\\n        address to,\\n        address[] calldata tokens,\\n        uint256[] calldata tokenAmounts\\n    ) external override returns (uint256[] memory actualTokenAmounts) {\\n        require(_isApprovedOrOwner(_msgSender(), nft), \\\"IO\\\");\\n        require(Array.isSortedAndUnique(tokens), \\\"SAU\\\");\\n        require(tokens.length == tokenAmounts.length, \\\"L\\\");\\n        uint256 uniNft = uniNfts[nft];\\n        require(uniNft > 0, \\\"UNFT0\\\");\\n        uint256 liquidity = _getWithdrawLiquidity(nft, uniNft, tokens, tokenAmounts);\\n        if (liquidity == 0) {\\n            actualTokenAmounts = new uint256[](2);\\n            actualTokenAmounts[0] = 0;\\n            actualTokenAmounts[1] = 0;\\n            return actualTokenAmounts;\\n        }\\n        (\\n            uint256 amount0,\\n            uint256 amount1\\n        ) = positionManager.decreaseLiquidity(\\n            INonfungiblePositionManager.DecreaseLiquidityParams({\\n                tokenId: uniNft,\\n                liquidity: uint128(liquidity),\\n                // TODO: allow for variable params\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                deadline: block.timestamp + 600\\n            })\\n        );\\n        (\\n            uint256 actualAmount0,\\n            uint256 actualAmount1\\n        ) = positionManager.collect(INonfungiblePositionManager.CollectParams({\\n                tokenId: uniNft,\\n                recipient: to,\\n                amount0Max: uint128(amount0),\\n                amount1Max: uint128(amount1)\\n            })\\n        );\\n        actualTokenAmounts = new uint256[](2);\\n        actualTokenAmounts[0] = actualAmount0;\\n        actualTokenAmounts[1] = actualAmount1;\\n        emit Withdraw(nft, to, tokens, actualTokenAmounts);\\n    }\\n\\n    /// -------------------  PRIVATE, VIEW  -------------------\\n\\n    function _getWithdrawLiquidity(\\n        uint256 nft,\\n        uint256 uniNft, \\n        address[] calldata tokens, \\n        uint256[] calldata tokenAmounts\\n    ) internal view returns (uint256) {\\n        (address[] memory pTokens, uint256[] memory totalAmounts) = delegated(nft);\\n        uint256[] memory pTokenAmounts = Array.projectTokenAmounts(pTokens, tokens, tokenAmounts);\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint128 totalLiquidity,\\n            ,\\n            ,\\n            ,\\n\\n        ) = positionManager.positions(uniNft);\\n        if (totalAmounts[0] == 0) {\\n            if (pTokenAmounts[0] == 0) {\\n                return totalLiquidity * pTokenAmounts[1] / totalAmounts[1]; // liquidity1\\n            } else {\\n                return 0;\\n            }\\n        }\\n        if (totalAmounts[1] == 0) {\\n            if (pTokenAmounts[1] == 0) {\\n                return totalLiquidity * pTokenAmounts[0] / totalAmounts[0]; // liquidity0\\n            } else {\\n                return 0;\\n            }\\n        }\\n        uint256 liquidity0 = totalLiquidity * pTokenAmounts[0] / totalAmounts[0];\\n        uint256 liquidity1 = totalLiquidity * pTokenAmounts[1] / totalAmounts[1];\\n        return liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n    }\\n\\n    /// -------------------  PRIVATE, MUTATING  -------------------\\n\\n    function _mintCellNft(address[] memory tokens, bytes memory params) internal virtual override returns (uint256) {\\n        require(params.length == 8 * 32, \\\"IP\\\");\\n        require(tokens.length == 2, \\\"TL\\\");\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n        assembly {\\n            fee := mload(add(params, 32))\\n            tickLower := mload(add(params, 64))\\n            tickUpper := mload(add(params, 96))\\n            amount0Desired := mload(add(params, 128))\\n            amount1Desired := mload(add(params, 160))\\n            amount0Min := mload(add(params, 192))\\n            amount1Min := mload(add(params, 224))\\n            deadline := mload(add(params, 256))\\n        }\\n        \\n        // !!! Call to untrusted contracts\\n        IERC20(tokens[0]).safeTransferFrom(_msgSender(), address(this), amount0Desired);\\n        IERC20(tokens[1]).safeTransferFrom(_msgSender(), address(this), amount1Desired);\\n        _allowTokenIfNecessary(tokens[0]);\\n        _allowTokenIfNecessary(tokens[1]);\\n        // !!! End call\\n        (uint256 uniNft, , , ) = positionManager.mint(\\n            INonfungiblePositionManager.MintParams({\\n                token0: tokens[0],\\n                token1: tokens[1],\\n                fee: fee,\\n                tickLower: tickLower,\\n                tickUpper: tickUpper,\\n                amount0Desired: amount0Desired,\\n                amount1Desired: amount1Desired,\\n                amount0Min: amount0Min,\\n                amount1Min: amount1Min,\\n                recipient: address(this),\\n                deadline: deadline\\n            })\\n        );        \\n        uint256 cellNft = super._mintCellNft(tokens, params);\\n        uniNfts[cellNft] = uniNft;\\n        return cellNft;\\n    }\\n\\n    function _allowTokenIfNecessary(address token) internal {\\n        // Since tokens are not stored at contract address after any tx - it's safe to give unlimited approval\\n        if (IERC20(token).allowance(address(positionManager), address(this)) < type(uint256).max / 2) {\\n            IERC20(token).approve(address(positionManager), type(uint256).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9f5617608ac0c5866235a705682f0fdc75f089c4aa81275cedd81109f3b6719\",\"license\":\"MIT\"},\"contracts/access/GovernanceAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\ncontract GovernanceAccessControl is AccessControlEnumerable {\\n    bytes32 internal constant GOVERNANCE_ROLE = keccak256(\\\"governance\\\");\\n    bytes32 internal constant GOVERNANCE_DELEGATE_ROLE = keccak256(\\\"governance_delegate\\\");\\n\\n    constructor() {\\n        _setupRole(GOVERNANCE_ROLE, _msgSender());\\n        _setRoleAdmin(GOVERNANCE_ROLE, GOVERNANCE_ROLE);\\n        _setupRole(GOVERNANCE_DELEGATE_ROLE, _msgSender());\\n        _setRoleAdmin(GOVERNANCE_DELEGATE_ROLE, GOVERNANCE_ROLE);\\n    }\\n\\n    function _isGovernanceOrDelegate() internal view returns (bool) {\\n        return hasRole(GOVERNANCE_ROLE, _msgSender()) || hasRole(GOVERNANCE_DELEGATE_ROLE, _msgSender());\\n    }\\n\\n    function _isGovernance() internal view returns (bool) {\\n        return hasRole(GOVERNANCE_ROLE, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9b92c26d9bbcc735c57226e4a317b843bd78e22c078592ecc8e95e48add5f8e3\",\"license\":\"MIT\"},\"contracts/interfaces/ICells.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ICells is IERC721 {\\n    function managedTokens(uint256 nft) external view returns (address[] memory);\\n\\n    function isManagedToken(uint256 nft, address token) external view returns (bool);\\n\\n    function createCell(address[] memory cellTokens, bytes memory params) external returns (uint256);\\n\\n    event CreateCell(address indexed to, uint256 indexed nft, bytes params);\\n}\\n\",\"keccak256\":\"0x95dddd48547c5eb75c536b8e55551fb864e02114e2ec572b62983bf80a123901\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegatedCells.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./ICells.sol\\\";\\n\\ninterface IDelegatedCells is ICells {\\n    function delegated(uint256 nft) external view returns (address[] memory tokens, uint256[] memory tokenAmounts);\\n\\n    function deposit(\\n        uint256 nft,\\n        address[] calldata tokens,\\n        uint256[] calldata tokenAmounts\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    function withdraw(\\n        uint256 nft,\\n        address to,\\n        address[] calldata tokens,\\n        uint256[] calldata tokenAmounts\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n\\n    event Deposit(\\n        uint256 nft,\\n        address[] tokens,\\n        uint256[] actualTokenAmounts\\n    );\\n\\n    event Withdraw(\\n        uint256 nft,\\n        address to,\\n        address[] tokens,\\n        uint256[] actualTokenAmounts\\n    );\\n    // TODO: add methods for collecting liquidity mining rewards\\n}\\n\",\"keccak256\":\"0xc9150955bc706b158c84f5be111c63680c25e4a9da699b038c76041d43abe2dd\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenCells.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./IDelegatedCells.sol\\\";\\n\\ninterface ITokenCells is IDelegatedCells {\\n    function claimTokensToCell(\\n        uint256 nft,\\n        address[] calldata tokens,\\n        uint256[] calldata tokenAmounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ef8d2240374c58994738d0c31cfb2bad894422124d280046a32dd3b9c2ea24d\",\"license\":\"MIT\"},\"contracts/interfaces/external/univ3/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// TODO: Check the license\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\nimport \\\"./IPeripheryImmutableState.sol\\\";\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is IPeripheryImmutableState {\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe2ac18486247c954c3e5edb2c9cc99e51c98a6a8925ec405eab7f2f03a264ad5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/univ3/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// TODO: Check the license\\npragma solidity =0.8.7;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe164dac9d1043aee4830a45273d292c5f21b718c4a9e71400909957e8b009713\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/univ3/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// TODO: Check the license\\npragma solidity =0.8.7;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0x1b7a8bef64b09840d34e305c283d176fb6684f065db264f066ed6764b21da28f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/univ3/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// TODO: Check the license\\npragma solidity =0.8.7;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x143e9a6b617be9c627e5e9bb82411c6ff51437517d3e903401cd331c30efeab7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary Array {\\n    function bubbleSort(address[] memory arr) internal pure {\\n        uint256 l = arr.length;\\n        for (uint256 i = 0; i < l; i++) {\\n            for (uint256 j = i + 1; j < l; j++) {\\n                if (arr[i] > arr[j]) {\\n                    address temp = arr[i];\\n                    arr[i] = arr[j];\\n                    arr[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n\\n    function isSortedAndUnique(address[] memory tokens) internal pure returns (bool) {\\n        if (tokens.length < 2) {\\n            return true;\\n        }\\n        for (uint256 i = 0; i < tokens.length - 1; i++) {\\n            if (tokens[i] >= tokens[i + 1]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev\\n    /// Requires both sets of tokens to be sorted. When tokens are not sorted, it's undefined behavior.\\n    /// If there is a token in tokensToProject that is not part of tokens and corresponding tokenAmountsToProject > 0, reverts.\\n    /// Zero token amount is eqiuvalent to missing token\\n    function projectTokenAmounts(\\n        address[] memory tokens,\\n        address[] memory tokensToProject,\\n        uint256[] memory tokenAmountsToProject\\n    ) internal pure returns (uint256[] memory) {\\n        uint256[] memory res = new uint256[](tokens.length);\\n        uint256 t = 0;\\n        uint256 tp = 0;\\n        while ((t < tokens.length) && (tp < tokensToProject.length)) {\\n            if (tokens[t] < tokensToProject[tp]) {\\n                res[t] = 0;\\n                t++;\\n            } else if (tokens[t] > tokensToProject[tp]) {\\n                if (tokenAmountsToProject[tp] == 0) {\\n                    tp++;\\n                } else {\\n                    revert(\\\"TPS\\\");\\n                }\\n            } else {\\n                res[t] = tokenAmountsToProject[tp];\\n                t++;\\n                tp++;\\n            }\\n        }\\n        while (t < tokens.length) {\\n            res[t] = 0;\\n            t++;\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Splits each amount from `amounts` into k amounts according to `weights`.\\n    /// @dev Requires tokens and tokenAmounts to be vector of size n and delegatedTokenAmounts to be k x n matrix\\n    /// so that delegatedTokenAmounts[i] is a vector of size n\\n    /// norm is a vector 1 x k\\n    /// the error is up to k tokens due to rounding\\n    /// @param amounts Amounts to split, vector n x 1\\n    /// @param weights Weights of the split, matrix n x k, weights[i] is vector n x 1.\\n    /// Weights do not need to sum to 1 in each column, but they will be normalized on split.\\n    function splitAmounts(uint256[] memory amounts, uint256[][] memory weights)\\n        internal\\n        pure\\n        returns (uint256[][] memory)\\n    {\\n        uint256 k = weights.length;\\n        require(k > 0, \\\"KGT0\\\");\\n        uint256 n = amounts.length;\\n        require(n > 0, \\\"NGT0\\\");\\n        uint256[] memory weightsNorm = new uint256[](n);\\n        for (uint256 i = 0; i < k; i++) {\\n            require(weights[i].length == n, \\\"NV\\\");\\n        }\\n        for (uint256 j = 0; j < n; j++) {\\n            weightsNorm[j] = 0;\\n            for (uint256 i = 0; i < k; i++) {\\n                weightsNorm[j] += weights[i][j];\\n            }\\n        }\\n\\n        uint256[][] memory res = new uint256[][](k);\\n        for (uint256 i = 0; i < k; i++) {\\n            res[i] = new uint256[](n);\\n            for (uint256 j = 0; j < n; j++) {\\n                res[i][j] = (weights[i][j] * amounts[j]) / weightsNorm[j];\\n            }\\n        }\\n        return res;\\n    }\\n\\n    function _isSubsetOf(\\n        address[] memory tokens,\\n        address[] memory tokensToCheck,\\n        address[] memory amountsToCheck\\n    ) internal {}\\n}\\n\",\"keccak256\":\"0x9fa4a3b58d4d5749999a860a63831f24752fcbb50dd7901f2c8e1f25fe4c6833\",\"license\":\"MIT\"},\"contracts/libraries/external/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.7;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x8b749d729865bbae69e9d04d629e80813aec130fc401634803fbdeca919ef265\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/external/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // diff: original uint256 twos = -denominator & denominator;\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a03d93c1502f6a68dea9b649c109375bed51592b760e025cc4f5a615ae930f8\",\"license\":\"MIT\"},\"contracts/libraries/external/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.7;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x794b7fd9fc77a75595ac442d46a15c43f13026d1bfdd83ebffcacbef5f08a94f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/external/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.7;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        // diff: original require(absTick <= uint256(MAX_TICK), \\\"T\\\");\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xd0e90a65a824eb0d878ce0ae934a46e38e6cc94218b1cd034e51d9008051d20d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040526008805460ff19169055600a6009556001600d553480156200002557600080fd5b506040516200513738038062005137833981016040819052620000489162000429565b8181818162000067600080516020620050f78339815191523362000113565b62000082600080516020620050f78339815191528062000156565b6200009d600080516020620051178339815191523362000113565b620000c760008051602062005117833981519152600080516020620050f783398151915262000156565b8151620000dc906002906020850190620002cc565b508051620000f2906003906020840190620002cc565b505050505060609290921b6001600160601b03191660805250620005069050565b6200012a8282620001aa60201b62001ca91760201c565b60008281526001602090815260409091206200015191839062001cb7620001ba821b17901c565b505050565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b620001b68282620001da565b5050565b6000620001d1836001600160a01b0384166200027a565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001b6576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620002c357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001d4565b506000620001d4565b828054620002da90620004b3565b90600052602060002090601f016020900481019282620002fe576000855562000349565b82601f106200031957805160ff191683800117855562000349565b8280016001018555821562000349579182015b82811115620003495782518255916020019190600101906200032c565b50620003579291506200035b565b5090565b5b808211156200035757600081556001016200035c565b600082601f8301126200038457600080fd5b81516001600160401b0380821115620003a157620003a1620004f0565b604051601f8301601f19908116603f01168101908282118183101715620003cc57620003cc620004f0565b81604052838152602092508683858801011115620003e957600080fd5b600091505b838210156200040d5785820183015181830184015290820190620003ee565b838211156200041f5760008385830101525b9695505050505050565b6000806000606084860312156200043f57600080fd5b83516001600160a01b03811681146200045757600080fd5b60208501519093506001600160401b03808211156200047557600080fd5b620004838783880162000372565b935060408601519150808211156200049a57600080fd5b50620004a98682870162000372565b9150509250925092565b600181811c90821680620004c857607f821691505b60208210811415620004ea57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c614b8c6200056b600039600081816103e00152818161090f01528181610b5201528181610fcf0152818161108201528181611848015281816119ca015281816121c70152818161226c015281816124860152612db20152614b8c6000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80639010d07c11610130578063c87b56dd116100b8578063ebcf2d771161007c578063ebcf2d771461050f578063ec15eb161461052f578063ee48184514610538578063ee7e2dd31461054a578063fe7f20341461058357600080fd5b8063c87b56dd14610487578063ca15c8731461049a578063d547741f146104ad578063de7f9e4e146104c0578063e985e9c5146104d357600080fd5b8063a217fddf116100ff578063a217fddf1461043d578063a22cb46514610445578063b539978214610458578063b7874baa14610461578063b88d4fde1461047457600080fd5b80639010d07c1461040257806391d148541461041557806395d89b4114610428578063a1256f9f1461043057600080fd5b8063248a9ca3116101b357806342842e0e1161018257806342842e0e1461039a57806344fbb334146103ad5780636352211e146103b557806370a08231146103c8578063791b98bc146103db57600080fd5b8063248a9ca31461033e5780632f2ff15d1461036157806336568abe14610374578063423b01ec1461038757600080fd5b80630d7a41b7116101fa5780630d7a41b7146102a957806313a24a30146102c957806318e44a49146102ea5780631bb7ad6b1461030b57806323b872dd1461032b57600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a366004614136565b61058b565b60405190151581526020015b60405180910390f35b61025c6105b6565b60405161024b91906146bf565b61027c6102773660046140d6565b610648565b6040516001600160a01b03909116815260200161024b565b6102a76102a2366004613f95565b6106e2565b005b6102bc6102b73660046142df565b6107f8565b60405161024b91906146ac565b6102dc6102d7366004613fc1565b610e12565b60405190815260200161024b565b6102fd6102f83660046140d6565b610f93565b60405161024b92919061467e565b61031e6103193660046140d6565b61134a565b60405161024b919061466b565b6102a7610339366004613eba565b6113b6565b6102dc61034c3660046140d6565b60009081526020819052604090206001015490565b6102a761036f3660046140ef565b6113e7565b6102a76103823660046140ef565b611409565b6102a761039536600461409c565b61142b565b6102a76103a8366004613eba565b611469565b6102a7611484565b61027c6103c33660046140d6565b6114b5565b6102dc6103d6366004613e47565b61152c565b61027c7f000000000000000000000000000000000000000000000000000000000000000081565b61027c610410366004614114565b6115b3565b61023f6104233660046140ef565b6115d2565b61025c6115fb565b60085461023f9060ff1681565b6102dc600081565b6102a7610453366004613f67565b61160a565b6102dc600a5481565b6102bc61046f366004614253565b6116cf565b6102a7610482366004613efb565b611afd565b61025c6104953660046140d6565b611b35565b6102dc6104a83660046140d6565b611c1c565b6102a76104bb3660046140ef565b611c33565b6102a76104ce3660046140d6565b611c3d565b61023f6104e1366004613e81565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6102dc61051d3660046140d6565b600e6020526000908152604090205481565b6102dc60095481565b60085461023f90610100900460ff1681565b61023f6105583660046140ef565b6000918252600c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102a7611c66565b60006001600160e01b03198216631ccd795160e31b14806105b057506105b082611ccc565b92915050565b6060600280546105c590614a05565b80601f01602080910402602001604051908101604052809291908181526020018280546105f190614a05565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b03166106c65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006106ed826114b5565b9050806001600160a01b0316836001600160a01b0316141561075b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106bd565b336001600160a01b0382161480610777575061077781336104e1565b6107e95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106bd565b6107f38383611d0c565b505050565b60606108043387611d7a565b6108355760405162461bcd60e51b8152602060048201526002602482015261494f60f01b60448201526064016106bd565b610871858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611e7192505050565b61088d5760405162461bcd60e51b81526004016106bd90614741565b8382146108c05760405162461bcd60e51b81526020600482015260016024820152601360fa1b60448201526064016106bd565b6000868152600e6020526040902054806108ec5760405162461bcd60e51b81526004016106bd906147af565b60405163133f757160e31b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399fbab88906024016101806040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a91906143b9565b50505050505050509350935050506000600267ffffffffffffffff8111156109b4576109b4614b07565b6040519080825280602002602001820160405280156109dd578160200160208202803683370190505b50905082816000815181106109f4576109f4614af1565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110610a2857610a28614af1565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610ab8828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250611f1692505050565b905060005b8151811015610b4c57610b183330848481518110610add57610add614af1565b6020026020010151868581518110610af757610af7614af1565b60200260200101516001600160a01b0316612138909392919063ffffffff16565b610b3a838281518110610b2d57610b2d614af1565b60200260200101516121a3565b80610b4481614a40565b915050610abd565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663219f5d176040518060c001604052808a815260200186600081518110610ba357610ba3614af1565b6020026020010151815260200186600181518110610bc357610bc3614af1565b60200260200101518152602001600081526020016000815260200142610258610bec9190614938565b9052604080516001600160e01b031960e085901b1681528251600482015260208301516024820152908201516044820152606082015160648201526080820151608482015260a09091015160a482015260c401606060405180830381600087803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c919190614170565b6040805160028082526060820183529396509194509092506020830190803683370190505097508188600081518110610ccc57610ccc614af1565b6020026020010181815250508088600181518110610cec57610cec614af1565b60200260200101818152505060005b8451811015610dc457838181518110610d1657610d16614af1565b6020026020010151898281518110610d3057610d30614af1565b60200260200101511015610db257610db2338a8381518110610d5457610d54614af1565b6020026020010151868481518110610d6e57610d6e614af1565b6020026020010151610d8091906149ab565b878481518110610d9257610d92614af1565b60200260200101516001600160a01b03166122fb9092919063ffffffff16565b80610dbc81614a40565b915050610cfb565b507fe33829dd3495a41ba02f88de5eadec2635e25192c73dee8c65625206aa61e09a8d8d8d8b604051610dfa94939291906148db565b60405180910390a15050505050505095945050505050565b60085460009060ff1680610e295750610e2961232b565b610e455760405162461bcd60e51b81526004016106bd906146d2565b60095483511115610e7d5760405162461bcd60e51b8152602060048201526002602482015261135560f21b60448201526064016106bd565b610e8683611e71565b610ea25760405162461bcd60e51b81526004016106bd90614741565b6000610eae848461238c565b6000818152600b602090815260409091208651929350610ed2929091870190613cb3565b5060005b8451811015610f49576000828152600c60205260408120865160019290889085908110610f0557610f05614af1565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610f4181614a40565b915050610ed6565b5080336001600160a01b03167fe423da5b0aa0eb7a8c8409551a7f9487952c6003da26568ea41ee22cf3133d4a85604051610f8491906146bf565b60405180910390a39392505050565b6000818152600e6020526040902054606090819080610fc45760405162461bcd60e51b81526004016106bd906147af565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399fbab88886040518263ffffffff1660e01b815260040161101b91815260200190565b6101806040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c91906143b9565b50505050975097509750975097509750505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190613e64565b604051630b4c774160e11b81526001600160a01b038981166004830152888116602483015262ffffff881660448301529190911690631698ee829060640160206040518083038186803b15801561116757600080fd5b505afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f9190613e64565b90506000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156111dc57600080fd5b505afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121491906141a5565b50505050505090506000611227866125fa565b90506000611234866125fa565b90506000806112458585858a612a0f565b604080516002808252606082019092529294509092508160200160208202803683370190505060408051600280825260608201909252919f50816020016020820280368337019050509e508b8f6000815181106112a4576112a4614af1565b60200260200101906001600160a01b031690816001600160a01b0316815250508a8f6001815181106112d8576112d8614af1565b60200260200101906001600160a01b031690816001600160a01b031681525050818e60008151811061130c5761130c614af1565b602002602001018181525050808e60018151811061132c5761132c614af1565b60200260200101818152505050505050505050505050505050915091565b6000818152600b60209081526040918290208054835181840281018401909452808452606093928301828280156113aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161138c575b50505050509050919050565b6113c03382611d7a565b6113dc5760405162461bcd60e51b81526004016106bd9061475e565b6107f3838383612aab565b6113f18282612c4b565b60008281526001602052604090206107f39082611cb7565b6114138282612c71565b60008281526001602052604090206107f39082612ceb565b61143361232b565b61144f5760405162461bcd60e51b81526004016106bd906146d2565b600880549115156101000261ff0019909216919091179055565b6107f383838360405180602001604052806000815250611afd565b61148c61232b565b6114a85760405162461bcd60e51b81526004016106bd906146d2565b600a805460095560009055565b6000818152600460205260408120546001600160a01b0316806105b05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106bd565b60006001600160a01b0382166115975760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106bd565b506001600160a01b031660009081526005602052604090205490565b60008281526001602052604081206115cb9083612d00565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600380546105c590614a05565b6001600160a01b0382163314156116635760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106bd565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60606116db3388611d7a565b61170c5760405162461bcd60e51b8152602060048201526002602482015261494f60f01b60448201526064016106bd565b611748858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611e7192505050565b6117645760405162461bcd60e51b81526004016106bd90614741565b8382146117975760405162461bcd60e51b81526020600482015260016024820152601360fa1b60448201526064016106bd565b6000878152600e6020526040902054806117c35760405162461bcd60e51b81526004016106bd906147af565b60006117d3898389898989612d0c565b90508061184357604080516002808252606082018352909160208301908036833701905050925060008360008151811061180f5761180f614af1565b60200260200101818152505060008360018151811061183057611830614af1565b6020026020010181815250505050611af3565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c49ccbe6040518060a00160405280878152602001866001600160801b031681526020016000815260200160008152602001426102586118b19190614938565b9052604080516001600160e01b031960e085901b1681528251600482015260208301516001600160801b0316602482015290820151604482015260608201516064820152608090910151608482015260a4016040805180830381600087803b15801561191c57600080fd5b505af1158015611930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119549190614395565b604080516080810182528781526001600160a01b038e8116602083019081526001600160801b0380871684860190815281871660608601908152955163fc6f786560e01b8152945160048601529151831660248501529051811660448401529251909216606482015292945090925060009182917f0000000000000000000000000000000000000000000000000000000000000000169063fc6f7865906084016040805180830381600087803b158015611a0d57600080fd5b505af1158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a459190614395565b604080516002808252606082019092529294509092508160200160208202803683370190505096508187600081518110611a8157611a81614af1565b6020026020010181815250508087600181518110611aa157611aa1614af1565b6020026020010181815250507f8d04027fcc6b389782391c87ffe1fbc8b300720c147b657fc2cd85161fcf2fe98d8d8d8d8b604051611ae4959493929190614892565b60405180910390a15050505050505b9695505050505050565b611b073383611d7a565b611b235760405162461bcd60e51b81526004016106bd9061475e565b611b2f84848484613030565b50505050565b6000818152600460205260409020546060906001600160a01b0316611bb45760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106bd565b6000611bcb60408051602081019091526000815290565b90506000815111611beb57604051806020016040528060008152506115cb565b80611bf584613063565b604051602001611c06929190614594565b6040516020818303038152906040529392505050565b60008181526001602052604081206105b090613161565b611413828261316b565b611c4561232b565b611c615760405162461bcd60e51b81526004016106bd906146d2565b600a55565b611c6e61232b565b611c8a5760405162461bcd60e51b81526004016106bd906146d2565b6008805461ff001960ff61010083041615151661ffff19909116179055565b611cb38282613191565b5050565b60006115cb836001600160a01b038416613215565b60006001600160e01b031982166380ac58cd60e01b1480611cfd57506001600160e01b03198216635b5e139f60e01b145b806105b057506105b082613264565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d41826114b5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b0316611df35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106bd565b6000611dfe836114b5565b9050806001600160a01b0316846001600160a01b03161480611e395750836001600160a01b0316611e2e84610648565b6001600160a01b0316145b80611e6957506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b6000600282511015611e8557506001919050565b60005b60018351611e9691906149ab565b811015611f0d5782611ea9826001614938565b81518110611eb957611eb9614af1565b60200260200101516001600160a01b0316838281518110611edc57611edc614af1565b60200260200101516001600160a01b031610611efb5750600092915050565b80611f0581614a40565b915050611e88565b50600192915050565b60606000845167ffffffffffffffff811115611f3457611f34614b07565b604051908082528060200260200182016040528015611f5d578160200160208202803683370190505b5090506000805b865182108015611f745750855181105b156120f357858181518110611f8b57611f8b614af1565b60200260200101516001600160a01b0316878381518110611fae57611fae614af1565b60200260200101516001600160a01b03161015611ff6576000838381518110611fd957611fd9614af1565b602090810291909101015281611fee81614a40565b925050611f64565b85818151811061200857612008614af1565b60200260200101516001600160a01b031687838151811061202b5761202b614af1565b60200260200101516001600160a01b031611156120a45784818151811061205457612054614af1565b602002602001015160001415612076578061206e81614a40565b915050611f64565b60405162461bcd60e51b815260206004820152600360248201526254505360e81b60448201526064016106bd565b8481815181106120b6576120b6614af1565b60200260200101518383815181106120d0576120d0614af1565b6020908102919091010152816120e581614a40565b925050808061206e90614a40565b865182101561212d57600083838151811061211057612110614af1565b60209081029190910101528161212581614a40565b9250506120f3565b509095945050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b2f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613289565b6121b06002600019614950565b604051636eb1769f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015230602483015283169063dd62ed3e9060440160206040518083038186803b15801561221757600080fd5b505afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f919061423a565b10156122f85760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600019602483015282169063095ea7b390604401602060405180830381600087803b1580156122c057600080fd5b505af11580156122d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb391906140b9565b50565b6040516001600160a01b0383166024820152604481018290526107f390849063a9059cbb60e01b9060640161216c565b60006123577fabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a336115d2565b8061238757506123877fb2ca199e5d628271269f73708112899272988324e125fafee9627694e71b1d25336115d2565b905090565b60008151610100146123c55760405162461bcd60e51b8152602060048201526002602482015261049560f41b60448201526064016106bd565b82516002146123fb5760405162461bcd60e51b8152602060048201526002602482015261151360f21b60448201526064016106bd565b602082015160408301516060840151608085015160a086015160c087015160e088015161010089015161243d3330878e600081518110610af757610af7614af1565b6124563330868e600181518110610af757610af7614af1565b61246c8b600081518110610b2d57610b2d614af1565b6124828b600181518110610b2d57610b2d614af1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663883164566040518061016001604052808f6000815181106124d2576124d2614af1565b60200260200101516001600160a01b031681526020018f6001815181106124fb576124fb614af1565b60200260200101516001600160a01b031681526020018c62ffffff1681526020018b60020b81526020018a60020b8152602001898152602001888152602001878152602001868152602001306001600160a01b03168152602001858152506040518263ffffffff1660e01b815260040161257591906147ce565b608060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c79190614359565b505050905060006125d88d8d61335b565b6000818152600e6020526040902092909255509b9a5050505050505050505050565b60008060008360020b12612611578260020b61261e565b8260020b61261e90614a92565b905061262d620d89e719614a6f565b60020b8111156126635760405162461bcd60e51b81526020600482015260016024820152601560fa1b60448201526064016106bd565b60006001821661267757600160801b612689565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156126c85760806126c3826ffff97272373d413259a46990580e213a614964565b901c90505b60048216156126f25760806126ed826ffff2e50f5f656932ef12357cf3c7fdcc614964565b901c90505b600882161561271c576080612717826fffe5caca7e10e4e61c3624eaa0941cd0614964565b901c90505b6010821615612746576080612741826fffcb9843d60f6159c9db58835c926644614964565b901c90505b602082161561277057608061276b826fff973b41fa98c081472e6896dfb254c0614964565b901c90505b604082161561279a576080612795826fff2ea16466c96a3843ec78b326b52861614964565b901c90505b60808216156127c45760806127bf826ffe5dee046a99a2a811c461f1969c3053614964565b901c90505b6101008216156127ef5760806127ea826ffcbe86c7900a88aedcffc83b479aa3a4614964565b901c90505b61020082161561281a576080612815826ff987a7253ac413176f2b074cf7815e54614964565b901c90505b610400821615612845576080612840826ff3392b0822b70005940c7a398e4b70f3614964565b901c90505b61080082161561287057608061286b826fe7159475a2c29b7443b29c7fa6e889d9614964565b901c90505b61100082161561289b576080612896826fd097f3bdfd2022b8845ad8f792aa5825614964565b901c90505b6120008216156128c65760806128c1826fa9f746462d870fdf8a65dc1f90e061e5614964565b901c90505b6140008216156128f15760806128ec826f70d869a156d2a1b890bb3df62baf32f7614964565b901c90505b61800082161561291c576080612917826f31be135f97d08fd981231505542fcfa6614964565b901c90505b62010000821615612948576080612943826f09aa508b5b7a84e1c677de54f3e99bc9614964565b901c90505b6202000082161561297357608061296e826e5d6af8dedb81196699c329225ee604614964565b901c90505b6204000082161561299d576080612998826d2216e584f5fa1ea926041bedfe98614964565b901c90505b620800008216156129c55760806129c0826b048a170391f7dc42444e8fa2614964565b901c90505b60008460020b13156129e0576129dd81600019614950565b90505b6129ef64010000000082614a5b565b156129fb5760016129fe565b60005b611e699060ff16602083901c614938565b600080836001600160a01b0316856001600160a01b03161115612a30579293925b846001600160a01b0316866001600160a01b031611612a5b57612a54858585613380565b9150612aa2565b836001600160a01b0316866001600160a01b03161015612a9457612a80868585613380565b9150612a8d8587856133f3565b9050612aa2565b612a9f8585856133f3565b90505b94509492505050565b826001600160a01b0316612abe826114b5565b6001600160a01b031614612b265760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106bd565b6001600160a01b038216612b885760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106bd565b612b93600082611d0c565b6001600160a01b0383166000908152600560205260408120805460019290612bbc9084906149ab565b90915550506001600160a01b0382166000908152600560205260408120805460019290612bea908490614938565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600082815260208190526040902060010154612c67813361343d565b6107f38383613191565b6001600160a01b0381163314612ce15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106bd565b611cb382826134a1565b60006115cb836001600160a01b038416613506565b60006115cb83836135f9565b6000806000612d1a89610f93565b915091506000612d8e8389898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611f1692505050565b60405163133f757160e31b8152600481018b90529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399fbab88906024016101806040518083038186803b158015612df557600080fd5b505afa158015612e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2d91906143b9565b5050505097505050505050505082600081518110612e4d57612e4d614af1565b602002602001015160001415612eec5781600081518110612e7057612e70614af1565b602002602001015160001415612edf5782600181518110612e9357612e93614af1565b602002602001015182600181518110612eae57612eae614af1565b6020026020010151826001600160801b0316612eca9190614964565b612ed49190614950565b945050505050611af3565b6000945050505050611af3565b82600181518110612eff57612eff614af1565b602002602001015160001415612f605781600181518110612f2257612f22614af1565b602002602001015160001415612edf5782600081518110612f4557612f45614af1565b602002602001015182600081518110612eae57612eae614af1565b600083600081518110612f7557612f75614af1565b602002602001015183600081518110612f9057612f90614af1565b6020026020010151836001600160801b0316612fac9190614964565b612fb69190614950565b9050600084600181518110612fcd57612fcd614af1565b602002602001015184600181518110612fe857612fe8614af1565b6020026020010151846001600160801b03166130049190614964565b61300e9190614950565b905080821061301d578061301f565b815b9d9c50505050505050505050505050565b61303b848484612aab565b61304784848484613623565b611b2f5760405162461bcd60e51b81526004016106bd906146ef565b6060816130875750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130b1578061309b81614a40565b91506130aa9050600a83614950565b915061308b565b60008167ffffffffffffffff8111156130cc576130cc614b07565b6040519080825280601f01601f1916602001820160405280156130f6576020820181803683370190505b5090505b8415611e695761310b6001836149ab565b9150613118600a86614a5b565b613123906030614938565b60f81b81838151811061313857613138614af1565b60200101906001600160f81b031916908160001a90535061315a600a86614950565b94506130fa565b60006105b0825490565b600082815260208190526040902060010154613187813361343d565b6107f383836134a1565b61319b82826115d2565b611cb3576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556131d13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461325c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105b0565b5060006105b0565b60006001600160e01b03198216635a05180f60e01b14806105b057506105b082613730565b60006132de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137659092919063ffffffff16565b8051909150156107f357808060200190518101906132fc91906140b9565b6107f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bd565b600d8054600091600190836133708385614938565b909155506115cb90503382613774565b6000826001600160a01b0316846001600160a01b031611156133a0579192915b6001600160a01b0384166133e96fffffffffffffffffffffffffffffffff60601b606085901b166133d18787614983565b6001600160a01b0316866001600160a01b031661378e565b611e699190614950565b6000826001600160a01b0316846001600160a01b03161115613413579192915b611e696001600160801b03831661342a8686614983565b6001600160a01b0316600160601b61378e565b61344782826115d2565b611cb35761345f816001600160a01b03166014613841565b61346a836020613841565b60405160200161347b9291906145c3565b60408051601f198184030181529082905262461bcd60e51b82526106bd916004016146bf565b6134ab82826115d2565b15611cb3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156135ef57600061352a6001836149ab565b855490915060009061353e906001906149ab565b90508181146135a357600086600001828154811061355e5761355e614af1565b906000526020600020015490508087600001848154811061358157613581614af1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806135b4576135b4614adb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105b0565b60009150506105b0565b600082600001828154811061361057613610614af1565b9060005260206000200154905092915050565b60006001600160a01b0384163b1561372557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613667903390899088908890600401614638565b602060405180830381600087803b15801561368157600080fd5b505af19250505080156136b1575060408051601f3d908101601f191682019092526136ae91810190614153565b60015b61370b573d8080156136df576040519150601f19603f3d011682016040523d82523d6000602084013e6136e4565b606091505b5080516137035760405162461bcd60e51b81526004016106bd906146ef565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e69565b506001949350505050565b60006001600160e01b03198216637965db0b60e01b14806105b057506301ffc9a760e01b6001600160e01b03198316146105b0565b6060611e6984846000856139dd565b611cb3828260405180602001604052806000815250613b05565b6000808060001985870985870292508281108382030391505080600014156137c857600084116137bd57600080fd5b5082900490506115cb565b8084116137d457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60606000613850836002614964565b61385b906002614938565b67ffffffffffffffff81111561387357613873614b07565b6040519080825280601f01601f19166020018201604052801561389d576020820181803683370190505b509050600360fc1b816000815181106138b8576138b8614af1565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106138e7576138e7614af1565b60200101906001600160f81b031916908160001a905350600061390b846002614964565b613916906001614938565b90505b600181111561398e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061394a5761394a614af1565b1a60f81b82828151811061396057613960614af1565b60200101906001600160f81b031916908160001a90535060049490941c93613987816149ee565b9050613919565b5083156115cb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106bd565b606082471015613a3e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106bd565b843b613a8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bd565b600080866001600160a01b03168587604051613aa89190614578565b60006040518083038185875af1925050503d8060008114613ae5576040519150601f19603f3d011682016040523d82523d6000602084013e613aea565b606091505b5091509150613afa828286613b38565b979650505050505050565b613b0f8383613b71565b613b1c6000848484613623565b6107f35760405162461bcd60e51b81526004016106bd906146ef565b60608315613b475750816115cb565b825115613b575782518084602001fd5b8160405162461bcd60e51b81526004016106bd91906146bf565b6001600160a01b038216613bc75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106bd565b6000818152600460205260409020546001600160a01b031615613c2c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106bd565b6001600160a01b0382166000908152600560205260408120805460019290613c55908490614938565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054828255906000526020600020908101928215613d08579160200282015b82811115613d0857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613cd3565b50613d14929150613d18565b5090565b5b80821115613d145760008155600101613d19565b8051613d3881614b1d565b919050565b60008083601f840112613d4f57600080fd5b50813567ffffffffffffffff811115613d6757600080fd5b6020830191508360208260051b8501011115613d8257600080fd5b9250929050565b600082601f830112613d9a57600080fd5b813567ffffffffffffffff811115613db457613db4614b07565b613dc7601f8201601f1916602001614907565b818152846020838601011115613ddc57600080fd5b816020850160208301376000918101602001919091529392505050565b8051600281900b8114613d3857600080fd5b80516001600160801b0381168114613d3857600080fd5b805161ffff81168114613d3857600080fd5b805162ffffff81168114613d3857600080fd5b600060208284031215613e5957600080fd5b81356115cb81614b1d565b600060208284031215613e7657600080fd5b81516115cb81614b1d565b60008060408385031215613e9457600080fd5b8235613e9f81614b1d565b91506020830135613eaf81614b1d565b809150509250929050565b600080600060608486031215613ecf57600080fd5b8335613eda81614b1d565b92506020840135613eea81614b1d565b929592945050506040919091013590565b60008060008060808587031215613f1157600080fd5b8435613f1c81614b1d565b93506020850135613f2c81614b1d565b925060408501359150606085013567ffffffffffffffff811115613f4f57600080fd5b613f5b87828801613d89565b91505092959194509250565b60008060408385031215613f7a57600080fd5b8235613f8581614b1d565b91506020830135613eaf81614b32565b60008060408385031215613fa857600080fd5b8235613fb381614b1d565b946020939093013593505050565b60008060408385031215613fd457600080fd5b823567ffffffffffffffff80821115613fec57600080fd5b818501915085601f83011261400057600080fd5b813560208282111561401457614014614b07565b8160051b614023828201614907565b8381528281019086840183880185018c101561403e57600080fd5b600097505b8588101561406d578035935061405884614b1d565b83835260019790970196918401918401614043565b50975050508601359250508082111561408557600080fd5b5061409285828601613d89565b9150509250929050565b6000602082840312156140ae57600080fd5b81356115cb81614b32565b6000602082840312156140cb57600080fd5b81516115cb81614b32565b6000602082840312156140e857600080fd5b5035919050565b6000806040838503121561410257600080fd5b823591506020830135613eaf81614b1d565b6000806040838503121561412757600080fd5b50508035926020909101359150565b60006020828403121561414857600080fd5b81356115cb81614b40565b60006020828403121561416557600080fd5b81516115cb81614b40565b60008060006060848603121561418557600080fd5b61418e84613e0b565b925060208401519150604084015190509250925092565b600080600080600080600060e0888a0312156141c057600080fd5b87516141cb81614b1d565b96506141d960208901613df9565b95506141e760408901613e22565b94506141f560608901613e22565b935061420360808901613e22565b925060a088015160ff8116811461421957600080fd5b60c089015190925061422a81614b32565b8091505092959891949750929550565b60006020828403121561424c57600080fd5b5051919050565b6000806000806000806080878903121561426c57600080fd5b86359550602087013561427e81614b1d565b9450604087013567ffffffffffffffff8082111561429b57600080fd5b6142a78a838b01613d3d565b909650945060608901359150808211156142c057600080fd5b506142cd89828a01613d3d565b979a9699509497509295939492505050565b6000806000806000606086880312156142f757600080fd5b85359450602086013567ffffffffffffffff8082111561431657600080fd5b61432289838a01613d3d565b9096509450604088013591508082111561433b57600080fd5b5061434888828901613d3d565b969995985093965092949392505050565b6000806000806080858703121561436f57600080fd5b8451935061437f60208601613e0b565b6040860151606090960151949790965092505050565b600080604083850312156143a857600080fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f0312156143dc57600080fd5b8c516bffffffffffffffffffffffff811681146143f857600080fd5b9b5061440660208e01613d2d565b9a5061441460408e01613d2d565b995061442260608e01613d2d565b985061443060808e01613e34565b975061443e60a08e01613df9565b965061444c60c08e01613df9565b955061445a60e08e01613e0b565b94506101008d015193506101208d015192506144796101408e01613e0b565b91506144886101608e01613e0b565b90509295989b509295989b509295989b565b8183526000602080850194508260005b858110156144d85781356144bd81614b1d565b6001600160a01b0316875295820195908201906001016144aa565b509495945050505050565b600081518084526020808501945080840160005b838110156144d85781516001600160a01b0316875295820195908201906001016144f7565b600081518084526020808501945080840160005b838110156144d857815187529582019590820190600101614530565b600081518084526145648160208601602086016149c2565b601f01601f19169290920160200192915050565b6000825161458a8184602087016149c2565b9190910192915050565b600083516145a68184602088016149c2565b8351908301906145ba8183602088016149c2565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516145fb8160178501602088016149c2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161462c8160288401602088016149c2565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611af39083018461454c565b6020815260006115cb60208301846144e3565b60408152600061469160408301856144e3565b82810360208401526146a3818561451c565b95945050505050565b6020815260006115cb602083018461451c565b6020815260006115cb602083018461454c565b6020808252600390820152621411d160ea1b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526003908201526253415560e81b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600590820152640554e4654360dc1b604082015260600190565b81516001600160a01b03168152610160810160208301516147fa60208401826001600160a01b03169052565b506040830151614811604084018262ffffff169052565b506060830151614826606084018260020b9052565b50608083015161483b608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151614881828501826001600160a01b03169052565b505061014092830151919092015290565b8581526001600160a01b03851660208201526080604082018190526000906148bd908301858761449a565b82810360608401526148cf818561451c565b98975050505050505050565b8481526060602082015260006148f560608301858761449a565b8281036040840152613afa818561451c565b604051601f8201601f1916810167ffffffffffffffff8111828210171561493057614930614b07565b604052919050565b6000821982111561494b5761494b614aaf565b500190565b60008261495f5761495f614ac5565b500490565b600081600019048311821515161561497e5761497e614aaf565b500290565b60006001600160a01b03838116908316818110156149a3576149a3614aaf565b039392505050565b6000828210156149bd576149bd614aaf565b500390565b60005b838110156149dd5781810151838201526020016149c5565b83811115611b2f5750506000910152565b6000816149fd576149fd614aaf565b506000190190565b600181811c90821680614a1957607f821691505b60208210811415614a3a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614a5457614a54614aaf565b5060010190565b600082614a6a57614a6a614ac5565b500690565b60008160020b627fffff19811415614a8957614a89614aaf565b60000392915050565b6000600160ff1b821415614aa857614aa8614aaf565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146122f857600080fd5b80151581146122f857600080fd5b6001600160e01b0319811681146122f857600080fdfea26469706673582212204815c6a7a7727c258c220656d42865999242c807e4e165ba17977559867c69c164736f6c63430008070033abea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90ab2ca199e5d628271269f73708112899272988324e125fafee9627694e71b1d25",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80639010d07c11610130578063c87b56dd116100b8578063ebcf2d771161007c578063ebcf2d771461050f578063ec15eb161461052f578063ee48184514610538578063ee7e2dd31461054a578063fe7f20341461058357600080fd5b8063c87b56dd14610487578063ca15c8731461049a578063d547741f146104ad578063de7f9e4e146104c0578063e985e9c5146104d357600080fd5b8063a217fddf116100ff578063a217fddf1461043d578063a22cb46514610445578063b539978214610458578063b7874baa14610461578063b88d4fde1461047457600080fd5b80639010d07c1461040257806391d148541461041557806395d89b4114610428578063a1256f9f1461043057600080fd5b8063248a9ca3116101b357806342842e0e1161018257806342842e0e1461039a57806344fbb334146103ad5780636352211e146103b557806370a08231146103c8578063791b98bc146103db57600080fd5b8063248a9ca31461033e5780632f2ff15d1461036157806336568abe14610374578063423b01ec1461038757600080fd5b80630d7a41b7116101fa5780630d7a41b7146102a957806313a24a30146102c957806318e44a49146102ea5780631bb7ad6b1461030b57806323b872dd1461032b57600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a366004614136565b61058b565b60405190151581526020015b60405180910390f35b61025c6105b6565b60405161024b91906146bf565b61027c6102773660046140d6565b610648565b6040516001600160a01b03909116815260200161024b565b6102a76102a2366004613f95565b6106e2565b005b6102bc6102b73660046142df565b6107f8565b60405161024b91906146ac565b6102dc6102d7366004613fc1565b610e12565b60405190815260200161024b565b6102fd6102f83660046140d6565b610f93565b60405161024b92919061467e565b61031e6103193660046140d6565b61134a565b60405161024b919061466b565b6102a7610339366004613eba565b6113b6565b6102dc61034c3660046140d6565b60009081526020819052604090206001015490565b6102a761036f3660046140ef565b6113e7565b6102a76103823660046140ef565b611409565b6102a761039536600461409c565b61142b565b6102a76103a8366004613eba565b611469565b6102a7611484565b61027c6103c33660046140d6565b6114b5565b6102dc6103d6366004613e47565b61152c565b61027c7f000000000000000000000000000000000000000000000000000000000000000081565b61027c610410366004614114565b6115b3565b61023f6104233660046140ef565b6115d2565b61025c6115fb565b60085461023f9060ff1681565b6102dc600081565b6102a7610453366004613f67565b61160a565b6102dc600a5481565b6102bc61046f366004614253565b6116cf565b6102a7610482366004613efb565b611afd565b61025c6104953660046140d6565b611b35565b6102dc6104a83660046140d6565b611c1c565b6102a76104bb3660046140ef565b611c33565b6102a76104ce3660046140d6565b611c3d565b61023f6104e1366004613e81565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6102dc61051d3660046140d6565b600e6020526000908152604090205481565b6102dc60095481565b60085461023f90610100900460ff1681565b61023f6105583660046140ef565b6000918252600c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102a7611c66565b60006001600160e01b03198216631ccd795160e31b14806105b057506105b082611ccc565b92915050565b6060600280546105c590614a05565b80601f01602080910402602001604051908101604052809291908181526020018280546105f190614a05565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b03166106c65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006106ed826114b5565b9050806001600160a01b0316836001600160a01b0316141561075b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106bd565b336001600160a01b0382161480610777575061077781336104e1565b6107e95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106bd565b6107f38383611d0c565b505050565b60606108043387611d7a565b6108355760405162461bcd60e51b8152602060048201526002602482015261494f60f01b60448201526064016106bd565b610871858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611e7192505050565b61088d5760405162461bcd60e51b81526004016106bd90614741565b8382146108c05760405162461bcd60e51b81526020600482015260016024820152601360fa1b60448201526064016106bd565b6000868152600e6020526040902054806108ec5760405162461bcd60e51b81526004016106bd906147af565b60405163133f757160e31b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399fbab88906024016101806040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a91906143b9565b50505050505050509350935050506000600267ffffffffffffffff8111156109b4576109b4614b07565b6040519080825280602002602001820160405280156109dd578160200160208202803683370190505b50905082816000815181106109f4576109f4614af1565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110610a2857610a28614af1565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610ab8828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250611f1692505050565b905060005b8151811015610b4c57610b183330848481518110610add57610add614af1565b6020026020010151868581518110610af757610af7614af1565b60200260200101516001600160a01b0316612138909392919063ffffffff16565b610b3a838281518110610b2d57610b2d614af1565b60200260200101516121a3565b80610b4481614a40565b915050610abd565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663219f5d176040518060c001604052808a815260200186600081518110610ba357610ba3614af1565b6020026020010151815260200186600181518110610bc357610bc3614af1565b60200260200101518152602001600081526020016000815260200142610258610bec9190614938565b9052604080516001600160e01b031960e085901b1681528251600482015260208301516024820152908201516044820152606082015160648201526080820151608482015260a09091015160a482015260c401606060405180830381600087803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c919190614170565b6040805160028082526060820183529396509194509092506020830190803683370190505097508188600081518110610ccc57610ccc614af1565b6020026020010181815250508088600181518110610cec57610cec614af1565b60200260200101818152505060005b8451811015610dc457838181518110610d1657610d16614af1565b6020026020010151898281518110610d3057610d30614af1565b60200260200101511015610db257610db2338a8381518110610d5457610d54614af1565b6020026020010151868481518110610d6e57610d6e614af1565b6020026020010151610d8091906149ab565b878481518110610d9257610d92614af1565b60200260200101516001600160a01b03166122fb9092919063ffffffff16565b80610dbc81614a40565b915050610cfb565b507fe33829dd3495a41ba02f88de5eadec2635e25192c73dee8c65625206aa61e09a8d8d8d8b604051610dfa94939291906148db565b60405180910390a15050505050505095945050505050565b60085460009060ff1680610e295750610e2961232b565b610e455760405162461bcd60e51b81526004016106bd906146d2565b60095483511115610e7d5760405162461bcd60e51b8152602060048201526002602482015261135560f21b60448201526064016106bd565b610e8683611e71565b610ea25760405162461bcd60e51b81526004016106bd90614741565b6000610eae848461238c565b6000818152600b602090815260409091208651929350610ed2929091870190613cb3565b5060005b8451811015610f49576000828152600c60205260408120865160019290889085908110610f0557610f05614af1565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610f4181614a40565b915050610ed6565b5080336001600160a01b03167fe423da5b0aa0eb7a8c8409551a7f9487952c6003da26568ea41ee22cf3133d4a85604051610f8491906146bf565b60405180910390a39392505050565b6000818152600e6020526040902054606090819080610fc45760405162461bcd60e51b81526004016106bd906147af565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399fbab88886040518263ffffffff1660e01b815260040161101b91815260200190565b6101806040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c91906143b9565b50505050975097509750975097509750505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190613e64565b604051630b4c774160e11b81526001600160a01b038981166004830152888116602483015262ffffff881660448301529190911690631698ee829060640160206040518083038186803b15801561116757600080fd5b505afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f9190613e64565b90506000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156111dc57600080fd5b505afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121491906141a5565b50505050505090506000611227866125fa565b90506000611234866125fa565b90506000806112458585858a612a0f565b604080516002808252606082019092529294509092508160200160208202803683370190505060408051600280825260608201909252919f50816020016020820280368337019050509e508b8f6000815181106112a4576112a4614af1565b60200260200101906001600160a01b031690816001600160a01b0316815250508a8f6001815181106112d8576112d8614af1565b60200260200101906001600160a01b031690816001600160a01b031681525050818e60008151811061130c5761130c614af1565b602002602001018181525050808e60018151811061132c5761132c614af1565b60200260200101818152505050505050505050505050505050915091565b6000818152600b60209081526040918290208054835181840281018401909452808452606093928301828280156113aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161138c575b50505050509050919050565b6113c03382611d7a565b6113dc5760405162461bcd60e51b81526004016106bd9061475e565b6107f3838383612aab565b6113f18282612c4b565b60008281526001602052604090206107f39082611cb7565b6114138282612c71565b60008281526001602052604090206107f39082612ceb565b61143361232b565b61144f5760405162461bcd60e51b81526004016106bd906146d2565b600880549115156101000261ff0019909216919091179055565b6107f383838360405180602001604052806000815250611afd565b61148c61232b565b6114a85760405162461bcd60e51b81526004016106bd906146d2565b600a805460095560009055565b6000818152600460205260408120546001600160a01b0316806105b05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106bd565b60006001600160a01b0382166115975760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106bd565b506001600160a01b031660009081526005602052604090205490565b60008281526001602052604081206115cb9083612d00565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600380546105c590614a05565b6001600160a01b0382163314156116635760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106bd565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60606116db3388611d7a565b61170c5760405162461bcd60e51b8152602060048201526002602482015261494f60f01b60448201526064016106bd565b611748858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611e7192505050565b6117645760405162461bcd60e51b81526004016106bd90614741565b8382146117975760405162461bcd60e51b81526020600482015260016024820152601360fa1b60448201526064016106bd565b6000878152600e6020526040902054806117c35760405162461bcd60e51b81526004016106bd906147af565b60006117d3898389898989612d0c565b90508061184357604080516002808252606082018352909160208301908036833701905050925060008360008151811061180f5761180f614af1565b60200260200101818152505060008360018151811061183057611830614af1565b6020026020010181815250505050611af3565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c49ccbe6040518060a00160405280878152602001866001600160801b031681526020016000815260200160008152602001426102586118b19190614938565b9052604080516001600160e01b031960e085901b1681528251600482015260208301516001600160801b0316602482015290820151604482015260608201516064820152608090910151608482015260a4016040805180830381600087803b15801561191c57600080fd5b505af1158015611930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119549190614395565b604080516080810182528781526001600160a01b038e8116602083019081526001600160801b0380871684860190815281871660608601908152955163fc6f786560e01b8152945160048601529151831660248501529051811660448401529251909216606482015292945090925060009182917f0000000000000000000000000000000000000000000000000000000000000000169063fc6f7865906084016040805180830381600087803b158015611a0d57600080fd5b505af1158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a459190614395565b604080516002808252606082019092529294509092508160200160208202803683370190505096508187600081518110611a8157611a81614af1565b6020026020010181815250508087600181518110611aa157611aa1614af1565b6020026020010181815250507f8d04027fcc6b389782391c87ffe1fbc8b300720c147b657fc2cd85161fcf2fe98d8d8d8d8b604051611ae4959493929190614892565b60405180910390a15050505050505b9695505050505050565b611b073383611d7a565b611b235760405162461bcd60e51b81526004016106bd9061475e565b611b2f84848484613030565b50505050565b6000818152600460205260409020546060906001600160a01b0316611bb45760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106bd565b6000611bcb60408051602081019091526000815290565b90506000815111611beb57604051806020016040528060008152506115cb565b80611bf584613063565b604051602001611c06929190614594565b6040516020818303038152906040529392505050565b60008181526001602052604081206105b090613161565b611413828261316b565b611c4561232b565b611c615760405162461bcd60e51b81526004016106bd906146d2565b600a55565b611c6e61232b565b611c8a5760405162461bcd60e51b81526004016106bd906146d2565b6008805461ff001960ff61010083041615151661ffff19909116179055565b611cb38282613191565b5050565b60006115cb836001600160a01b038416613215565b60006001600160e01b031982166380ac58cd60e01b1480611cfd57506001600160e01b03198216635b5e139f60e01b145b806105b057506105b082613264565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d41826114b5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b0316611df35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106bd565b6000611dfe836114b5565b9050806001600160a01b0316846001600160a01b03161480611e395750836001600160a01b0316611e2e84610648565b6001600160a01b0316145b80611e6957506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b6000600282511015611e8557506001919050565b60005b60018351611e9691906149ab565b811015611f0d5782611ea9826001614938565b81518110611eb957611eb9614af1565b60200260200101516001600160a01b0316838281518110611edc57611edc614af1565b60200260200101516001600160a01b031610611efb5750600092915050565b80611f0581614a40565b915050611e88565b50600192915050565b60606000845167ffffffffffffffff811115611f3457611f34614b07565b604051908082528060200260200182016040528015611f5d578160200160208202803683370190505b5090506000805b865182108015611f745750855181105b156120f357858181518110611f8b57611f8b614af1565b60200260200101516001600160a01b0316878381518110611fae57611fae614af1565b60200260200101516001600160a01b03161015611ff6576000838381518110611fd957611fd9614af1565b602090810291909101015281611fee81614a40565b925050611f64565b85818151811061200857612008614af1565b60200260200101516001600160a01b031687838151811061202b5761202b614af1565b60200260200101516001600160a01b031611156120a45784818151811061205457612054614af1565b602002602001015160001415612076578061206e81614a40565b915050611f64565b60405162461bcd60e51b815260206004820152600360248201526254505360e81b60448201526064016106bd565b8481815181106120b6576120b6614af1565b60200260200101518383815181106120d0576120d0614af1565b6020908102919091010152816120e581614a40565b925050808061206e90614a40565b865182101561212d57600083838151811061211057612110614af1565b60209081029190910101528161212581614a40565b9250506120f3565b509095945050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b2f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613289565b6121b06002600019614950565b604051636eb1769f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015230602483015283169063dd62ed3e9060440160206040518083038186803b15801561221757600080fd5b505afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f919061423a565b10156122f85760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600019602483015282169063095ea7b390604401602060405180830381600087803b1580156122c057600080fd5b505af11580156122d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb391906140b9565b50565b6040516001600160a01b0383166024820152604481018290526107f390849063a9059cbb60e01b9060640161216c565b60006123577fabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a336115d2565b8061238757506123877fb2ca199e5d628271269f73708112899272988324e125fafee9627694e71b1d25336115d2565b905090565b60008151610100146123c55760405162461bcd60e51b8152602060048201526002602482015261049560f41b60448201526064016106bd565b82516002146123fb5760405162461bcd60e51b8152602060048201526002602482015261151360f21b60448201526064016106bd565b602082015160408301516060840151608085015160a086015160c087015160e088015161010089015161243d3330878e600081518110610af757610af7614af1565b6124563330868e600181518110610af757610af7614af1565b61246c8b600081518110610b2d57610b2d614af1565b6124828b600181518110610b2d57610b2d614af1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663883164566040518061016001604052808f6000815181106124d2576124d2614af1565b60200260200101516001600160a01b031681526020018f6001815181106124fb576124fb614af1565b60200260200101516001600160a01b031681526020018c62ffffff1681526020018b60020b81526020018a60020b8152602001898152602001888152602001878152602001868152602001306001600160a01b03168152602001858152506040518263ffffffff1660e01b815260040161257591906147ce565b608060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c79190614359565b505050905060006125d88d8d61335b565b6000818152600e6020526040902092909255509b9a5050505050505050505050565b60008060008360020b12612611578260020b61261e565b8260020b61261e90614a92565b905061262d620d89e719614a6f565b60020b8111156126635760405162461bcd60e51b81526020600482015260016024820152601560fa1b60448201526064016106bd565b60006001821661267757600160801b612689565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156126c85760806126c3826ffff97272373d413259a46990580e213a614964565b901c90505b60048216156126f25760806126ed826ffff2e50f5f656932ef12357cf3c7fdcc614964565b901c90505b600882161561271c576080612717826fffe5caca7e10e4e61c3624eaa0941cd0614964565b901c90505b6010821615612746576080612741826fffcb9843d60f6159c9db58835c926644614964565b901c90505b602082161561277057608061276b826fff973b41fa98c081472e6896dfb254c0614964565b901c90505b604082161561279a576080612795826fff2ea16466c96a3843ec78b326b52861614964565b901c90505b60808216156127c45760806127bf826ffe5dee046a99a2a811c461f1969c3053614964565b901c90505b6101008216156127ef5760806127ea826ffcbe86c7900a88aedcffc83b479aa3a4614964565b901c90505b61020082161561281a576080612815826ff987a7253ac413176f2b074cf7815e54614964565b901c90505b610400821615612845576080612840826ff3392b0822b70005940c7a398e4b70f3614964565b901c90505b61080082161561287057608061286b826fe7159475a2c29b7443b29c7fa6e889d9614964565b901c90505b61100082161561289b576080612896826fd097f3bdfd2022b8845ad8f792aa5825614964565b901c90505b6120008216156128c65760806128c1826fa9f746462d870fdf8a65dc1f90e061e5614964565b901c90505b6140008216156128f15760806128ec826f70d869a156d2a1b890bb3df62baf32f7614964565b901c90505b61800082161561291c576080612917826f31be135f97d08fd981231505542fcfa6614964565b901c90505b62010000821615612948576080612943826f09aa508b5b7a84e1c677de54f3e99bc9614964565b901c90505b6202000082161561297357608061296e826e5d6af8dedb81196699c329225ee604614964565b901c90505b6204000082161561299d576080612998826d2216e584f5fa1ea926041bedfe98614964565b901c90505b620800008216156129c55760806129c0826b048a170391f7dc42444e8fa2614964565b901c90505b60008460020b13156129e0576129dd81600019614950565b90505b6129ef64010000000082614a5b565b156129fb5760016129fe565b60005b611e699060ff16602083901c614938565b600080836001600160a01b0316856001600160a01b03161115612a30579293925b846001600160a01b0316866001600160a01b031611612a5b57612a54858585613380565b9150612aa2565b836001600160a01b0316866001600160a01b03161015612a9457612a80868585613380565b9150612a8d8587856133f3565b9050612aa2565b612a9f8585856133f3565b90505b94509492505050565b826001600160a01b0316612abe826114b5565b6001600160a01b031614612b265760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106bd565b6001600160a01b038216612b885760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106bd565b612b93600082611d0c565b6001600160a01b0383166000908152600560205260408120805460019290612bbc9084906149ab565b90915550506001600160a01b0382166000908152600560205260408120805460019290612bea908490614938565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600082815260208190526040902060010154612c67813361343d565b6107f38383613191565b6001600160a01b0381163314612ce15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106bd565b611cb382826134a1565b60006115cb836001600160a01b038416613506565b60006115cb83836135f9565b6000806000612d1a89610f93565b915091506000612d8e8389898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611f1692505050565b60405163133f757160e31b8152600481018b90529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399fbab88906024016101806040518083038186803b158015612df557600080fd5b505afa158015612e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2d91906143b9565b5050505097505050505050505082600081518110612e4d57612e4d614af1565b602002602001015160001415612eec5781600081518110612e7057612e70614af1565b602002602001015160001415612edf5782600181518110612e9357612e93614af1565b602002602001015182600181518110612eae57612eae614af1565b6020026020010151826001600160801b0316612eca9190614964565b612ed49190614950565b945050505050611af3565b6000945050505050611af3565b82600181518110612eff57612eff614af1565b602002602001015160001415612f605781600181518110612f2257612f22614af1565b602002602001015160001415612edf5782600081518110612f4557612f45614af1565b602002602001015182600081518110612eae57612eae614af1565b600083600081518110612f7557612f75614af1565b602002602001015183600081518110612f9057612f90614af1565b6020026020010151836001600160801b0316612fac9190614964565b612fb69190614950565b9050600084600181518110612fcd57612fcd614af1565b602002602001015184600181518110612fe857612fe8614af1565b6020026020010151846001600160801b03166130049190614964565b61300e9190614950565b905080821061301d578061301f565b815b9d9c50505050505050505050505050565b61303b848484612aab565b61304784848484613623565b611b2f5760405162461bcd60e51b81526004016106bd906146ef565b6060816130875750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130b1578061309b81614a40565b91506130aa9050600a83614950565b915061308b565b60008167ffffffffffffffff8111156130cc576130cc614b07565b6040519080825280601f01601f1916602001820160405280156130f6576020820181803683370190505b5090505b8415611e695761310b6001836149ab565b9150613118600a86614a5b565b613123906030614938565b60f81b81838151811061313857613138614af1565b60200101906001600160f81b031916908160001a90535061315a600a86614950565b94506130fa565b60006105b0825490565b600082815260208190526040902060010154613187813361343d565b6107f383836134a1565b61319b82826115d2565b611cb3576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556131d13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461325c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105b0565b5060006105b0565b60006001600160e01b03198216635a05180f60e01b14806105b057506105b082613730565b60006132de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137659092919063ffffffff16565b8051909150156107f357808060200190518101906132fc91906140b9565b6107f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bd565b600d8054600091600190836133708385614938565b909155506115cb90503382613774565b6000826001600160a01b0316846001600160a01b031611156133a0579192915b6001600160a01b0384166133e96fffffffffffffffffffffffffffffffff60601b606085901b166133d18787614983565b6001600160a01b0316866001600160a01b031661378e565b611e699190614950565b6000826001600160a01b0316846001600160a01b03161115613413579192915b611e696001600160801b03831661342a8686614983565b6001600160a01b0316600160601b61378e565b61344782826115d2565b611cb35761345f816001600160a01b03166014613841565b61346a836020613841565b60405160200161347b9291906145c3565b60408051601f198184030181529082905262461bcd60e51b82526106bd916004016146bf565b6134ab82826115d2565b15611cb3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156135ef57600061352a6001836149ab565b855490915060009061353e906001906149ab565b90508181146135a357600086600001828154811061355e5761355e614af1565b906000526020600020015490508087600001848154811061358157613581614af1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806135b4576135b4614adb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105b0565b60009150506105b0565b600082600001828154811061361057613610614af1565b9060005260206000200154905092915050565b60006001600160a01b0384163b1561372557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613667903390899088908890600401614638565b602060405180830381600087803b15801561368157600080fd5b505af19250505080156136b1575060408051601f3d908101601f191682019092526136ae91810190614153565b60015b61370b573d8080156136df576040519150601f19603f3d011682016040523d82523d6000602084013e6136e4565b606091505b5080516137035760405162461bcd60e51b81526004016106bd906146ef565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e69565b506001949350505050565b60006001600160e01b03198216637965db0b60e01b14806105b057506301ffc9a760e01b6001600160e01b03198316146105b0565b6060611e6984846000856139dd565b611cb3828260405180602001604052806000815250613b05565b6000808060001985870985870292508281108382030391505080600014156137c857600084116137bd57600080fd5b5082900490506115cb565b8084116137d457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60606000613850836002614964565b61385b906002614938565b67ffffffffffffffff81111561387357613873614b07565b6040519080825280601f01601f19166020018201604052801561389d576020820181803683370190505b509050600360fc1b816000815181106138b8576138b8614af1565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106138e7576138e7614af1565b60200101906001600160f81b031916908160001a905350600061390b846002614964565b613916906001614938565b90505b600181111561398e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061394a5761394a614af1565b1a60f81b82828151811061396057613960614af1565b60200101906001600160f81b031916908160001a90535060049490941c93613987816149ee565b9050613919565b5083156115cb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106bd565b606082471015613a3e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106bd565b843b613a8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bd565b600080866001600160a01b03168587604051613aa89190614578565b60006040518083038185875af1925050503d8060008114613ae5576040519150601f19603f3d011682016040523d82523d6000602084013e613aea565b606091505b5091509150613afa828286613b38565b979650505050505050565b613b0f8383613b71565b613b1c6000848484613623565b6107f35760405162461bcd60e51b81526004016106bd906146ef565b60608315613b475750816115cb565b825115613b575782518084602001fd5b8160405162461bcd60e51b81526004016106bd91906146bf565b6001600160a01b038216613bc75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106bd565b6000818152600460205260409020546001600160a01b031615613c2c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106bd565b6001600160a01b0382166000908152600560205260408120805460019290613c55908490614938565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054828255906000526020600020908101928215613d08579160200282015b82811115613d0857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613cd3565b50613d14929150613d18565b5090565b5b80821115613d145760008155600101613d19565b8051613d3881614b1d565b919050565b60008083601f840112613d4f57600080fd5b50813567ffffffffffffffff811115613d6757600080fd5b6020830191508360208260051b8501011115613d8257600080fd5b9250929050565b600082601f830112613d9a57600080fd5b813567ffffffffffffffff811115613db457613db4614b07565b613dc7601f8201601f1916602001614907565b818152846020838601011115613ddc57600080fd5b816020850160208301376000918101602001919091529392505050565b8051600281900b8114613d3857600080fd5b80516001600160801b0381168114613d3857600080fd5b805161ffff81168114613d3857600080fd5b805162ffffff81168114613d3857600080fd5b600060208284031215613e5957600080fd5b81356115cb81614b1d565b600060208284031215613e7657600080fd5b81516115cb81614b1d565b60008060408385031215613e9457600080fd5b8235613e9f81614b1d565b91506020830135613eaf81614b1d565b809150509250929050565b600080600060608486031215613ecf57600080fd5b8335613eda81614b1d565b92506020840135613eea81614b1d565b929592945050506040919091013590565b60008060008060808587031215613f1157600080fd5b8435613f1c81614b1d565b93506020850135613f2c81614b1d565b925060408501359150606085013567ffffffffffffffff811115613f4f57600080fd5b613f5b87828801613d89565b91505092959194509250565b60008060408385031215613f7a57600080fd5b8235613f8581614b1d565b91506020830135613eaf81614b32565b60008060408385031215613fa857600080fd5b8235613fb381614b1d565b946020939093013593505050565b60008060408385031215613fd457600080fd5b823567ffffffffffffffff80821115613fec57600080fd5b818501915085601f83011261400057600080fd5b813560208282111561401457614014614b07565b8160051b614023828201614907565b8381528281019086840183880185018c101561403e57600080fd5b600097505b8588101561406d578035935061405884614b1d565b83835260019790970196918401918401614043565b50975050508601359250508082111561408557600080fd5b5061409285828601613d89565b9150509250929050565b6000602082840312156140ae57600080fd5b81356115cb81614b32565b6000602082840312156140cb57600080fd5b81516115cb81614b32565b6000602082840312156140e857600080fd5b5035919050565b6000806040838503121561410257600080fd5b823591506020830135613eaf81614b1d565b6000806040838503121561412757600080fd5b50508035926020909101359150565b60006020828403121561414857600080fd5b81356115cb81614b40565b60006020828403121561416557600080fd5b81516115cb81614b40565b60008060006060848603121561418557600080fd5b61418e84613e0b565b925060208401519150604084015190509250925092565b600080600080600080600060e0888a0312156141c057600080fd5b87516141cb81614b1d565b96506141d960208901613df9565b95506141e760408901613e22565b94506141f560608901613e22565b935061420360808901613e22565b925060a088015160ff8116811461421957600080fd5b60c089015190925061422a81614b32565b8091505092959891949750929550565b60006020828403121561424c57600080fd5b5051919050565b6000806000806000806080878903121561426c57600080fd5b86359550602087013561427e81614b1d565b9450604087013567ffffffffffffffff8082111561429b57600080fd5b6142a78a838b01613d3d565b909650945060608901359150808211156142c057600080fd5b506142cd89828a01613d3d565b979a9699509497509295939492505050565b6000806000806000606086880312156142f757600080fd5b85359450602086013567ffffffffffffffff8082111561431657600080fd5b61432289838a01613d3d565b9096509450604088013591508082111561433b57600080fd5b5061434888828901613d3d565b969995985093965092949392505050565b6000806000806080858703121561436f57600080fd5b8451935061437f60208601613e0b565b6040860151606090960151949790965092505050565b600080604083850312156143a857600080fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f0312156143dc57600080fd5b8c516bffffffffffffffffffffffff811681146143f857600080fd5b9b5061440660208e01613d2d565b9a5061441460408e01613d2d565b995061442260608e01613d2d565b985061443060808e01613e34565b975061443e60a08e01613df9565b965061444c60c08e01613df9565b955061445a60e08e01613e0b565b94506101008d015193506101208d015192506144796101408e01613e0b565b91506144886101608e01613e0b565b90509295989b509295989b509295989b565b8183526000602080850194508260005b858110156144d85781356144bd81614b1d565b6001600160a01b0316875295820195908201906001016144aa565b509495945050505050565b600081518084526020808501945080840160005b838110156144d85781516001600160a01b0316875295820195908201906001016144f7565b600081518084526020808501945080840160005b838110156144d857815187529582019590820190600101614530565b600081518084526145648160208601602086016149c2565b601f01601f19169290920160200192915050565b6000825161458a8184602087016149c2565b9190910192915050565b600083516145a68184602088016149c2565b8351908301906145ba8183602088016149c2565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516145fb8160178501602088016149c2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161462c8160288401602088016149c2565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611af39083018461454c565b6020815260006115cb60208301846144e3565b60408152600061469160408301856144e3565b82810360208401526146a3818561451c565b95945050505050565b6020815260006115cb602083018461451c565b6020815260006115cb602083018461454c565b6020808252600390820152621411d160ea1b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526003908201526253415560e81b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600590820152640554e4654360dc1b604082015260600190565b81516001600160a01b03168152610160810160208301516147fa60208401826001600160a01b03169052565b506040830151614811604084018262ffffff169052565b506060830151614826606084018260020b9052565b50608083015161483b608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151614881828501826001600160a01b03169052565b505061014092830151919092015290565b8581526001600160a01b03851660208201526080604082018190526000906148bd908301858761449a565b82810360608401526148cf818561451c565b98975050505050505050565b8481526060602082015260006148f560608301858761449a565b8281036040840152613afa818561451c565b604051601f8201601f1916810167ffffffffffffffff8111828210171561493057614930614b07565b604052919050565b6000821982111561494b5761494b614aaf565b500190565b60008261495f5761495f614ac5565b500490565b600081600019048311821515161561497e5761497e614aaf565b500290565b60006001600160a01b03838116908316818110156149a3576149a3614aaf565b039392505050565b6000828210156149bd576149bd614aaf565b500390565b60005b838110156149dd5781810151838201526020016149c5565b83811115611b2f5750506000910152565b6000816149fd576149fd614aaf565b506000190190565b600181811c90821680614a1957607f821691505b60208210811415614a3a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614a5457614a54614aaf565b5060010190565b600082614a6a57614a6a614ac5565b500690565b60008160020b627fffff19811415614a8957614a89614aaf565b60000392915050565b6000600160ff1b821415614aa857614aa8614aaf565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146122f857600080fd5b80151581146122f857600080fd5b6001600160e01b0319811681146122f857600080fdfea26469706673582212204815c6a7a7727c258c220656d42865999242c807e4e165ba17977559867c69c164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createCell(address[],bytes)": {
        "notice": "-------------------  PUBLIC, MUTATING, GOVERNANCE OR PERMISSIONLESS  -------------------"
      },
      "delegated(uint256)": {
        "notice": "-------------------  PUBLIC, VIEW  -------------------"
      },
      "deposit(uint256,address[],uint256[])": {
        "notice": "-------------------  PUBLIC, MUTATING, NFT_OWNER  -------------------"
      },
      "managedTokens(uint256)": {
        "notice": "-------------------  PUBLIC, VIEW  -------------------"
      },
      "setPendingPermissionless(bool)": {
        "notice": "-------------------  PUBLIC, MUTATING, GOVERNANCE  -------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 403,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3574_storage)"
      },
      {
        "astId": 1783,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1785,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1789,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1793,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1797,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1803,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4333,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "permissionless",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 4335,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "pendingPermissionless",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 4338,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "maxTokensPerCell",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4340,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "pendingMaxTokensPerCell",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4345,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_managedTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4351,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_managedTokensIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4354,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "_topCellNft",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6253,
        "contract": "contracts/UniV3Cells.sol:UniV3Cells",
        "label": "uniNfts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3574_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3574_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3574_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3573,
            "contract": "contracts/UniV3Cells.sol:UniV3Cells",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3303_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/UniV3Cells.sol:UniV3Cells",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/UniV3Cells.sol:UniV3Cells",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3303_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3298,
            "contract": "contracts/UniV3Cells.sol:UniV3Cells",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3302,
            "contract": "contracts/UniV3Cells.sol:UniV3Cells",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}